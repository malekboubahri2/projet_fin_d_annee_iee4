
h7a3zi-pfa-mai-no-rtos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cf84  080002b0  080002b0  000012b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000660  0800d238  0800d238  0000e238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d898  0800d898  0000e898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d8a0  0800d8a0  0000e8a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800d8a4  0800d8a4  0000e8a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001d8  24000000  0800d8a8  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000454  240001d8  0800da80  0000f1d8  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400062c  0800da80  0000f62c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000f1d8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001961d  00000000  00000000  0000f206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002d37  00000000  00000000  00028823  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001578  00000000  00000000  0002b560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000010be  00000000  00000000  0002cad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003361b  00000000  00000000  0002db96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001a3b1  00000000  00000000  000611b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015562d  00000000  00000000  0007b562  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001d0b8f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007094  00000000  00000000  001d0bd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005a  00000000  00000000  001d7c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	240001d8 	.word	0x240001d8
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800d21c 	.word	0x0800d21c

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	240001dc 	.word	0x240001dc
 80002ec:	0800d21c 	.word	0x0800d21c

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <strlen>:
 8000390:	4603      	mov	r3, r0
 8000392:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000396:	2a00      	cmp	r2, #0
 8000398:	d1fb      	bne.n	8000392 <strlen+0x2>
 800039a:	1a18      	subs	r0, r3, r0
 800039c:	3801      	subs	r0, #1
 800039e:	4770      	bx	lr

080003a0 <__aeabi_drsub>:
 80003a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003a4:	e002      	b.n	80003ac <__adddf3>
 80003a6:	bf00      	nop

080003a8 <__aeabi_dsub>:
 80003a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003ac <__adddf3>:
 80003ac:	b530      	push	{r4, r5, lr}
 80003ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003b6:	ea94 0f05 	teq	r4, r5
 80003ba:	bf08      	it	eq
 80003bc:	ea90 0f02 	teqeq	r0, r2
 80003c0:	bf1f      	itttt	ne
 80003c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d2:	f000 80e2 	beq.w	800059a <__adddf3+0x1ee>
 80003d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003de:	bfb8      	it	lt
 80003e0:	426d      	neglt	r5, r5
 80003e2:	dd0c      	ble.n	80003fe <__adddf3+0x52>
 80003e4:	442c      	add	r4, r5
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	ea82 0000 	eor.w	r0, r2, r0
 80003f2:	ea83 0101 	eor.w	r1, r3, r1
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	2d36      	cmp	r5, #54	@ 0x36
 8000400:	bf88      	it	hi
 8000402:	bd30      	pophi	{r4, r5, pc}
 8000404:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000408:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800040c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000410:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000414:	d002      	beq.n	800041c <__adddf3+0x70>
 8000416:	4240      	negs	r0, r0
 8000418:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800041c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000420:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000424:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x84>
 800042a:	4252      	negs	r2, r2
 800042c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000430:	ea94 0f05 	teq	r4, r5
 8000434:	f000 80a7 	beq.w	8000586 <__adddf3+0x1da>
 8000438:	f1a4 0401 	sub.w	r4, r4, #1
 800043c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000440:	db0d      	blt.n	800045e <__adddf3+0xb2>
 8000442:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000446:	fa22 f205 	lsr.w	r2, r2, r5
 800044a:	1880      	adds	r0, r0, r2
 800044c:	f141 0100 	adc.w	r1, r1, #0
 8000450:	fa03 f20e 	lsl.w	r2, r3, lr
 8000454:	1880      	adds	r0, r0, r2
 8000456:	fa43 f305 	asr.w	r3, r3, r5
 800045a:	4159      	adcs	r1, r3
 800045c:	e00e      	b.n	800047c <__adddf3+0xd0>
 800045e:	f1a5 0520 	sub.w	r5, r5, #32
 8000462:	f10e 0e20 	add.w	lr, lr, #32
 8000466:	2a01      	cmp	r2, #1
 8000468:	fa03 fc0e 	lsl.w	ip, r3, lr
 800046c:	bf28      	it	cs
 800046e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000472:	fa43 f305 	asr.w	r3, r3, r5
 8000476:	18c0      	adds	r0, r0, r3
 8000478:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800047c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000480:	d507      	bpl.n	8000492 <__adddf3+0xe6>
 8000482:	f04f 0e00 	mov.w	lr, #0
 8000486:	f1dc 0c00 	rsbs	ip, ip, #0
 800048a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800048e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000492:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000496:	d31b      	bcc.n	80004d0 <__adddf3+0x124>
 8000498:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800049c:	d30c      	bcc.n	80004b8 <__adddf3+0x10c>
 800049e:	0849      	lsrs	r1, r1, #1
 80004a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004a8:	f104 0401 	add.w	r4, r4, #1
 80004ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004b4:	f080 809a 	bcs.w	80005ec <__adddf3+0x240>
 80004b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004bc:	bf08      	it	eq
 80004be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c2:	f150 0000 	adcs.w	r0, r0, #0
 80004c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ca:	ea41 0105 	orr.w	r1, r1, r5
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d4:	4140      	adcs	r0, r0
 80004d6:	eb41 0101 	adc.w	r1, r1, r1
 80004da:	3c01      	subs	r4, #1
 80004dc:	bf28      	it	cs
 80004de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004e2:	d2e9      	bcs.n	80004b8 <__adddf3+0x10c>
 80004e4:	f091 0f00 	teq	r1, #0
 80004e8:	bf04      	itt	eq
 80004ea:	4601      	moveq	r1, r0
 80004ec:	2000      	moveq	r0, #0
 80004ee:	fab1 f381 	clz	r3, r1
 80004f2:	bf08      	it	eq
 80004f4:	3320      	addeq	r3, #32
 80004f6:	f1a3 030b 	sub.w	r3, r3, #11
 80004fa:	f1b3 0220 	subs.w	r2, r3, #32
 80004fe:	da0c      	bge.n	800051a <__adddf3+0x16e>
 8000500:	320c      	adds	r2, #12
 8000502:	dd08      	ble.n	8000516 <__adddf3+0x16a>
 8000504:	f102 0c14 	add.w	ip, r2, #20
 8000508:	f1c2 020c 	rsb	r2, r2, #12
 800050c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000510:	fa21 f102 	lsr.w	r1, r1, r2
 8000514:	e00c      	b.n	8000530 <__adddf3+0x184>
 8000516:	f102 0214 	add.w	r2, r2, #20
 800051a:	bfd8      	it	le
 800051c:	f1c2 0c20 	rsble	ip, r2, #32
 8000520:	fa01 f102 	lsl.w	r1, r1, r2
 8000524:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000528:	bfdc      	itt	le
 800052a:	ea41 010c 	orrle.w	r1, r1, ip
 800052e:	4090      	lslle	r0, r2
 8000530:	1ae4      	subs	r4, r4, r3
 8000532:	bfa2      	ittt	ge
 8000534:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000538:	4329      	orrge	r1, r5
 800053a:	bd30      	popge	{r4, r5, pc}
 800053c:	ea6f 0404 	mvn.w	r4, r4
 8000540:	3c1f      	subs	r4, #31
 8000542:	da1c      	bge.n	800057e <__adddf3+0x1d2>
 8000544:	340c      	adds	r4, #12
 8000546:	dc0e      	bgt.n	8000566 <__adddf3+0x1ba>
 8000548:	f104 0414 	add.w	r4, r4, #20
 800054c:	f1c4 0220 	rsb	r2, r4, #32
 8000550:	fa20 f004 	lsr.w	r0, r0, r4
 8000554:	fa01 f302 	lsl.w	r3, r1, r2
 8000558:	ea40 0003 	orr.w	r0, r0, r3
 800055c:	fa21 f304 	lsr.w	r3, r1, r4
 8000560:	ea45 0103 	orr.w	r1, r5, r3
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f1c4 040c 	rsb	r4, r4, #12
 800056a:	f1c4 0220 	rsb	r2, r4, #32
 800056e:	fa20 f002 	lsr.w	r0, r0, r2
 8000572:	fa01 f304 	lsl.w	r3, r1, r4
 8000576:	ea40 0003 	orr.w	r0, r0, r3
 800057a:	4629      	mov	r1, r5
 800057c:	bd30      	pop	{r4, r5, pc}
 800057e:	fa21 f004 	lsr.w	r0, r1, r4
 8000582:	4629      	mov	r1, r5
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f094 0f00 	teq	r4, #0
 800058a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800058e:	bf06      	itte	eq
 8000590:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000594:	3401      	addeq	r4, #1
 8000596:	3d01      	subne	r5, #1
 8000598:	e74e      	b.n	8000438 <__adddf3+0x8c>
 800059a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800059e:	bf18      	it	ne
 80005a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a4:	d029      	beq.n	80005fa <__adddf3+0x24e>
 80005a6:	ea94 0f05 	teq	r4, r5
 80005aa:	bf08      	it	eq
 80005ac:	ea90 0f02 	teqeq	r0, r2
 80005b0:	d005      	beq.n	80005be <__adddf3+0x212>
 80005b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005b6:	bf04      	itt	eq
 80005b8:	4619      	moveq	r1, r3
 80005ba:	4610      	moveq	r0, r2
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	ea91 0f03 	teq	r1, r3
 80005c2:	bf1e      	ittt	ne
 80005c4:	2100      	movne	r1, #0
 80005c6:	2000      	movne	r0, #0
 80005c8:	bd30      	popne	{r4, r5, pc}
 80005ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ce:	d105      	bne.n	80005dc <__adddf3+0x230>
 80005d0:	0040      	lsls	r0, r0, #1
 80005d2:	4149      	adcs	r1, r1
 80005d4:	bf28      	it	cs
 80005d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005da:	bd30      	pop	{r4, r5, pc}
 80005dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005e0:	bf3c      	itt	cc
 80005e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005e6:	bd30      	popcc	{r4, r5, pc}
 80005e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005f4:	f04f 0000 	mov.w	r0, #0
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005fe:	bf1a      	itte	ne
 8000600:	4619      	movne	r1, r3
 8000602:	4610      	movne	r0, r2
 8000604:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000608:	bf1c      	itt	ne
 800060a:	460b      	movne	r3, r1
 800060c:	4602      	movne	r2, r0
 800060e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000612:	bf06      	itte	eq
 8000614:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000618:	ea91 0f03 	teqeq	r1, r3
 800061c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	bf00      	nop

08000624 <__aeabi_ui2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000638:	f04f 0500 	mov.w	r5, #0
 800063c:	f04f 0100 	mov.w	r1, #0
 8000640:	e750      	b.n	80004e4 <__adddf3+0x138>
 8000642:	bf00      	nop

08000644 <__aeabi_i2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000658:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800065c:	bf48      	it	mi
 800065e:	4240      	negmi	r0, r0
 8000660:	f04f 0100 	mov.w	r1, #0
 8000664:	e73e      	b.n	80004e4 <__adddf3+0x138>
 8000666:	bf00      	nop

08000668 <__aeabi_f2d>:
 8000668:	0042      	lsls	r2, r0, #1
 800066a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800066e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000672:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000676:	bf1f      	itttt	ne
 8000678:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800067c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000680:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000684:	4770      	bxne	lr
 8000686:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800068a:	bf08      	it	eq
 800068c:	4770      	bxeq	lr
 800068e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000692:	bf04      	itt	eq
 8000694:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000698:	4770      	bxeq	lr
 800069a:	b530      	push	{r4, r5, lr}
 800069c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006a8:	e71c      	b.n	80004e4 <__adddf3+0x138>
 80006aa:	bf00      	nop

080006ac <__aeabi_ul2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f04f 0500 	mov.w	r5, #0
 80006ba:	e00a      	b.n	80006d2 <__aeabi_l2d+0x16>

080006bc <__aeabi_l2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ca:	d502      	bpl.n	80006d2 <__aeabi_l2d+0x16>
 80006cc:	4240      	negs	r0, r0
 80006ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006de:	f43f aed8 	beq.w	8000492 <__adddf3+0xe6>
 80006e2:	f04f 0203 	mov.w	r2, #3
 80006e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ea:	bf18      	it	ne
 80006ec:	3203      	addne	r2, #3
 80006ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f2:	bf18      	it	ne
 80006f4:	3203      	addne	r2, #3
 80006f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fa:	f1c2 0320 	rsb	r3, r2, #32
 80006fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000702:	fa20 f002 	lsr.w	r0, r0, r2
 8000706:	fa01 fe03 	lsl.w	lr, r1, r3
 800070a:	ea40 000e 	orr.w	r0, r0, lr
 800070e:	fa21 f102 	lsr.w	r1, r1, r2
 8000712:	4414      	add	r4, r2
 8000714:	e6bd      	b.n	8000492 <__adddf3+0xe6>
 8000716:	bf00      	nop

08000718 <__aeabi_uldivmod>:
 8000718:	b953      	cbnz	r3, 8000730 <__aeabi_uldivmod+0x18>
 800071a:	b94a      	cbnz	r2, 8000730 <__aeabi_uldivmod+0x18>
 800071c:	2900      	cmp	r1, #0
 800071e:	bf08      	it	eq
 8000720:	2800      	cmpeq	r0, #0
 8000722:	bf1c      	itt	ne
 8000724:	f04f 31ff 	movne.w	r1, #4294967295
 8000728:	f04f 30ff 	movne.w	r0, #4294967295
 800072c:	f000 b9a2 	b.w	8000a74 <__aeabi_idiv0>
 8000730:	f1ad 0c08 	sub.w	ip, sp, #8
 8000734:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000738:	f000 f83e 	bl	80007b8 <__udivmoddi4>
 800073c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000740:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000744:	b004      	add	sp, #16
 8000746:	4770      	bx	lr

08000748 <__aeabi_d2lz>:
 8000748:	b508      	push	{r3, lr}
 800074a:	4602      	mov	r2, r0
 800074c:	460b      	mov	r3, r1
 800074e:	ec43 2b17 	vmov	d7, r2, r3
 8000752:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800075a:	d403      	bmi.n	8000764 <__aeabi_d2lz+0x1c>
 800075c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000760:	f000 b80a 	b.w	8000778 <__aeabi_d2ulz>
 8000764:	eeb1 7b47 	vneg.f64	d7, d7
 8000768:	ec51 0b17 	vmov	r0, r1, d7
 800076c:	f000 f804 	bl	8000778 <__aeabi_d2ulz>
 8000770:	4240      	negs	r0, r0
 8000772:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000776:	bd08      	pop	{r3, pc}

08000778 <__aeabi_d2ulz>:
 8000778:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80007a8 <__aeabi_d2ulz+0x30>
 800077c:	ec41 0b17 	vmov	d7, r0, r1
 8000780:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007b0 <__aeabi_d2ulz+0x38>
 8000784:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000788:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800078c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000790:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000794:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000798:	ee16 1a10 	vmov	r1, s12
 800079c:	ee17 0a90 	vmov	r0, s15
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	f3af 8000 	nop.w
 80007a8:	00000000 	.word	0x00000000
 80007ac:	3df00000 	.word	0x3df00000
 80007b0:	00000000 	.word	0x00000000
 80007b4:	41f00000 	.word	0x41f00000

080007b8 <__udivmoddi4>:
 80007b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007bc:	9d08      	ldr	r5, [sp, #32]
 80007be:	460c      	mov	r4, r1
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d14e      	bne.n	8000862 <__udivmoddi4+0xaa>
 80007c4:	4694      	mov	ip, r2
 80007c6:	458c      	cmp	ip, r1
 80007c8:	4686      	mov	lr, r0
 80007ca:	fab2 f282 	clz	r2, r2
 80007ce:	d962      	bls.n	8000896 <__udivmoddi4+0xde>
 80007d0:	b14a      	cbz	r2, 80007e6 <__udivmoddi4+0x2e>
 80007d2:	f1c2 0320 	rsb	r3, r2, #32
 80007d6:	4091      	lsls	r1, r2
 80007d8:	fa20 f303 	lsr.w	r3, r0, r3
 80007dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80007e0:	4319      	orrs	r1, r3
 80007e2:	fa00 fe02 	lsl.w	lr, r0, r2
 80007e6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007ea:	fa1f f68c 	uxth.w	r6, ip
 80007ee:	fbb1 f4f7 	udiv	r4, r1, r7
 80007f2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80007f6:	fb07 1114 	mls	r1, r7, r4, r1
 80007fa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007fe:	fb04 f106 	mul.w	r1, r4, r6
 8000802:	4299      	cmp	r1, r3
 8000804:	d90a      	bls.n	800081c <__udivmoddi4+0x64>
 8000806:	eb1c 0303 	adds.w	r3, ip, r3
 800080a:	f104 30ff 	add.w	r0, r4, #4294967295
 800080e:	f080 8112 	bcs.w	8000a36 <__udivmoddi4+0x27e>
 8000812:	4299      	cmp	r1, r3
 8000814:	f240 810f 	bls.w	8000a36 <__udivmoddi4+0x27e>
 8000818:	3c02      	subs	r4, #2
 800081a:	4463      	add	r3, ip
 800081c:	1a59      	subs	r1, r3, r1
 800081e:	fa1f f38e 	uxth.w	r3, lr
 8000822:	fbb1 f0f7 	udiv	r0, r1, r7
 8000826:	fb07 1110 	mls	r1, r7, r0, r1
 800082a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800082e:	fb00 f606 	mul.w	r6, r0, r6
 8000832:	429e      	cmp	r6, r3
 8000834:	d90a      	bls.n	800084c <__udivmoddi4+0x94>
 8000836:	eb1c 0303 	adds.w	r3, ip, r3
 800083a:	f100 31ff 	add.w	r1, r0, #4294967295
 800083e:	f080 80fc 	bcs.w	8000a3a <__udivmoddi4+0x282>
 8000842:	429e      	cmp	r6, r3
 8000844:	f240 80f9 	bls.w	8000a3a <__udivmoddi4+0x282>
 8000848:	4463      	add	r3, ip
 800084a:	3802      	subs	r0, #2
 800084c:	1b9b      	subs	r3, r3, r6
 800084e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000852:	2100      	movs	r1, #0
 8000854:	b11d      	cbz	r5, 800085e <__udivmoddi4+0xa6>
 8000856:	40d3      	lsrs	r3, r2
 8000858:	2200      	movs	r2, #0
 800085a:	e9c5 3200 	strd	r3, r2, [r5]
 800085e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000862:	428b      	cmp	r3, r1
 8000864:	d905      	bls.n	8000872 <__udivmoddi4+0xba>
 8000866:	b10d      	cbz	r5, 800086c <__udivmoddi4+0xb4>
 8000868:	e9c5 0100 	strd	r0, r1, [r5]
 800086c:	2100      	movs	r1, #0
 800086e:	4608      	mov	r0, r1
 8000870:	e7f5      	b.n	800085e <__udivmoddi4+0xa6>
 8000872:	fab3 f183 	clz	r1, r3
 8000876:	2900      	cmp	r1, #0
 8000878:	d146      	bne.n	8000908 <__udivmoddi4+0x150>
 800087a:	42a3      	cmp	r3, r4
 800087c:	d302      	bcc.n	8000884 <__udivmoddi4+0xcc>
 800087e:	4290      	cmp	r0, r2
 8000880:	f0c0 80f0 	bcc.w	8000a64 <__udivmoddi4+0x2ac>
 8000884:	1a86      	subs	r6, r0, r2
 8000886:	eb64 0303 	sbc.w	r3, r4, r3
 800088a:	2001      	movs	r0, #1
 800088c:	2d00      	cmp	r5, #0
 800088e:	d0e6      	beq.n	800085e <__udivmoddi4+0xa6>
 8000890:	e9c5 6300 	strd	r6, r3, [r5]
 8000894:	e7e3      	b.n	800085e <__udivmoddi4+0xa6>
 8000896:	2a00      	cmp	r2, #0
 8000898:	f040 8090 	bne.w	80009bc <__udivmoddi4+0x204>
 800089c:	eba1 040c 	sub.w	r4, r1, ip
 80008a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008a4:	fa1f f78c 	uxth.w	r7, ip
 80008a8:	2101      	movs	r1, #1
 80008aa:	fbb4 f6f8 	udiv	r6, r4, r8
 80008ae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008b2:	fb08 4416 	mls	r4, r8, r6, r4
 80008b6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008ba:	fb07 f006 	mul.w	r0, r7, r6
 80008be:	4298      	cmp	r0, r3
 80008c0:	d908      	bls.n	80008d4 <__udivmoddi4+0x11c>
 80008c2:	eb1c 0303 	adds.w	r3, ip, r3
 80008c6:	f106 34ff 	add.w	r4, r6, #4294967295
 80008ca:	d202      	bcs.n	80008d2 <__udivmoddi4+0x11a>
 80008cc:	4298      	cmp	r0, r3
 80008ce:	f200 80cd 	bhi.w	8000a6c <__udivmoddi4+0x2b4>
 80008d2:	4626      	mov	r6, r4
 80008d4:	1a1c      	subs	r4, r3, r0
 80008d6:	fa1f f38e 	uxth.w	r3, lr
 80008da:	fbb4 f0f8 	udiv	r0, r4, r8
 80008de:	fb08 4410 	mls	r4, r8, r0, r4
 80008e2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008e6:	fb00 f707 	mul.w	r7, r0, r7
 80008ea:	429f      	cmp	r7, r3
 80008ec:	d908      	bls.n	8000900 <__udivmoddi4+0x148>
 80008ee:	eb1c 0303 	adds.w	r3, ip, r3
 80008f2:	f100 34ff 	add.w	r4, r0, #4294967295
 80008f6:	d202      	bcs.n	80008fe <__udivmoddi4+0x146>
 80008f8:	429f      	cmp	r7, r3
 80008fa:	f200 80b0 	bhi.w	8000a5e <__udivmoddi4+0x2a6>
 80008fe:	4620      	mov	r0, r4
 8000900:	1bdb      	subs	r3, r3, r7
 8000902:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000906:	e7a5      	b.n	8000854 <__udivmoddi4+0x9c>
 8000908:	f1c1 0620 	rsb	r6, r1, #32
 800090c:	408b      	lsls	r3, r1
 800090e:	fa22 f706 	lsr.w	r7, r2, r6
 8000912:	431f      	orrs	r7, r3
 8000914:	fa20 fc06 	lsr.w	ip, r0, r6
 8000918:	fa04 f301 	lsl.w	r3, r4, r1
 800091c:	ea43 030c 	orr.w	r3, r3, ip
 8000920:	40f4      	lsrs	r4, r6
 8000922:	fa00 f801 	lsl.w	r8, r0, r1
 8000926:	0c38      	lsrs	r0, r7, #16
 8000928:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800092c:	fbb4 fef0 	udiv	lr, r4, r0
 8000930:	fa1f fc87 	uxth.w	ip, r7
 8000934:	fb00 441e 	mls	r4, r0, lr, r4
 8000938:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800093c:	fb0e f90c 	mul.w	r9, lr, ip
 8000940:	45a1      	cmp	r9, r4
 8000942:	fa02 f201 	lsl.w	r2, r2, r1
 8000946:	d90a      	bls.n	800095e <__udivmoddi4+0x1a6>
 8000948:	193c      	adds	r4, r7, r4
 800094a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800094e:	f080 8084 	bcs.w	8000a5a <__udivmoddi4+0x2a2>
 8000952:	45a1      	cmp	r9, r4
 8000954:	f240 8081 	bls.w	8000a5a <__udivmoddi4+0x2a2>
 8000958:	f1ae 0e02 	sub.w	lr, lr, #2
 800095c:	443c      	add	r4, r7
 800095e:	eba4 0409 	sub.w	r4, r4, r9
 8000962:	fa1f f983 	uxth.w	r9, r3
 8000966:	fbb4 f3f0 	udiv	r3, r4, r0
 800096a:	fb00 4413 	mls	r4, r0, r3, r4
 800096e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000972:	fb03 fc0c 	mul.w	ip, r3, ip
 8000976:	45a4      	cmp	ip, r4
 8000978:	d907      	bls.n	800098a <__udivmoddi4+0x1d2>
 800097a:	193c      	adds	r4, r7, r4
 800097c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000980:	d267      	bcs.n	8000a52 <__udivmoddi4+0x29a>
 8000982:	45a4      	cmp	ip, r4
 8000984:	d965      	bls.n	8000a52 <__udivmoddi4+0x29a>
 8000986:	3b02      	subs	r3, #2
 8000988:	443c      	add	r4, r7
 800098a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800098e:	fba0 9302 	umull	r9, r3, r0, r2
 8000992:	eba4 040c 	sub.w	r4, r4, ip
 8000996:	429c      	cmp	r4, r3
 8000998:	46ce      	mov	lr, r9
 800099a:	469c      	mov	ip, r3
 800099c:	d351      	bcc.n	8000a42 <__udivmoddi4+0x28a>
 800099e:	d04e      	beq.n	8000a3e <__udivmoddi4+0x286>
 80009a0:	b155      	cbz	r5, 80009b8 <__udivmoddi4+0x200>
 80009a2:	ebb8 030e 	subs.w	r3, r8, lr
 80009a6:	eb64 040c 	sbc.w	r4, r4, ip
 80009aa:	fa04 f606 	lsl.w	r6, r4, r6
 80009ae:	40cb      	lsrs	r3, r1
 80009b0:	431e      	orrs	r6, r3
 80009b2:	40cc      	lsrs	r4, r1
 80009b4:	e9c5 6400 	strd	r6, r4, [r5]
 80009b8:	2100      	movs	r1, #0
 80009ba:	e750      	b.n	800085e <__udivmoddi4+0xa6>
 80009bc:	f1c2 0320 	rsb	r3, r2, #32
 80009c0:	fa20 f103 	lsr.w	r1, r0, r3
 80009c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009c8:	fa24 f303 	lsr.w	r3, r4, r3
 80009cc:	4094      	lsls	r4, r2
 80009ce:	430c      	orrs	r4, r1
 80009d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009d4:	fa00 fe02 	lsl.w	lr, r0, r2
 80009d8:	fa1f f78c 	uxth.w	r7, ip
 80009dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80009e0:	fb08 3110 	mls	r1, r8, r0, r3
 80009e4:	0c23      	lsrs	r3, r4, #16
 80009e6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009ea:	fb00 f107 	mul.w	r1, r0, r7
 80009ee:	4299      	cmp	r1, r3
 80009f0:	d908      	bls.n	8000a04 <__udivmoddi4+0x24c>
 80009f2:	eb1c 0303 	adds.w	r3, ip, r3
 80009f6:	f100 36ff 	add.w	r6, r0, #4294967295
 80009fa:	d22c      	bcs.n	8000a56 <__udivmoddi4+0x29e>
 80009fc:	4299      	cmp	r1, r3
 80009fe:	d92a      	bls.n	8000a56 <__udivmoddi4+0x29e>
 8000a00:	3802      	subs	r0, #2
 8000a02:	4463      	add	r3, ip
 8000a04:	1a5b      	subs	r3, r3, r1
 8000a06:	b2a4      	uxth	r4, r4
 8000a08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000a10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a14:	fb01 f307 	mul.w	r3, r1, r7
 8000a18:	42a3      	cmp	r3, r4
 8000a1a:	d908      	bls.n	8000a2e <__udivmoddi4+0x276>
 8000a1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a24:	d213      	bcs.n	8000a4e <__udivmoddi4+0x296>
 8000a26:	42a3      	cmp	r3, r4
 8000a28:	d911      	bls.n	8000a4e <__udivmoddi4+0x296>
 8000a2a:	3902      	subs	r1, #2
 8000a2c:	4464      	add	r4, ip
 8000a2e:	1ae4      	subs	r4, r4, r3
 8000a30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a34:	e739      	b.n	80008aa <__udivmoddi4+0xf2>
 8000a36:	4604      	mov	r4, r0
 8000a38:	e6f0      	b.n	800081c <__udivmoddi4+0x64>
 8000a3a:	4608      	mov	r0, r1
 8000a3c:	e706      	b.n	800084c <__udivmoddi4+0x94>
 8000a3e:	45c8      	cmp	r8, r9
 8000a40:	d2ae      	bcs.n	80009a0 <__udivmoddi4+0x1e8>
 8000a42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a4a:	3801      	subs	r0, #1
 8000a4c:	e7a8      	b.n	80009a0 <__udivmoddi4+0x1e8>
 8000a4e:	4631      	mov	r1, r6
 8000a50:	e7ed      	b.n	8000a2e <__udivmoddi4+0x276>
 8000a52:	4603      	mov	r3, r0
 8000a54:	e799      	b.n	800098a <__udivmoddi4+0x1d2>
 8000a56:	4630      	mov	r0, r6
 8000a58:	e7d4      	b.n	8000a04 <__udivmoddi4+0x24c>
 8000a5a:	46d6      	mov	lr, sl
 8000a5c:	e77f      	b.n	800095e <__udivmoddi4+0x1a6>
 8000a5e:	4463      	add	r3, ip
 8000a60:	3802      	subs	r0, #2
 8000a62:	e74d      	b.n	8000900 <__udivmoddi4+0x148>
 8000a64:	4606      	mov	r6, r0
 8000a66:	4623      	mov	r3, r4
 8000a68:	4608      	mov	r0, r1
 8000a6a:	e70f      	b.n	800088c <__udivmoddi4+0xd4>
 8000a6c:	3e02      	subs	r6, #2
 8000a6e:	4463      	add	r3, ip
 8000a70:	e730      	b.n	80008d4 <__udivmoddi4+0x11c>
 8000a72:	bf00      	nop

08000a74 <__aeabi_idiv0>:
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <DWT_Delay_Init>:
uint16_t SUM; uint8_t Presence = 0;

#include "DHT.h"

uint32_t DWT_Delay_Init(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
	
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000a7c:	4b14      	ldr	r3, [pc, #80]	@ (8000ad0 <DWT_Delay_Init+0x58>)
 8000a7e:	68db      	ldr	r3, [r3, #12]
 8000a80:	4a13      	ldr	r2, [pc, #76]	@ (8000ad0 <DWT_Delay_Init+0x58>)
 8000a82:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000a86:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000a88:	4b11      	ldr	r3, [pc, #68]	@ (8000ad0 <DWT_Delay_Init+0x58>)
 8000a8a:	68db      	ldr	r3, [r3, #12]
 8000a8c:	4a10      	ldr	r2, [pc, #64]	@ (8000ad0 <DWT_Delay_Init+0x58>)
 8000a8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000a92:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000a94:	4b0f      	ldr	r3, [pc, #60]	@ (8000ad4 <DWT_Delay_Init+0x5c>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a0e      	ldr	r2, [pc, #56]	@ (8000ad4 <DWT_Delay_Init+0x5c>)
 8000a9a:	f023 0301 	bic.w	r3, r3, #1
 8000a9e:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000aa0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad4 <DWT_Delay_Init+0x5c>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a0b      	ldr	r2, [pc, #44]	@ (8000ad4 <DWT_Delay_Init+0x5c>)
 8000aa6:	f043 0301 	orr.w	r3, r3, #1
 8000aaa:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000aac:	4b09      	ldr	r3, [pc, #36]	@ (8000ad4 <DWT_Delay_Init+0x5c>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8000ab2:	bf00      	nop
     __ASM volatile ("NOP");
 8000ab4:	bf00      	nop
 __ASM volatile ("NOP");
 8000ab6:	bf00      	nop

  /* Check if clock cycle counter has started */
	
			 if(DWT->CYCCNT)
 8000ab8:	4b06      	ldr	r3, [pc, #24]	@ (8000ad4 <DWT_Delay_Init+0x5c>)
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <DWT_Delay_Init+0x4c>
				 {
					 return 0; /*clock cycle counter started*/
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	e000      	b.n	8000ac6 <DWT_Delay_Init+0x4e>
				 }
			 else
				{
					return 1; /*clock cycle counter not started*/
 8000ac4:	2301      	movs	r3, #1
				}
				

		
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr
 8000ad0:	e000edf0 	.word	0xe000edf0
 8000ad4:	e0001000 	.word	0xe0001000

08000ad8 <delay>:

 void delay(volatile uint32_t microseconds)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8000ae0:	4b0d      	ldr	r3, [pc, #52]	@ (8000b18 <delay+0x40>)
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	60fb      	str	r3, [r7, #12]
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000ae6:	f004 f889 	bl	8004bfc <HAL_RCC_GetHCLKFreq>
 8000aea:	4603      	mov	r3, r0
 8000aec:	4a0b      	ldr	r2, [pc, #44]	@ (8000b1c <delay+0x44>)
 8000aee:	fba2 2303 	umull	r2, r3, r2, r3
 8000af2:	0c9b      	lsrs	r3, r3, #18
 8000af4:	687a      	ldr	r2, [r7, #4]
 8000af6:	fb02 f303 	mul.w	r3, r2, r3
 8000afa:	607b      	str	r3, [r7, #4]
	 while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8000afc:	bf00      	nop
 8000afe:	4b06      	ldr	r3, [pc, #24]	@ (8000b18 <delay+0x40>)
 8000b00:	685a      	ldr	r2, [r3, #4]
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	1ad2      	subs	r2, r2, r3
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	d3f8      	bcc.n	8000afe <delay+0x26>
}
 8000b0c:	bf00      	nop
 8000b0e:	bf00      	nop
 8000b10:	3710      	adds	r7, #16
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	e0001000 	.word	0xe0001000
 8000b1c:	431bde83 	.word	0x431bde83

08000b20 <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b088      	sub	sp, #32
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
 8000b28:	460b      	mov	r3, r1
 8000b2a:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2c:	f107 030c 	add.w	r3, r7, #12
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	605a      	str	r2, [r3, #4]
 8000b36:	609a      	str	r2, [r3, #8]
 8000b38:	60da      	str	r2, [r3, #12]
 8000b3a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000b3c:	887b      	ldrh	r3, [r7, #2]
 8000b3e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b40:	2301      	movs	r3, #1
 8000b42:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b44:	2300      	movs	r3, #0
 8000b46:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000b48:	f107 030c 	add.w	r3, r7, #12
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	6878      	ldr	r0, [r7, #4]
 8000b50:	f002 feb6 	bl	80038c0 <HAL_GPIO_Init>
}
 8000b54:	bf00      	nop
 8000b56:	3720      	adds	r7, #32
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b088      	sub	sp, #32
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
 8000b64:	460b      	mov	r3, r1
 8000b66:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b68:	f107 030c 	add.w	r3, r7, #12
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000b78:	887b      	ldrh	r3, [r7, #2]
 8000b7a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000b84:	f107 030c 	add.w	r3, r7, #12
 8000b88:	4619      	mov	r1, r3
 8000b8a:	6878      	ldr	r0, [r7, #4]
 8000b8c:	f002 fe98 	bl	80038c0 <HAL_GPIO_Init>
}
 8000b90:	bf00      	nop
 8000b92:	3720      	adds	r7, #32
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <DHT_Start>:


void DHT_Start (void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
	DWT_Delay_Init();
 8000b9c:	f7ff ff6c 	bl	8000a78 <DWT_Delay_Init>
	Set_Pin_Output (DHT_PORT, DHT_PIN);  // set the pin as output
 8000ba0:	2180      	movs	r1, #128	@ 0x80
 8000ba2:	480d      	ldr	r0, [pc, #52]	@ (8000bd8 <DHT_Start+0x40>)
 8000ba4:	f7ff ffbc 	bl	8000b20 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, GPIO_PIN_RESET);   // pull the pin low
 8000ba8:	2200      	movs	r2, #0
 8000baa:	2180      	movs	r1, #128	@ 0x80
 8000bac:	480a      	ldr	r0, [pc, #40]	@ (8000bd8 <DHT_Start+0x40>)
 8000bae:	f003 f84f 	bl	8003c50 <HAL_GPIO_WritePin>

#if defined(TYPE_DHT11)
	delay (18000);   // wait for 18ms
 8000bb2:	f244 6050 	movw	r0, #18000	@ 0x4650
 8000bb6:	f7ff ff8f 	bl	8000ad8 <delay>

#if defined(TYPE_DHT22)
	delay (1200);  // >1ms delay
#endif

    HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, GPIO_PIN_SET);   // pull the pin high
 8000bba:	2201      	movs	r2, #1
 8000bbc:	2180      	movs	r1, #128	@ 0x80
 8000bbe:	4806      	ldr	r0, [pc, #24]	@ (8000bd8 <DHT_Start+0x40>)
 8000bc0:	f003 f846 	bl	8003c50 <HAL_GPIO_WritePin>
    delay(30);   // wait for 30us
 8000bc4:	201e      	movs	r0, #30
 8000bc6:	f7ff ff87 	bl	8000ad8 <delay>
	Set_Pin_Input(DHT_PORT, DHT_PIN);    // set as input
 8000bca:	2180      	movs	r1, #128	@ 0x80
 8000bcc:	4802      	ldr	r0, [pc, #8]	@ (8000bd8 <DHT_Start+0x40>)
 8000bce:	f7ff ffc5 	bl	8000b5c <Set_Pin_Input>
}
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	58020400 	.word	0x58020400

08000bdc <DHT_Check_Response>:

uint8_t DHT_Check_Response (void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8000be2:	2300      	movs	r3, #0
 8000be4:	71fb      	strb	r3, [r7, #7]
	delay (50);
 8000be6:	2032      	movs	r0, #50	@ 0x32
 8000be8:	f7ff ff76 	bl	8000ad8 <delay>
	if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))
 8000bec:	2180      	movs	r1, #128	@ 0x80
 8000bee:	4811      	ldr	r0, [pc, #68]	@ (8000c34 <DHT_Check_Response+0x58>)
 8000bf0:	f003 f816 	bl	8003c20 <HAL_GPIO_ReadPin>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d10e      	bne.n	8000c18 <DHT_Check_Response+0x3c>
	{
		delay (100);
 8000bfa:	2064      	movs	r0, #100	@ 0x64
 8000bfc:	f7ff ff6c 	bl	8000ad8 <delay>
		if ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))) 
 8000c00:	2180      	movs	r1, #128	@ 0x80
 8000c02:	480c      	ldr	r0, [pc, #48]	@ (8000c34 <DHT_Check_Response+0x58>)
 8000c04:	f003 f80c 	bl	8003c20 <HAL_GPIO_ReadPin>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d002      	beq.n	8000c14 <DHT_Check_Response+0x38>
		{
			Response = 1;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	71fb      	strb	r3, [r7, #7]
 8000c12:	e001      	b.n	8000c18 <DHT_Check_Response+0x3c>
		}
		else 
		{
			Response = -1;
 8000c14:	23ff      	movs	r3, #255	@ 0xff
 8000c16:	71fb      	strb	r3, [r7, #7]
		}
	}
	while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go low
 8000c18:	bf00      	nop
 8000c1a:	2180      	movs	r1, #128	@ 0x80
 8000c1c:	4805      	ldr	r0, [pc, #20]	@ (8000c34 <DHT_Check_Response+0x58>)
 8000c1e:	f002 ffff 	bl	8003c20 <HAL_GPIO_ReadPin>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d1f8      	bne.n	8000c1a <DHT_Check_Response+0x3e>

	return Response;
 8000c28:	79fb      	ldrb	r3, [r7, #7]
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	58020400 	.word	0x58020400

08000c38 <DHT_Read>:

uint8_t DHT_Read (void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 8000c3e:	2300      	movs	r3, #0
 8000c40:	71bb      	strb	r3, [r7, #6]
 8000c42:	e037      	b.n	8000cb4 <DHT_Read+0x7c>
	{
		while (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go high
 8000c44:	bf00      	nop
 8000c46:	2180      	movs	r1, #128	@ 0x80
 8000c48:	481e      	ldr	r0, [pc, #120]	@ (8000cc4 <DHT_Read+0x8c>)
 8000c4a:	f002 ffe9 	bl	8003c20 <HAL_GPIO_ReadPin>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d0f8      	beq.n	8000c46 <DHT_Read+0xe>
		delay (50);   // wait for 40 us
 8000c54:	2032      	movs	r0, #50	@ 0x32
 8000c56:	f7ff ff3f 	bl	8000ad8 <delay>
		if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))   // if the pin is low
 8000c5a:	2180      	movs	r1, #128	@ 0x80
 8000c5c:	4819      	ldr	r0, [pc, #100]	@ (8000cc4 <DHT_Read+0x8c>)
 8000c5e:	f002 ffdf 	bl	8003c20 <HAL_GPIO_ReadPin>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d10e      	bne.n	8000c86 <DHT_Read+0x4e>
		{
			i&= ~(1<<(7-j));   // write 0
 8000c68:	79bb      	ldrb	r3, [r7, #6]
 8000c6a:	f1c3 0307 	rsb	r3, r3, #7
 8000c6e:	2201      	movs	r2, #1
 8000c70:	fa02 f303 	lsl.w	r3, r2, r3
 8000c74:	b25b      	sxtb	r3, r3
 8000c76:	43db      	mvns	r3, r3
 8000c78:	b25a      	sxtb	r2, r3
 8000c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7e:	4013      	ands	r3, r2
 8000c80:	b25b      	sxtb	r3, r3
 8000c82:	71fb      	strb	r3, [r7, #7]
 8000c84:	e00b      	b.n	8000c9e <DHT_Read+0x66>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8000c86:	79bb      	ldrb	r3, [r7, #6]
 8000c88:	f1c3 0307 	rsb	r3, r3, #7
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c92:	b25a      	sxtb	r2, r3
 8000c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c98:	4313      	orrs	r3, r2
 8000c9a:	b25b      	sxtb	r3, r3
 8000c9c:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));  // wait for the pin to go low
 8000c9e:	bf00      	nop
 8000ca0:	2180      	movs	r1, #128	@ 0x80
 8000ca2:	4808      	ldr	r0, [pc, #32]	@ (8000cc4 <DHT_Read+0x8c>)
 8000ca4:	f002 ffbc 	bl	8003c20 <HAL_GPIO_ReadPin>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d1f8      	bne.n	8000ca0 <DHT_Read+0x68>
	for (j=0;j<8;j++)
 8000cae:	79bb      	ldrb	r3, [r7, #6]
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	71bb      	strb	r3, [r7, #6]
 8000cb4:	79bb      	ldrb	r3, [r7, #6]
 8000cb6:	2b07      	cmp	r3, #7
 8000cb8:	d9c4      	bls.n	8000c44 <DHT_Read+0xc>
	}
	return i;
 8000cba:	79fb      	ldrb	r3, [r7, #7]
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3708      	adds	r7, #8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	58020400 	.word	0x58020400

08000cc8 <DHT_GetData>:



void DHT_GetData (DHT_DataTypedef *DHT_Data)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  DHT_Start ();
 8000cd0:	f7ff ff62 	bl	8000b98 <DHT_Start>
	Presence = DHT_Check_Response ();
 8000cd4:	f7ff ff82 	bl	8000bdc <DHT_Check_Response>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	461a      	mov	r2, r3
 8000cdc:	4b23      	ldr	r3, [pc, #140]	@ (8000d6c <DHT_GetData+0xa4>)
 8000cde:	701a      	strb	r2, [r3, #0]
	Rh_byte1 = DHT_Read ();
 8000ce0:	f7ff ffaa 	bl	8000c38 <DHT_Read>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	4b21      	ldr	r3, [pc, #132]	@ (8000d70 <DHT_GetData+0xa8>)
 8000cea:	701a      	strb	r2, [r3, #0]
	Rh_byte2 = DHT_Read ();
 8000cec:	f7ff ffa4 	bl	8000c38 <DHT_Read>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	4b1f      	ldr	r3, [pc, #124]	@ (8000d74 <DHT_GetData+0xac>)
 8000cf6:	701a      	strb	r2, [r3, #0]
	Temp_byte1 = DHT_Read ();
 8000cf8:	f7ff ff9e 	bl	8000c38 <DHT_Read>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	461a      	mov	r2, r3
 8000d00:	4b1d      	ldr	r3, [pc, #116]	@ (8000d78 <DHT_GetData+0xb0>)
 8000d02:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DHT_Read ();
 8000d04:	f7ff ff98 	bl	8000c38 <DHT_Read>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	4b1b      	ldr	r3, [pc, #108]	@ (8000d7c <DHT_GetData+0xb4>)
 8000d0e:	701a      	strb	r2, [r3, #0]

	
	SUM = DHT_Read();
 8000d10:	f7ff ff92 	bl	8000c38 <DHT_Read>
 8000d14:	4603      	mov	r3, r0
 8000d16:	461a      	mov	r2, r3
 8000d18:	4b19      	ldr	r3, [pc, #100]	@ (8000d80 <DHT_GetData+0xb8>)
 8000d1a:	801a      	strh	r2, [r3, #0]
	if (SUM == (Rh_byte1+Rh_byte2+Temp_byte1+Temp_byte2))
 8000d1c:	4b18      	ldr	r3, [pc, #96]	@ (8000d80 <DHT_GetData+0xb8>)
 8000d1e:	881b      	ldrh	r3, [r3, #0]
 8000d20:	4619      	mov	r1, r3
 8000d22:	4b13      	ldr	r3, [pc, #76]	@ (8000d70 <DHT_GetData+0xa8>)
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	461a      	mov	r2, r3
 8000d28:	4b12      	ldr	r3, [pc, #72]	@ (8000d74 <DHT_GetData+0xac>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	4a12      	ldr	r2, [pc, #72]	@ (8000d78 <DHT_GetData+0xb0>)
 8000d30:	7812      	ldrb	r2, [r2, #0]
 8000d32:	4413      	add	r3, r2
 8000d34:	4a11      	ldr	r2, [pc, #68]	@ (8000d7c <DHT_GetData+0xb4>)
 8000d36:	7812      	ldrb	r2, [r2, #0]
 8000d38:	4413      	add	r3, r2
 8000d3a:	4299      	cmp	r1, r3
 8000d3c:	d111      	bne.n	8000d62 <DHT_GetData+0x9a>
	{
		#if defined(TYPE_DHT11)
			DHT_Data->Temperature = Temp_byte1;
 8000d3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d78 <DHT_GetData+0xb0>)
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	ee07 3a90 	vmov	s15, r3
 8000d46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	edc3 7a00 	vstr	s15, [r3]
			DHT_Data->Humidity = Rh_byte1;
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <DHT_GetData+0xa8>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	ee07 3a90 	vmov	s15, r3
 8000d58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	edc3 7a01 	vstr	s15, [r3, #4]
			DHT_Data->Humidity = ((Rh_byte1<<8)|Rh_byte2);
		#endif
	}
	
	
}
 8000d62:	bf00      	nop
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	240001fa 	.word	0x240001fa
 8000d70:	240001f4 	.word	0x240001f4
 8000d74:	240001f5 	.word	0x240001f5
 8000d78:	240001f6 	.word	0x240001f6
 8000d7c:	240001f7 	.word	0x240001f7
 8000d80:	240001f8 	.word	0x240001f8

08000d84 <main>:
void ESP01_Init(void);
void ESP01_SendATCommands(float temperature, float humidity, float soilHumidity, float luminosity, int lamp_stat, int pump_stat);
void ESP01_Update_Values_Receive(int *lamp_stat, int *pump_stat);
void extractDataFromResponse(char *response, int *lamp_stat, int *pump_stat);

int main(void) {
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b086      	sub	sp, #24
 8000d88:	af00      	add	r7, sp, #0
    float temperature, humidity, soilHumidity, luminosity;
    int lamp_stat = 0;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	617b      	str	r3, [r7, #20]
    int pump_stat = 0;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	613b      	str	r3, [r7, #16]
    HAL_Init();
 8000d92:	f001 f873 	bl	8001e7c <HAL_Init>
    SystemClock_Config();
 8000d96:	f000 f9c5 	bl	8001124 <SystemClock_Config>
    PeriphCommonClock_Config();
 8000d9a:	f000 fa37 	bl	800120c <PeriphCommonClock_Config>
    MX_GPIO_Init();
 8000d9e:	f000 fc5d 	bl	800165c <MX_GPIO_Init>
    MX_ADC1_Init();
 8000da2:	f000 fa63 	bl	800126c <MX_ADC1_Init>
    MX_USART1_UART_Init();
 8000da6:	f000 fb75 	bl	8001494 <MX_USART1_UART_Init>
    MX_USART2_UART_Init();
 8000daa:	f000 fbbf 	bl	800152c <MX_USART2_UART_Init>
    MX_TIM6_Init();
 8000dae:	f000 fb3b 	bl	8001428 <MX_TIM6_Init>
    MX_USART3_UART_Init();
 8000db2:	f000 fc07 	bl	80015c4 <MX_USART3_UART_Init>
    MX_ADC2_Init();
 8000db6:	f000 fad1 	bl	800135c <MX_ADC2_Init>

    DHT_Init();
 8000dba:	f000 f86d 	bl	8000e98 <DHT_Init>
    ESP01_Init();
 8000dbe:	f000 f8e1 	bl	8000f84 <ESP01_Init>

    while (1) {
    	//ESP01_Update_Values_Receive(&lamp_stat_b, &pump_stat_b);
        Read_DataDHT(&temperature, &humidity);
 8000dc2:	463a      	mov	r2, r7
 8000dc4:	1d3b      	adds	r3, r7, #4
 8000dc6:	4611      	mov	r1, r2
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f000 f86d 	bl	8000ea8 <Read_DataDHT>
        soilHumidity = Read_Soil_Humidity();
 8000dce:	f000 f881 	bl	8000ed4 <Read_Soil_Humidity>
 8000dd2:	ed87 0a03 	vstr	s0, [r7, #12]
        luminosity = Read_Soil_Luminosity();
 8000dd6:	f000 f8a9 	bl	8000f2c <Read_Soil_Luminosity>
 8000dda:	ed87 0a02 	vstr	s0, [r7, #8]

        lamp_stat = (luminosity < 100) ? 1 : 0;
 8000dde:	edd7 7a02 	vldr	s15, [r7, #8]
 8000de2:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8000e68 <main+0xe4>
 8000de6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000dea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dee:	bf4c      	ite	mi
 8000df0:	2301      	movmi	r3, #1
 8000df2:	2300      	movpl	r3, #0
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	617b      	str	r3, [r7, #20]
        pump_stat = (soilHumidity < 30) ? 1 : 0;
 8000df8:	edd7 7a03 	vldr	s15, [r7, #12]
 8000dfc:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8000e00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e08:	bf4c      	ite	mi
 8000e0a:	2301      	movmi	r3, #1
 8000e0c:	2300      	movpl	r3, #0
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	613b      	str	r3, [r7, #16]
        HAL_GPIO_WritePin(GPIOE, Pump_Pin, !pump_stat);//Activee au niveau bas
 8000e12:	693b      	ldr	r3, [r7, #16]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	bf0c      	ite	eq
 8000e18:	2301      	moveq	r3, #1
 8000e1a:	2300      	movne	r3, #0
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	461a      	mov	r2, r3
 8000e20:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e24:	4811      	ldr	r0, [pc, #68]	@ (8000e6c <main+0xe8>)
 8000e26:	f002 ff13 	bl	8003c50 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOE, Lamp_Pin, !lamp_stat); //Activee au niveau bas
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	bf0c      	ite	eq
 8000e30:	2301      	moveq	r3, #1
 8000e32:	2300      	movne	r3, #0
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	461a      	mov	r2, r3
 8000e38:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e3c:	480b      	ldr	r0, [pc, #44]	@ (8000e6c <main+0xe8>)
 8000e3e:	f002 ff07 	bl	8003c50 <HAL_GPIO_WritePin>
        ESP01_SendATCommands(temperature, humidity, soilHumidity, luminosity, lamp_stat, pump_stat);
 8000e42:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e46:	ed97 7a00 	vldr	s14, [r7]
 8000e4a:	6939      	ldr	r1, [r7, #16]
 8000e4c:	6978      	ldr	r0, [r7, #20]
 8000e4e:	edd7 1a02 	vldr	s3, [r7, #8]
 8000e52:	ed97 1a03 	vldr	s2, [r7, #12]
 8000e56:	eef0 0a47 	vmov.f32	s1, s14
 8000e5a:	eeb0 0a67 	vmov.f32	s0, s15
 8000e5e:	f000 f8cd 	bl	8000ffc <ESP01_SendATCommands>
        Read_DataDHT(&temperature, &humidity);
 8000e62:	bf00      	nop
 8000e64:	e7ad      	b.n	8000dc2 <main+0x3e>
 8000e66:	bf00      	nop
 8000e68:	42c80000 	.word	0x42c80000
 8000e6c:	58021000 	.word	0x58021000

08000e70 <UART_SendString>:
    }
}

void UART_SendString(UART_HandleTypeDef *huart, const char *str) {
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	6039      	str	r1, [r7, #0]
    HAL_UART_Transmit(huart, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8000e7a:	6838      	ldr	r0, [r7, #0]
 8000e7c:	f7ff fa88 	bl	8000390 <strlen>
 8000e80:	4603      	mov	r3, r0
 8000e82:	b29a      	uxth	r2, r3
 8000e84:	f04f 33ff 	mov.w	r3, #4294967295
 8000e88:	6839      	ldr	r1, [r7, #0]
 8000e8a:	6878      	ldr	r0, [r7, #4]
 8000e8c:	f006 fcf8 	bl	8007880 <HAL_UART_Transmit>
}
 8000e90:	bf00      	nop
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <DHT_Init>:
    UART_SendString(&huart3, message);
    UART_SendString(&huart3, "\r\n");
}


void DHT_Init(void) {
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
    // Add initialization code for DHT sensor if needed
}
 8000e9c:	bf00      	nop
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
	...

08000ea8 <Read_DataDHT>:

void Read_DataDHT(float *temperature, float *humidity) {
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	6039      	str	r1, [r7, #0]
    DHT_GetData(&DHT11_Data);
 8000eb2:	4807      	ldr	r0, [pc, #28]	@ (8000ed0 <Read_DataDHT+0x28>)
 8000eb4:	f7ff ff08 	bl	8000cc8 <DHT_GetData>
    *temperature = DHT11_Data.Temperature;
 8000eb8:	4b05      	ldr	r3, [pc, #20]	@ (8000ed0 <Read_DataDHT+0x28>)
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	601a      	str	r2, [r3, #0]
    *humidity = DHT11_Data.Humidity;
 8000ec0:	4b03      	ldr	r3, [pc, #12]	@ (8000ed0 <Read_DataDHT+0x28>)
 8000ec2:	685a      	ldr	r2, [r3, #4]
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	601a      	str	r2, [r3, #0]
}
 8000ec8:	bf00      	nop
 8000eca:	3708      	adds	r7, #8
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	240004cc 	.word	0x240004cc

08000ed4 <Read_Soil_Humidity>:

float Read_Soil_Humidity(void) {
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
    HAL_ADC_Start(&hadc1);
 8000eda:	4811      	ldr	r0, [pc, #68]	@ (8000f20 <Read_Soil_Humidity+0x4c>)
 8000edc:	f001 fc26 	bl	800272c <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 20);
 8000ee0:	2114      	movs	r1, #20
 8000ee2:	480f      	ldr	r0, [pc, #60]	@ (8000f20 <Read_Soil_Humidity+0x4c>)
 8000ee4:	f001 fd10 	bl	8002908 <HAL_ADC_PollForConversion>
    uint32_t adcValue = HAL_ADC_GetValue(&hadc1);
 8000ee8:	480d      	ldr	r0, [pc, #52]	@ (8000f20 <Read_Soil_Humidity+0x4c>)
 8000eea:	f001 fde5 	bl	8002ab8 <HAL_ADC_GetValue>
 8000eee:	6078      	str	r0, [r7, #4]
    HAL_ADC_Stop(&hadc1);
 8000ef0:	480b      	ldr	r0, [pc, #44]	@ (8000f20 <Read_Soil_Humidity+0x4c>)
 8000ef2:	f001 fcd5 	bl	80028a0 <HAL_ADC_Stop>
    return ((float)(65535 - adcValue) / 43535) * 100.0;
 8000ef6:	687a      	ldr	r2, [r7, #4]
 8000ef8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000efc:	1a9b      	subs	r3, r3, r2
 8000efe:	ee07 3a90 	vmov	s15, r3
 8000f02:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f06:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8000f24 <Read_Soil_Humidity+0x50>
 8000f0a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f0e:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8000f28 <Read_Soil_Humidity+0x54>
 8000f12:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000f16:	eeb0 0a67 	vmov.f32	s0, s15
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	240001fc 	.word	0x240001fc
 8000f24:	472a0f00 	.word	0x472a0f00
 8000f28:	42c80000 	.word	0x42c80000

08000f2c <Read_Soil_Luminosity>:

float Read_Soil_Luminosity(void) {
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
    HAL_ADC_Start(&hadc2);
 8000f32:	4811      	ldr	r0, [pc, #68]	@ (8000f78 <Read_Soil_Luminosity+0x4c>)
 8000f34:	f001 fbfa 	bl	800272c <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc2, 20);
 8000f38:	2114      	movs	r1, #20
 8000f3a:	480f      	ldr	r0, [pc, #60]	@ (8000f78 <Read_Soil_Luminosity+0x4c>)
 8000f3c:	f001 fce4 	bl	8002908 <HAL_ADC_PollForConversion>
    uint32_t adcValue = HAL_ADC_GetValue(&hadc2);
 8000f40:	480d      	ldr	r0, [pc, #52]	@ (8000f78 <Read_Soil_Luminosity+0x4c>)
 8000f42:	f001 fdb9 	bl	8002ab8 <HAL_ADC_GetValue>
 8000f46:	6078      	str	r0, [r7, #4]
    HAL_ADC_Stop(&hadc2);
 8000f48:	480b      	ldr	r0, [pc, #44]	@ (8000f78 <Read_Soil_Luminosity+0x4c>)
 8000f4a:	f001 fca9 	bl	80028a0 <HAL_ADC_Stop>
    return ((float)(65535 - adcValue) / 43535) * 100.0;
 8000f4e:	687a      	ldr	r2, [r7, #4]
 8000f50:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000f54:	1a9b      	subs	r3, r3, r2
 8000f56:	ee07 3a90 	vmov	s15, r3
 8000f5a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f5e:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8000f7c <Read_Soil_Luminosity+0x50>
 8000f62:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f66:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8000f80 <Read_Soil_Luminosity+0x54>
 8000f6a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000f6e:	eeb0 0a67 	vmov.f32	s0, s15
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	24000260 	.word	0x24000260
 8000f7c:	472a0f00 	.word	0x472a0f00
 8000f80:	42c80000 	.word	0x42c80000

08000f84 <ESP01_Init>:

void ESP01_Init(void) {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
    const char* commands[] = {
 8000f8a:	4a19      	ldr	r2, [pc, #100]	@ (8000ff0 <ESP01_Init+0x6c>)
 8000f8c:	463b      	mov	r3, r7
 8000f8e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f90:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        "AT+CWMODE=1\r\n",
        "AT+CWJAP=\"D2F3794\",\"malek123\"\r\n",
        "AT+CIPMUX=0\r\n"
    };
    for (int i = 0; i < sizeof(commands) / sizeof(commands[0]); ++i) {
 8000f94:	2300      	movs	r3, #0
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	e021      	b.n	8000fde <ESP01_Init+0x5a>
        UART_SendString(&huart2, commands[i]);
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	3310      	adds	r3, #16
 8000fa0:	443b      	add	r3, r7
 8000fa2:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4812      	ldr	r0, [pc, #72]	@ (8000ff4 <ESP01_Init+0x70>)
 8000faa:	f7ff ff61 	bl	8000e70 <UART_SendString>
        UART_SendString(&huart3, commands[i]);
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	3310      	adds	r3, #16
 8000fb4:	443b      	add	r3, r7
 8000fb6:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000fba:	4619      	mov	r1, r3
 8000fbc:	480e      	ldr	r0, [pc, #56]	@ (8000ff8 <ESP01_Init+0x74>)
 8000fbe:	f7ff ff57 	bl	8000e70 <UART_SendString>
        HAL_Delay((i == 1) ? 5000 : 1000);
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d102      	bne.n	8000fce <ESP01_Init+0x4a>
 8000fc8:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000fcc:	e001      	b.n	8000fd2 <ESP01_Init+0x4e>
 8000fce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f000 ffe4 	bl	8001fa0 <HAL_Delay>
    for (int i = 0; i < sizeof(commands) / sizeof(commands[0]); ++i) {
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	3301      	adds	r3, #1
 8000fdc:	60fb      	str	r3, [r7, #12]
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	2b02      	cmp	r3, #2
 8000fe2:	d9da      	bls.n	8000f9a <ESP01_Init+0x16>
    }
}
 8000fe4:	bf00      	nop
 8000fe6:	bf00      	nop
 8000fe8:	3710      	adds	r7, #16
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	0800d2c0 	.word	0x0800d2c0
 8000ff4:	240003a4 	.word	0x240003a4
 8000ff8:	24000438 	.word	0x24000438

08000ffc <ESP01_SendATCommands>:

void ESP01_SendATCommands(float temperature, float humidity, float soilHumidity, float luminosity, int lamp_stat, int pump_stat) {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b0d0      	sub	sp, #320	@ 0x140
 8001000:	af0a      	add	r7, sp, #40	@ 0x28
 8001002:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001006:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800100a:	ed83 0a00 	vstr	s0, [r3]
 800100e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001012:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001016:	edc3 0a00 	vstr	s1, [r3]
 800101a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800101e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001022:	ed83 1a00 	vstr	s2, [r3]
 8001026:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800102a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800102e:	edc3 1a00 	vstr	s3, [r3]
 8001032:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001036:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800103a:	6018      	str	r0, [r3, #0]
 800103c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001040:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001044:	6019      	str	r1, [r3, #0]
    char cmd[256];

    // Start TCP connection
    UART_SendString(&huart2, "AT+CIPSTART=\"TCP\",\"api.thingspeak.com\",80\r\n");
 8001046:	4932      	ldr	r1, [pc, #200]	@ (8001110 <ESP01_SendATCommands+0x114>)
 8001048:	4832      	ldr	r0, [pc, #200]	@ (8001114 <ESP01_SendATCommands+0x118>)
 800104a:	f7ff ff11 	bl	8000e70 <UART_SendString>
    UART_SendString(&huart3, "AT+CIPSTART=\"TCP\",\"api.thingspeak.com\",80\r\n");
 800104e:	4930      	ldr	r1, [pc, #192]	@ (8001110 <ESP01_SendATCommands+0x114>)
 8001050:	4831      	ldr	r0, [pc, #196]	@ (8001118 <ESP01_SendATCommands+0x11c>)
 8001052:	f7ff ff0d 	bl	8000e70 <UART_SendString>
    HAL_Delay(250);
 8001056:	20fa      	movs	r0, #250	@ 0xfa
 8001058:	f000 ffa2 	bl	8001fa0 <HAL_Delay>

    // Prepare to send the sensor data
    UART_SendString(&huart2, "AT+CIPSEND=150\r\n");
 800105c:	492f      	ldr	r1, [pc, #188]	@ (800111c <ESP01_SendATCommands+0x120>)
 800105e:	482d      	ldr	r0, [pc, #180]	@ (8001114 <ESP01_SendATCommands+0x118>)
 8001060:	f7ff ff06 	bl	8000e70 <UART_SendString>
    UART_SendString(&huart3, "AT+CIPSEND=150\r\n");
 8001064:	492d      	ldr	r1, [pc, #180]	@ (800111c <ESP01_SendATCommands+0x120>)
 8001066:	482c      	ldr	r0, [pc, #176]	@ (8001118 <ESP01_SendATCommands+0x11c>)
 8001068:	f7ff ff02 	bl	8000e70 <UART_SendString>
    HAL_Delay(250);
 800106c:	20fa      	movs	r0, #250	@ 0xfa
 800106e:	f000 ff97 	bl	8001fa0 <HAL_Delay>

    snprintf(cmd, sizeof(cmd),
 8001072:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001076:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800107a:	edd3 7a00 	vldr	s15, [r3]
 800107e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001082:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001086:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800108a:	edd3 6a00 	vldr	s13, [r3]
 800108e:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8001092:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001096:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800109a:	edd3 5a00 	vldr	s11, [r3]
 800109e:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 80010a2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80010a6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80010aa:	edd3 4a00 	vldr	s9, [r3]
 80010ae:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
 80010b2:	f107 0018 	add.w	r0, r7, #24
 80010b6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80010ba:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80010c2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80010c6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	9308      	str	r3, [sp, #32]
 80010ce:	ed8d 4b06 	vstr	d4, [sp, #24]
 80010d2:	ed8d 5b04 	vstr	d5, [sp, #16]
 80010d6:	ed8d 6b02 	vstr	d6, [sp, #8]
 80010da:	ed8d 7b00 	vstr	d7, [sp]
 80010de:	4a10      	ldr	r2, [pc, #64]	@ (8001120 <ESP01_SendATCommands+0x124>)
 80010e0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010e4:	f008 fcee 	bl	8009ac4 <sniprintf>
        "GET https://api.thingspeak.com/update?api_key=5QWLEBMD4I1BHKEA&field1=%.2f&field2=%.2f&field3=%.2f&field4=%.2f&field5=%d&field6=%d\r\n",
        temperature, humidity, soilHumidity, luminosity, lamp_stat, pump_stat);

    // Send the data
    UART_SendString(&huart2, cmd);
 80010e8:	f107 0318 	add.w	r3, r7, #24
 80010ec:	4619      	mov	r1, r3
 80010ee:	4809      	ldr	r0, [pc, #36]	@ (8001114 <ESP01_SendATCommands+0x118>)
 80010f0:	f7ff febe 	bl	8000e70 <UART_SendString>
    UART_SendString(&huart3, cmd);
 80010f4:	f107 0318 	add.w	r3, r7, #24
 80010f8:	4619      	mov	r1, r3
 80010fa:	4807      	ldr	r0, [pc, #28]	@ (8001118 <ESP01_SendATCommands+0x11c>)
 80010fc:	f7ff feb8 	bl	8000e70 <UART_SendString>
    HAL_Delay(250);
 8001100:	20fa      	movs	r0, #250	@ 0xfa
 8001102:	f000 ff4d 	bl	8001fa0 <HAL_Delay>
}
 8001106:	bf00      	nop
 8001108:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	0800d2cc 	.word	0x0800d2cc
 8001114:	240003a4 	.word	0x240003a4
 8001118:	24000438 	.word	0x24000438
 800111c:	0800d2f8 	.word	0x0800d2f8
 8001120:	0800d30c 	.word	0x0800d30c

08001124 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b09c      	sub	sp, #112	@ 0x70
 8001128:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800112a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800112e:	224c      	movs	r2, #76	@ 0x4c
 8001130:	2100      	movs	r1, #0
 8001132:	4618      	mov	r0, r3
 8001134:	f008 fd5d 	bl	8009bf2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001138:	1d3b      	adds	r3, r7, #4
 800113a:	2220      	movs	r2, #32
 800113c:	2100      	movs	r1, #0
 800113e:	4618      	mov	r0, r3
 8001140:	f008 fd57 	bl	8009bf2 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8001144:	4b2f      	ldr	r3, [pc, #188]	@ (8001204 <SystemClock_Config+0xe0>)
 8001146:	f04f 32ff 	mov.w	r2, #4294967295
 800114a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800114e:	2004      	movs	r0, #4
 8001150:	f002 fd98 	bl	8003c84 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001154:	2300      	movs	r3, #0
 8001156:	603b      	str	r3, [r7, #0]
 8001158:	4b2b      	ldr	r3, [pc, #172]	@ (8001208 <SystemClock_Config+0xe4>)
 800115a:	699b      	ldr	r3, [r3, #24]
 800115c:	4a2a      	ldr	r2, [pc, #168]	@ (8001208 <SystemClock_Config+0xe4>)
 800115e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001162:	6193      	str	r3, [r2, #24]
 8001164:	4b28      	ldr	r3, [pc, #160]	@ (8001208 <SystemClock_Config+0xe4>)
 8001166:	699b      	ldr	r3, [r3, #24]
 8001168:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800116c:	603b      	str	r3, [r7, #0]
 800116e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001170:	bf00      	nop
 8001172:	4b25      	ldr	r3, [pc, #148]	@ (8001208 <SystemClock_Config+0xe4>)
 8001174:	699b      	ldr	r3, [r3, #24]
 8001176:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800117a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800117e:	d1f8      	bne.n	8001172 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001180:	2302      	movs	r3, #2
 8001182:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001184:	2301      	movs	r3, #1
 8001186:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8001188:	2340      	movs	r3, #64	@ 0x40
 800118a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800118c:	2302      	movs	r3, #2
 800118e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001190:	2300      	movs	r3, #0
 8001192:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001194:	2304      	movs	r3, #4
 8001196:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001198:	2308      	movs	r3, #8
 800119a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800119c:	2302      	movs	r3, #2
 800119e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80011a0:	2304      	movs	r3, #4
 80011a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011a4:	2302      	movs	r3, #2
 80011a6:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80011a8:	230c      	movs	r3, #12
 80011aa:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80011ac:	2300      	movs	r3, #0
 80011ae:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011b8:	4618      	mov	r0, r3
 80011ba:	f002 fdbd 	bl	8003d38 <HAL_RCC_OscConfig>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80011c4:	f000 faf0 	bl	80017a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011c8:	233f      	movs	r3, #63	@ 0x3f
 80011ca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011cc:	2303      	movs	r3, #3
 80011ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80011d0:	2300      	movs	r3, #0
 80011d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80011d4:	2300      	movs	r3, #0
 80011d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80011d8:	2300      	movs	r3, #0
 80011da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80011dc:	2300      	movs	r3, #0
 80011de:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80011e0:	2300      	movs	r3, #0
 80011e2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80011e4:	2300      	movs	r3, #0
 80011e6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80011e8:	1d3b      	adds	r3, r7, #4
 80011ea:	2101      	movs	r1, #1
 80011ec:	4618      	mov	r0, r3
 80011ee:	f003 f9d5 	bl	800459c <HAL_RCC_ClockConfig>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <SystemClock_Config+0xd8>
  {
    Error_Handler();
 80011f8:	f000 fad6 	bl	80017a8 <Error_Handler>
  }
}
 80011fc:	bf00      	nop
 80011fe:	3770      	adds	r7, #112	@ 0x70
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	58024400 	.word	0x58024400
 8001208:	58024800 	.word	0x58024800

0800120c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b0b0      	sub	sp, #192	@ 0xc0
 8001210:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001212:	463b      	mov	r3, r7
 8001214:	22c0      	movs	r2, #192	@ 0xc0
 8001216:	2100      	movs	r1, #0
 8001218:	4618      	mov	r0, r3
 800121a:	f008 fcea 	bl	8009bf2 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800121e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001222:	f04f 0300 	mov.w	r3, #0
 8001226:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 800122a:	2304      	movs	r3, #4
 800122c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 8;
 800122e:	2308      	movs	r3, #8
 8001230:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 3;
 8001232:	2303      	movs	r3, #3
 8001234:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001236:	2302      	movs	r3, #2
 8001238:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800123a:	2302      	movs	r3, #2
 800123c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800123e:	23c0      	movs	r3, #192	@ 0xc0
 8001240:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001242:	2300      	movs	r3, #0
 8001244:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001246:	2300      	movs	r3, #0
 8001248:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800124a:	2300      	movs	r3, #0
 800124c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001250:	463b      	mov	r3, r7
 8001252:	4618      	mov	r0, r3
 8001254:	f003 fd2e 	bl	8004cb4 <HAL_RCCEx_PeriphCLKConfig>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 800125e:	f000 faa3 	bl	80017a8 <Error_Handler>
  }
}
 8001262:	bf00      	nop
 8001264:	37c0      	adds	r7, #192	@ 0xc0
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
	...

0800126c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b08a      	sub	sp, #40	@ 0x28
 8001270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001272:	f107 031c 	add.w	r3, r7, #28
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	605a      	str	r2, [r3, #4]
 800127c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800127e:	463b      	mov	r3, r7
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
 800128a:	611a      	str	r2, [r3, #16]
 800128c:	615a      	str	r2, [r3, #20]
 800128e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001290:	4b2f      	ldr	r3, [pc, #188]	@ (8001350 <MX_ADC1_Init+0xe4>)
 8001292:	4a30      	ldr	r2, [pc, #192]	@ (8001354 <MX_ADC1_Init+0xe8>)
 8001294:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001296:	4b2e      	ldr	r3, [pc, #184]	@ (8001350 <MX_ADC1_Init+0xe4>)
 8001298:	2200      	movs	r2, #0
 800129a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 800129c:	4b2c      	ldr	r3, [pc, #176]	@ (8001350 <MX_ADC1_Init+0xe4>)
 800129e:	2200      	movs	r2, #0
 80012a0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80012a2:	4b2b      	ldr	r3, [pc, #172]	@ (8001350 <MX_ADC1_Init+0xe4>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012a8:	4b29      	ldr	r3, [pc, #164]	@ (8001350 <MX_ADC1_Init+0xe4>)
 80012aa:	2204      	movs	r2, #4
 80012ac:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80012ae:	4b28      	ldr	r3, [pc, #160]	@ (8001350 <MX_ADC1_Init+0xe4>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80012b4:	4b26      	ldr	r3, [pc, #152]	@ (8001350 <MX_ADC1_Init+0xe4>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80012ba:	4b25      	ldr	r3, [pc, #148]	@ (8001350 <MX_ADC1_Init+0xe4>)
 80012bc:	2201      	movs	r2, #1
 80012be:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012c0:	4b23      	ldr	r3, [pc, #140]	@ (8001350 <MX_ADC1_Init+0xe4>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012c6:	4b22      	ldr	r3, [pc, #136]	@ (8001350 <MX_ADC1_Init+0xe4>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012cc:	4b20      	ldr	r3, [pc, #128]	@ (8001350 <MX_ADC1_Init+0xe4>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80012d2:	4b1f      	ldr	r3, [pc, #124]	@ (8001350 <MX_ADC1_Init+0xe4>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012d8:	4b1d      	ldr	r3, [pc, #116]	@ (8001350 <MX_ADC1_Init+0xe4>)
 80012da:	2200      	movs	r2, #0
 80012dc:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80012de:	4b1c      	ldr	r3, [pc, #112]	@ (8001350 <MX_ADC1_Init+0xe4>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80012e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001350 <MX_ADC1_Init+0xe4>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012ec:	4818      	ldr	r0, [pc, #96]	@ (8001350 <MX_ADC1_Init+0xe4>)
 80012ee:	f001 f8c3 	bl	8002478 <HAL_ADC_Init>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80012f8:	f000 fa56 	bl	80017a8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80012fc:	2300      	movs	r3, #0
 80012fe:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001300:	f107 031c 	add.w	r3, r7, #28
 8001304:	4619      	mov	r1, r3
 8001306:	4812      	ldr	r0, [pc, #72]	@ (8001350 <MX_ADC1_Init+0xe4>)
 8001308:	f002 f95a 	bl	80035c0 <HAL_ADCEx_MultiModeConfigChannel>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8001312:	f000 fa49 	bl	80017a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001316:	4b10      	ldr	r3, [pc, #64]	@ (8001358 <MX_ADC1_Init+0xec>)
 8001318:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800131a:	2306      	movs	r3, #6
 800131c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800131e:	2300      	movs	r3, #0
 8001320:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001322:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001326:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001328:	2304      	movs	r3, #4
 800132a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800132c:	2300      	movs	r3, #0
 800132e:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001330:	2300      	movs	r3, #0
 8001332:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001334:	463b      	mov	r3, r7
 8001336:	4619      	mov	r1, r3
 8001338:	4805      	ldr	r0, [pc, #20]	@ (8001350 <MX_ADC1_Init+0xe4>)
 800133a:	f001 fbcb 	bl	8002ad4 <HAL_ADC_ConfigChannel>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8001344:	f000 fa30 	bl	80017a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001348:	bf00      	nop
 800134a:	3728      	adds	r7, #40	@ 0x28
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	240001fc 	.word	0x240001fc
 8001354:	40022000 	.word	0x40022000
 8001358:	08600004 	.word	0x08600004

0800135c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b088      	sub	sp, #32
 8001360:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001362:	1d3b      	adds	r3, r7, #4
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	60da      	str	r2, [r3, #12]
 800136e:	611a      	str	r2, [r3, #16]
 8001370:	615a      	str	r2, [r3, #20]
 8001372:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001374:	4b29      	ldr	r3, [pc, #164]	@ (800141c <MX_ADC2_Init+0xc0>)
 8001376:	4a2a      	ldr	r2, [pc, #168]	@ (8001420 <MX_ADC2_Init+0xc4>)
 8001378:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800137a:	4b28      	ldr	r3, [pc, #160]	@ (800141c <MX_ADC2_Init+0xc0>)
 800137c:	2200      	movs	r2, #0
 800137e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8001380:	4b26      	ldr	r3, [pc, #152]	@ (800141c <MX_ADC2_Init+0xc0>)
 8001382:	2200      	movs	r2, #0
 8001384:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001386:	4b25      	ldr	r3, [pc, #148]	@ (800141c <MX_ADC2_Init+0xc0>)
 8001388:	2200      	movs	r2, #0
 800138a:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800138c:	4b23      	ldr	r3, [pc, #140]	@ (800141c <MX_ADC2_Init+0xc0>)
 800138e:	2204      	movs	r2, #4
 8001390:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001392:	4b22      	ldr	r3, [pc, #136]	@ (800141c <MX_ADC2_Init+0xc0>)
 8001394:	2200      	movs	r2, #0
 8001396:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001398:	4b20      	ldr	r3, [pc, #128]	@ (800141c <MX_ADC2_Init+0xc0>)
 800139a:	2200      	movs	r2, #0
 800139c:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 800139e:	4b1f      	ldr	r3, [pc, #124]	@ (800141c <MX_ADC2_Init+0xc0>)
 80013a0:	2201      	movs	r2, #1
 80013a2:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80013a4:	4b1d      	ldr	r3, [pc, #116]	@ (800141c <MX_ADC2_Init+0xc0>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013aa:	4b1c      	ldr	r3, [pc, #112]	@ (800141c <MX_ADC2_Init+0xc0>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013b0:	4b1a      	ldr	r3, [pc, #104]	@ (800141c <MX_ADC2_Init+0xc0>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80013b6:	4b19      	ldr	r3, [pc, #100]	@ (800141c <MX_ADC2_Init+0xc0>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80013bc:	4b17      	ldr	r3, [pc, #92]	@ (800141c <MX_ADC2_Init+0xc0>)
 80013be:	2200      	movs	r2, #0
 80013c0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80013c2:	4b16      	ldr	r3, [pc, #88]	@ (800141c <MX_ADC2_Init+0xc0>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 80013c8:	4b14      	ldr	r3, [pc, #80]	@ (800141c <MX_ADC2_Init+0xc0>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80013d0:	4812      	ldr	r0, [pc, #72]	@ (800141c <MX_ADC2_Init+0xc0>)
 80013d2:	f001 f851 	bl	8002478 <HAL_ADC_Init>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 80013dc:	f000 f9e4 	bl	80017a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80013e0:	4b10      	ldr	r3, [pc, #64]	@ (8001424 <MX_ADC2_Init+0xc8>)
 80013e2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013e4:	2306      	movs	r3, #6
 80013e6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80013e8:	2300      	movs	r3, #0
 80013ea:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80013ec:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80013f0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80013f2:	2304      	movs	r3, #4
 80013f4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80013f6:	2300      	movs	r3, #0
 80013f8:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80013fa:	2300      	movs	r3, #0
 80013fc:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80013fe:	1d3b      	adds	r3, r7, #4
 8001400:	4619      	mov	r1, r3
 8001402:	4806      	ldr	r0, [pc, #24]	@ (800141c <MX_ADC2_Init+0xc0>)
 8001404:	f001 fb66 	bl	8002ad4 <HAL_ADC_ConfigChannel>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 800140e:	f000 f9cb 	bl	80017a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001412:	bf00      	nop
 8001414:	3720      	adds	r7, #32
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	24000260 	.word	0x24000260
 8001420:	40022100 	.word	0x40022100
 8001424:	04300002 	.word	0x04300002

08001428 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800142e:	1d3b      	adds	r3, r7, #4
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001438:	4b14      	ldr	r3, [pc, #80]	@ (800148c <MX_TIM6_Init+0x64>)
 800143a:	4a15      	ldr	r2, [pc, #84]	@ (8001490 <MX_TIM6_Init+0x68>)
 800143c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 800143e:	4b13      	ldr	r3, [pc, #76]	@ (800148c <MX_TIM6_Init+0x64>)
 8001440:	2200      	movs	r2, #0
 8001442:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001444:	4b11      	ldr	r3, [pc, #68]	@ (800148c <MX_TIM6_Init+0x64>)
 8001446:	2200      	movs	r2, #0
 8001448:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800144a:	4b10      	ldr	r3, [pc, #64]	@ (800148c <MX_TIM6_Init+0x64>)
 800144c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001450:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001452:	4b0e      	ldr	r3, [pc, #56]	@ (800148c <MX_TIM6_Init+0x64>)
 8001454:	2200      	movs	r2, #0
 8001456:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001458:	480c      	ldr	r0, [pc, #48]	@ (800148c <MX_TIM6_Init+0x64>)
 800145a:	f006 f835 	bl	80074c8 <HAL_TIM_Base_Init>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001464:	f000 f9a0 	bl	80017a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001468:	2300      	movs	r3, #0
 800146a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800146c:	2300      	movs	r3, #0
 800146e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001470:	1d3b      	adds	r3, r7, #4
 8001472:	4619      	mov	r1, r3
 8001474:	4805      	ldr	r0, [pc, #20]	@ (800148c <MX_TIM6_Init+0x64>)
 8001476:	f006 f925 	bl	80076c4 <HAL_TIMEx_MasterConfigSynchronization>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001480:	f000 f992 	bl	80017a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001484:	bf00      	nop
 8001486:	3710      	adds	r7, #16
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	240002c4 	.word	0x240002c4
 8001490:	40001000 	.word	0x40001000

08001494 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001498:	4b22      	ldr	r3, [pc, #136]	@ (8001524 <MX_USART1_UART_Init+0x90>)
 800149a:	4a23      	ldr	r2, [pc, #140]	@ (8001528 <MX_USART1_UART_Init+0x94>)
 800149c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800149e:	4b21      	ldr	r3, [pc, #132]	@ (8001524 <MX_USART1_UART_Init+0x90>)
 80014a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014a6:	4b1f      	ldr	r3, [pc, #124]	@ (8001524 <MX_USART1_UART_Init+0x90>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001524 <MX_USART1_UART_Init+0x90>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001524 <MX_USART1_UART_Init+0x90>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001524 <MX_USART1_UART_Init+0x90>)
 80014ba:	220c      	movs	r2, #12
 80014bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014be:	4b19      	ldr	r3, [pc, #100]	@ (8001524 <MX_USART1_UART_Init+0x90>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014c4:	4b17      	ldr	r3, [pc, #92]	@ (8001524 <MX_USART1_UART_Init+0x90>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014ca:	4b16      	ldr	r3, [pc, #88]	@ (8001524 <MX_USART1_UART_Init+0x90>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014d0:	4b14      	ldr	r3, [pc, #80]	@ (8001524 <MX_USART1_UART_Init+0x90>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014d6:	4b13      	ldr	r3, [pc, #76]	@ (8001524 <MX_USART1_UART_Init+0x90>)
 80014d8:	2200      	movs	r2, #0
 80014da:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014dc:	4811      	ldr	r0, [pc, #68]	@ (8001524 <MX_USART1_UART_Init+0x90>)
 80014de:	f006 f97f 	bl	80077e0 <HAL_UART_Init>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80014e8:	f000 f95e 	bl	80017a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014ec:	2100      	movs	r1, #0
 80014ee:	480d      	ldr	r0, [pc, #52]	@ (8001524 <MX_USART1_UART_Init+0x90>)
 80014f0:	f007 fb19 	bl	8008b26 <HAL_UARTEx_SetTxFifoThreshold>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80014fa:	f000 f955 	bl	80017a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014fe:	2100      	movs	r1, #0
 8001500:	4808      	ldr	r0, [pc, #32]	@ (8001524 <MX_USART1_UART_Init+0x90>)
 8001502:	f007 fb4e 	bl	8008ba2 <HAL_UARTEx_SetRxFifoThreshold>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800150c:	f000 f94c 	bl	80017a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001510:	4804      	ldr	r0, [pc, #16]	@ (8001524 <MX_USART1_UART_Init+0x90>)
 8001512:	f007 facf 	bl	8008ab4 <HAL_UARTEx_DisableFifoMode>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800151c:	f000 f944 	bl	80017a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001520:	bf00      	nop
 8001522:	bd80      	pop	{r7, pc}
 8001524:	24000310 	.word	0x24000310
 8001528:	40011000 	.word	0x40011000

0800152c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001530:	4b22      	ldr	r3, [pc, #136]	@ (80015bc <MX_USART2_UART_Init+0x90>)
 8001532:	4a23      	ldr	r2, [pc, #140]	@ (80015c0 <MX_USART2_UART_Init+0x94>)
 8001534:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001536:	4b21      	ldr	r3, [pc, #132]	@ (80015bc <MX_USART2_UART_Init+0x90>)
 8001538:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800153c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800153e:	4b1f      	ldr	r3, [pc, #124]	@ (80015bc <MX_USART2_UART_Init+0x90>)
 8001540:	2200      	movs	r2, #0
 8001542:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001544:	4b1d      	ldr	r3, [pc, #116]	@ (80015bc <MX_USART2_UART_Init+0x90>)
 8001546:	2200      	movs	r2, #0
 8001548:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800154a:	4b1c      	ldr	r3, [pc, #112]	@ (80015bc <MX_USART2_UART_Init+0x90>)
 800154c:	2200      	movs	r2, #0
 800154e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001550:	4b1a      	ldr	r3, [pc, #104]	@ (80015bc <MX_USART2_UART_Init+0x90>)
 8001552:	220c      	movs	r2, #12
 8001554:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001556:	4b19      	ldr	r3, [pc, #100]	@ (80015bc <MX_USART2_UART_Init+0x90>)
 8001558:	2200      	movs	r2, #0
 800155a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800155c:	4b17      	ldr	r3, [pc, #92]	@ (80015bc <MX_USART2_UART_Init+0x90>)
 800155e:	2200      	movs	r2, #0
 8001560:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001562:	4b16      	ldr	r3, [pc, #88]	@ (80015bc <MX_USART2_UART_Init+0x90>)
 8001564:	2200      	movs	r2, #0
 8001566:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001568:	4b14      	ldr	r3, [pc, #80]	@ (80015bc <MX_USART2_UART_Init+0x90>)
 800156a:	2200      	movs	r2, #0
 800156c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800156e:	4b13      	ldr	r3, [pc, #76]	@ (80015bc <MX_USART2_UART_Init+0x90>)
 8001570:	2200      	movs	r2, #0
 8001572:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001574:	4811      	ldr	r0, [pc, #68]	@ (80015bc <MX_USART2_UART_Init+0x90>)
 8001576:	f006 f933 	bl	80077e0 <HAL_UART_Init>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001580:	f000 f912 	bl	80017a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001584:	2100      	movs	r1, #0
 8001586:	480d      	ldr	r0, [pc, #52]	@ (80015bc <MX_USART2_UART_Init+0x90>)
 8001588:	f007 facd 	bl	8008b26 <HAL_UARTEx_SetTxFifoThreshold>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001592:	f000 f909 	bl	80017a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001596:	2100      	movs	r1, #0
 8001598:	4808      	ldr	r0, [pc, #32]	@ (80015bc <MX_USART2_UART_Init+0x90>)
 800159a:	f007 fb02 	bl	8008ba2 <HAL_UARTEx_SetRxFifoThreshold>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80015a4:	f000 f900 	bl	80017a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80015a8:	4804      	ldr	r0, [pc, #16]	@ (80015bc <MX_USART2_UART_Init+0x90>)
 80015aa:	f007 fa83 	bl	8008ab4 <HAL_UARTEx_DisableFifoMode>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80015b4:	f000 f8f8 	bl	80017a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015b8:	bf00      	nop
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	240003a4 	.word	0x240003a4
 80015c0:	40004400 	.word	0x40004400

080015c4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80015c8:	4b22      	ldr	r3, [pc, #136]	@ (8001654 <MX_USART3_UART_Init+0x90>)
 80015ca:	4a23      	ldr	r2, [pc, #140]	@ (8001658 <MX_USART3_UART_Init+0x94>)
 80015cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80015ce:	4b21      	ldr	r3, [pc, #132]	@ (8001654 <MX_USART3_UART_Init+0x90>)
 80015d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015d4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80015d6:	4b1f      	ldr	r3, [pc, #124]	@ (8001654 <MX_USART3_UART_Init+0x90>)
 80015d8:	2200      	movs	r2, #0
 80015da:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80015dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001654 <MX_USART3_UART_Init+0x90>)
 80015de:	2200      	movs	r2, #0
 80015e0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80015e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001654 <MX_USART3_UART_Init+0x90>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80015e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001654 <MX_USART3_UART_Init+0x90>)
 80015ea:	220c      	movs	r2, #12
 80015ec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ee:	4b19      	ldr	r3, [pc, #100]	@ (8001654 <MX_USART3_UART_Init+0x90>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80015f4:	4b17      	ldr	r3, [pc, #92]	@ (8001654 <MX_USART3_UART_Init+0x90>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015fa:	4b16      	ldr	r3, [pc, #88]	@ (8001654 <MX_USART3_UART_Init+0x90>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001600:	4b14      	ldr	r3, [pc, #80]	@ (8001654 <MX_USART3_UART_Init+0x90>)
 8001602:	2200      	movs	r2, #0
 8001604:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001606:	4b13      	ldr	r3, [pc, #76]	@ (8001654 <MX_USART3_UART_Init+0x90>)
 8001608:	2200      	movs	r2, #0
 800160a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800160c:	4811      	ldr	r0, [pc, #68]	@ (8001654 <MX_USART3_UART_Init+0x90>)
 800160e:	f006 f8e7 	bl	80077e0 <HAL_UART_Init>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001618:	f000 f8c6 	bl	80017a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800161c:	2100      	movs	r1, #0
 800161e:	480d      	ldr	r0, [pc, #52]	@ (8001654 <MX_USART3_UART_Init+0x90>)
 8001620:	f007 fa81 	bl	8008b26 <HAL_UARTEx_SetTxFifoThreshold>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800162a:	f000 f8bd 	bl	80017a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800162e:	2100      	movs	r1, #0
 8001630:	4808      	ldr	r0, [pc, #32]	@ (8001654 <MX_USART3_UART_Init+0x90>)
 8001632:	f007 fab6 	bl	8008ba2 <HAL_UARTEx_SetRxFifoThreshold>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800163c:	f000 f8b4 	bl	80017a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001640:	4804      	ldr	r0, [pc, #16]	@ (8001654 <MX_USART3_UART_Init+0x90>)
 8001642:	f007 fa37 	bl	8008ab4 <HAL_UARTEx_DisableFifoMode>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800164c:	f000 f8ac 	bl	80017a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001650:	bf00      	nop
 8001652:	bd80      	pop	{r7, pc}
 8001654:	24000438 	.word	0x24000438
 8001658:	40004800 	.word	0x40004800

0800165c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b08c      	sub	sp, #48	@ 0x30
 8001660:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001662:	f107 031c 	add.w	r3, r7, #28
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	605a      	str	r2, [r3, #4]
 800166c:	609a      	str	r2, [r3, #8]
 800166e:	60da      	str	r2, [r3, #12]
 8001670:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001672:	4b4a      	ldr	r3, [pc, #296]	@ (800179c <MX_GPIO_Init+0x140>)
 8001674:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001678:	4a48      	ldr	r2, [pc, #288]	@ (800179c <MX_GPIO_Init+0x140>)
 800167a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800167e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001682:	4b46      	ldr	r3, [pc, #280]	@ (800179c <MX_GPIO_Init+0x140>)
 8001684:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001688:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800168c:	61bb      	str	r3, [r7, #24]
 800168e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001690:	4b42      	ldr	r3, [pc, #264]	@ (800179c <MX_GPIO_Init+0x140>)
 8001692:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001696:	4a41      	ldr	r2, [pc, #260]	@ (800179c <MX_GPIO_Init+0x140>)
 8001698:	f043 0304 	orr.w	r3, r3, #4
 800169c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80016a0:	4b3e      	ldr	r3, [pc, #248]	@ (800179c <MX_GPIO_Init+0x140>)
 80016a2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80016a6:	f003 0304 	and.w	r3, r3, #4
 80016aa:	617b      	str	r3, [r7, #20]
 80016ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ae:	4b3b      	ldr	r3, [pc, #236]	@ (800179c <MX_GPIO_Init+0x140>)
 80016b0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80016b4:	4a39      	ldr	r2, [pc, #228]	@ (800179c <MX_GPIO_Init+0x140>)
 80016b6:	f043 0301 	orr.w	r3, r3, #1
 80016ba:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80016be:	4b37      	ldr	r3, [pc, #220]	@ (800179c <MX_GPIO_Init+0x140>)
 80016c0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80016c4:	f003 0301 	and.w	r3, r3, #1
 80016c8:	613b      	str	r3, [r7, #16]
 80016ca:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016cc:	4b33      	ldr	r3, [pc, #204]	@ (800179c <MX_GPIO_Init+0x140>)
 80016ce:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80016d2:	4a32      	ldr	r2, [pc, #200]	@ (800179c <MX_GPIO_Init+0x140>)
 80016d4:	f043 0320 	orr.w	r3, r3, #32
 80016d8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80016dc:	4b2f      	ldr	r3, [pc, #188]	@ (800179c <MX_GPIO_Init+0x140>)
 80016de:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80016e2:	f003 0320 	and.w	r3, r3, #32
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016ea:	4b2c      	ldr	r3, [pc, #176]	@ (800179c <MX_GPIO_Init+0x140>)
 80016ec:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80016f0:	4a2a      	ldr	r2, [pc, #168]	@ (800179c <MX_GPIO_Init+0x140>)
 80016f2:	f043 0310 	orr.w	r3, r3, #16
 80016f6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80016fa:	4b28      	ldr	r3, [pc, #160]	@ (800179c <MX_GPIO_Init+0x140>)
 80016fc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001700:	f003 0310 	and.w	r3, r3, #16
 8001704:	60bb      	str	r3, [r7, #8]
 8001706:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001708:	4b24      	ldr	r3, [pc, #144]	@ (800179c <MX_GPIO_Init+0x140>)
 800170a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800170e:	4a23      	ldr	r2, [pc, #140]	@ (800179c <MX_GPIO_Init+0x140>)
 8001710:	f043 0302 	orr.w	r3, r3, #2
 8001714:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001718:	4b20      	ldr	r3, [pc, #128]	@ (800179c <MX_GPIO_Init+0x140>)
 800171a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800171e:	f003 0302 	and.w	r3, r3, #2
 8001722:	607b      	str	r3, [r7, #4]
 8001724:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001726:	4b1d      	ldr	r3, [pc, #116]	@ (800179c <MX_GPIO_Init+0x140>)
 8001728:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800172c:	4a1b      	ldr	r2, [pc, #108]	@ (800179c <MX_GPIO_Init+0x140>)
 800172e:	f043 0308 	orr.w	r3, r3, #8
 8001732:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001736:	4b19      	ldr	r3, [pc, #100]	@ (800179c <MX_GPIO_Init+0x140>)
 8001738:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800173c:	f003 0308 	and.w	r3, r3, #8
 8001740:	603b      	str	r3, [r7, #0]
 8001742:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8001744:	2200      	movs	r2, #0
 8001746:	2180      	movs	r1, #128	@ 0x80
 8001748:	4815      	ldr	r0, [pc, #84]	@ (80017a0 <MX_GPIO_Init+0x144>)
 800174a:	f002 fa81 	bl	8003c50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, Pump_Pin|Lamp_Pin, GPIO_PIN_RESET);
 800174e:	2200      	movs	r2, #0
 8001750:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8001754:	4813      	ldr	r0, [pc, #76]	@ (80017a4 <MX_GPIO_Init+0x148>)
 8001756:	f002 fa7b 	bl	8003c50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800175a:	2380      	movs	r3, #128	@ 0x80
 800175c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800175e:	2301      	movs	r3, #1
 8001760:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001762:	2300      	movs	r3, #0
 8001764:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001766:	2300      	movs	r3, #0
 8001768:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800176a:	f107 031c 	add.w	r3, r7, #28
 800176e:	4619      	mov	r1, r3
 8001770:	480b      	ldr	r0, [pc, #44]	@ (80017a0 <MX_GPIO_Init+0x144>)
 8001772:	f002 f8a5 	bl	80038c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Pump_Pin Lamp_Pin */
  GPIO_InitStruct.Pin = Pump_Pin|Lamp_Pin;
 8001776:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800177a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800177c:	2301      	movs	r3, #1
 800177e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001780:	2300      	movs	r3, #0
 8001782:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001784:	2300      	movs	r3, #0
 8001786:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001788:	f107 031c 	add.w	r3, r7, #28
 800178c:	4619      	mov	r1, r3
 800178e:	4805      	ldr	r0, [pc, #20]	@ (80017a4 <MX_GPIO_Init+0x148>)
 8001790:	f002 f896 	bl	80038c0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001794:	bf00      	nop
 8001796:	3730      	adds	r7, #48	@ 0x30
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	58024400 	.word	0x58024400
 80017a0:	58020000 	.word	0x58020000
 80017a4:	58021000 	.word	0x58021000

080017a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017ac:	b672      	cpsid	i
}
 80017ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017b0:	bf00      	nop
 80017b2:	e7fd      	b.n	80017b0 <Error_Handler+0x8>

080017b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ba:	4b0a      	ldr	r3, [pc, #40]	@ (80017e4 <HAL_MspInit+0x30>)
 80017bc:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80017c0:	4a08      	ldr	r2, [pc, #32]	@ (80017e4 <HAL_MspInit+0x30>)
 80017c2:	f043 0302 	orr.w	r3, r3, #2
 80017c6:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 80017ca:	4b06      	ldr	r3, [pc, #24]	@ (80017e4 <HAL_MspInit+0x30>)
 80017cc:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80017d0:	f003 0302 	and.w	r3, r3, #2
 80017d4:	607b      	str	r3, [r7, #4]
 80017d6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017d8:	bf00      	nop
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr
 80017e4:	58024400 	.word	0x58024400

080017e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b08c      	sub	sp, #48	@ 0x30
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f0:	f107 031c 	add.w	r3, r7, #28
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	605a      	str	r2, [r3, #4]
 80017fa:	609a      	str	r2, [r3, #8]
 80017fc:	60da      	str	r2, [r3, #12]
 80017fe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a36      	ldr	r2, [pc, #216]	@ (80018e0 <HAL_ADC_MspInit+0xf8>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d134      	bne.n	8001874 <HAL_ADC_MspInit+0x8c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800180a:	4b36      	ldr	r3, [pc, #216]	@ (80018e4 <HAL_ADC_MspInit+0xfc>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	3301      	adds	r3, #1
 8001810:	4a34      	ldr	r2, [pc, #208]	@ (80018e4 <HAL_ADC_MspInit+0xfc>)
 8001812:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001814:	4b33      	ldr	r3, [pc, #204]	@ (80018e4 <HAL_ADC_MspInit+0xfc>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2b01      	cmp	r3, #1
 800181a:	d10e      	bne.n	800183a <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800181c:	4b32      	ldr	r3, [pc, #200]	@ (80018e8 <HAL_ADC_MspInit+0x100>)
 800181e:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8001822:	4a31      	ldr	r2, [pc, #196]	@ (80018e8 <HAL_ADC_MspInit+0x100>)
 8001824:	f043 0320 	orr.w	r3, r3, #32
 8001828:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 800182c:	4b2e      	ldr	r3, [pc, #184]	@ (80018e8 <HAL_ADC_MspInit+0x100>)
 800182e:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8001832:	f003 0320 	and.w	r3, r3, #32
 8001836:	61bb      	str	r3, [r7, #24]
 8001838:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800183a:	4b2b      	ldr	r3, [pc, #172]	@ (80018e8 <HAL_ADC_MspInit+0x100>)
 800183c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001840:	4a29      	ldr	r2, [pc, #164]	@ (80018e8 <HAL_ADC_MspInit+0x100>)
 8001842:	f043 0320 	orr.w	r3, r3, #32
 8001846:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800184a:	4b27      	ldr	r3, [pc, #156]	@ (80018e8 <HAL_ADC_MspInit+0x100>)
 800184c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001850:	f003 0320 	and.w	r3, r3, #32
 8001854:	617b      	str	r3, [r7, #20]
 8001856:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = INPUT_SH_Pin;
 8001858:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800185c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800185e:	2303      	movs	r3, #3
 8001860:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001862:	2300      	movs	r3, #0
 8001864:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(INPUT_SH_GPIO_Port, &GPIO_InitStruct);
 8001866:	f107 031c 	add.w	r3, r7, #28
 800186a:	4619      	mov	r1, r3
 800186c:	481f      	ldr	r0, [pc, #124]	@ (80018ec <HAL_ADC_MspInit+0x104>)
 800186e:	f002 f827 	bl	80038c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001872:	e031      	b.n	80018d8 <HAL_ADC_MspInit+0xf0>
  else if(hadc->Instance==ADC2)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a1d      	ldr	r2, [pc, #116]	@ (80018f0 <HAL_ADC_MspInit+0x108>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d12c      	bne.n	80018d8 <HAL_ADC_MspInit+0xf0>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800187e:	4b19      	ldr	r3, [pc, #100]	@ (80018e4 <HAL_ADC_MspInit+0xfc>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	3301      	adds	r3, #1
 8001884:	4a17      	ldr	r2, [pc, #92]	@ (80018e4 <HAL_ADC_MspInit+0xfc>)
 8001886:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001888:	4b16      	ldr	r3, [pc, #88]	@ (80018e4 <HAL_ADC_MspInit+0xfc>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2b01      	cmp	r3, #1
 800188e:	d10e      	bne.n	80018ae <HAL_ADC_MspInit+0xc6>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001890:	4b15      	ldr	r3, [pc, #84]	@ (80018e8 <HAL_ADC_MspInit+0x100>)
 8001892:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8001896:	4a14      	ldr	r2, [pc, #80]	@ (80018e8 <HAL_ADC_MspInit+0x100>)
 8001898:	f043 0320 	orr.w	r3, r3, #32
 800189c:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 80018a0:	4b11      	ldr	r3, [pc, #68]	@ (80018e8 <HAL_ADC_MspInit+0x100>)
 80018a2:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80018a6:	f003 0320 	and.w	r3, r3, #32
 80018aa:	613b      	str	r3, [r7, #16]
 80018ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ae:	4b0e      	ldr	r3, [pc, #56]	@ (80018e8 <HAL_ADC_MspInit+0x100>)
 80018b0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80018b4:	4a0c      	ldr	r2, [pc, #48]	@ (80018e8 <HAL_ADC_MspInit+0x100>)
 80018b6:	f043 0304 	orr.w	r3, r3, #4
 80018ba:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80018be:	4b0a      	ldr	r3, [pc, #40]	@ (80018e8 <HAL_ADC_MspInit+0x100>)
 80018c0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80018c4:	f003 0304 	and.w	r3, r3, #4
 80018c8:	60fb      	str	r3, [r7, #12]
 80018ca:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 80018cc:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 80018d0:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 80018d4:	f000 fb88 	bl	8001fe8 <HAL_SYSCFG_AnalogSwitchConfig>
}
 80018d8:	bf00      	nop
 80018da:	3730      	adds	r7, #48	@ 0x30
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	40022000 	.word	0x40022000
 80018e4:	240004d4 	.word	0x240004d4
 80018e8:	58024400 	.word	0x58024400
 80018ec:	58021400 	.word	0x58021400
 80018f0:	40022100 	.word	0x40022100

080018f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b085      	sub	sp, #20
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a0b      	ldr	r2, [pc, #44]	@ (8001930 <HAL_TIM_Base_MspInit+0x3c>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d10e      	bne.n	8001924 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001906:	4b0b      	ldr	r3, [pc, #44]	@ (8001934 <HAL_TIM_Base_MspInit+0x40>)
 8001908:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800190c:	4a09      	ldr	r2, [pc, #36]	@ (8001934 <HAL_TIM_Base_MspInit+0x40>)
 800190e:	f043 0310 	orr.w	r3, r3, #16
 8001912:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001916:	4b07      	ldr	r3, [pc, #28]	@ (8001934 <HAL_TIM_Base_MspInit+0x40>)
 8001918:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800191c:	f003 0310 	and.w	r3, r3, #16
 8001920:	60fb      	str	r3, [r7, #12]
 8001922:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001924:	bf00      	nop
 8001926:	3714      	adds	r7, #20
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr
 8001930:	40001000 	.word	0x40001000
 8001934:	58024400 	.word	0x58024400

08001938 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b0be      	sub	sp, #248	@ 0xf8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001940:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	605a      	str	r2, [r3, #4]
 800194a:	609a      	str	r2, [r3, #8]
 800194c:	60da      	str	r2, [r3, #12]
 800194e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001950:	f107 0320 	add.w	r3, r7, #32
 8001954:	22c0      	movs	r2, #192	@ 0xc0
 8001956:	2100      	movs	r1, #0
 8001958:	4618      	mov	r0, r3
 800195a:	f008 f94a 	bl	8009bf2 <memset>
  if(huart->Instance==USART1)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a73      	ldr	r2, [pc, #460]	@ (8001b30 <HAL_UART_MspInit+0x1f8>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d147      	bne.n	80019f8 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001968:	f04f 0201 	mov.w	r2, #1
 800196c:	f04f 0300 	mov.w	r3, #0
 8001970:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8001974:	2300      	movs	r3, #0
 8001976:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800197a:	f107 0320 	add.w	r3, r7, #32
 800197e:	4618      	mov	r0, r3
 8001980:	f003 f998 	bl	8004cb4 <HAL_RCCEx_PeriphCLKConfig>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800198a:	f7ff ff0d 	bl	80017a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800198e:	4b69      	ldr	r3, [pc, #420]	@ (8001b34 <HAL_UART_MspInit+0x1fc>)
 8001990:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8001994:	4a67      	ldr	r2, [pc, #412]	@ (8001b34 <HAL_UART_MspInit+0x1fc>)
 8001996:	f043 0310 	orr.w	r3, r3, #16
 800199a:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 800199e:	4b65      	ldr	r3, [pc, #404]	@ (8001b34 <HAL_UART_MspInit+0x1fc>)
 80019a0:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80019a4:	f003 0310 	and.w	r3, r3, #16
 80019a8:	61fb      	str	r3, [r7, #28]
 80019aa:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ac:	4b61      	ldr	r3, [pc, #388]	@ (8001b34 <HAL_UART_MspInit+0x1fc>)
 80019ae:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80019b2:	4a60      	ldr	r2, [pc, #384]	@ (8001b34 <HAL_UART_MspInit+0x1fc>)
 80019b4:	f043 0302 	orr.w	r3, r3, #2
 80019b8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80019bc:	4b5d      	ldr	r3, [pc, #372]	@ (8001b34 <HAL_UART_MspInit+0x1fc>)
 80019be:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80019c2:	f003 0302 	and.w	r3, r3, #2
 80019c6:	61bb      	str	r3, [r7, #24]
 80019c8:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80019ca:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80019ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d2:	2302      	movs	r3, #2
 80019d4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d8:	2300      	movs	r3, #0
 80019da:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019de:	2300      	movs	r3, #0
 80019e0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80019e4:	2304      	movs	r3, #4
 80019e6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ea:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80019ee:	4619      	mov	r1, r3
 80019f0:	4851      	ldr	r0, [pc, #324]	@ (8001b38 <HAL_UART_MspInit+0x200>)
 80019f2:	f001 ff65 	bl	80038c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80019f6:	e097      	b.n	8001b28 <HAL_UART_MspInit+0x1f0>
  else if(huart->Instance==USART2)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a4f      	ldr	r2, [pc, #316]	@ (8001b3c <HAL_UART_MspInit+0x204>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d146      	bne.n	8001a90 <HAL_UART_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001a02:	f04f 0202 	mov.w	r2, #2
 8001a06:	f04f 0300 	mov.w	r3, #0
 8001a0a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a14:	f107 0320 	add.w	r3, r7, #32
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f003 f94b 	bl	8004cb4 <HAL_RCCEx_PeriphCLKConfig>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8001a24:	f7ff fec0 	bl	80017a8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a28:	4b42      	ldr	r3, [pc, #264]	@ (8001b34 <HAL_UART_MspInit+0x1fc>)
 8001a2a:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001a2e:	4a41      	ldr	r2, [pc, #260]	@ (8001b34 <HAL_UART_MspInit+0x1fc>)
 8001a30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a34:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001a38:	4b3e      	ldr	r3, [pc, #248]	@ (8001b34 <HAL_UART_MspInit+0x1fc>)
 8001a3a:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001a3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a42:	617b      	str	r3, [r7, #20]
 8001a44:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a46:	4b3b      	ldr	r3, [pc, #236]	@ (8001b34 <HAL_UART_MspInit+0x1fc>)
 8001a48:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001a4c:	4a39      	ldr	r2, [pc, #228]	@ (8001b34 <HAL_UART_MspInit+0x1fc>)
 8001a4e:	f043 0301 	orr.w	r3, r3, #1
 8001a52:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001a56:	4b37      	ldr	r3, [pc, #220]	@ (8001b34 <HAL_UART_MspInit+0x1fc>)
 8001a58:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001a5c:	f003 0301 	and.w	r3, r3, #1
 8001a60:	613b      	str	r3, [r7, #16]
 8001a62:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a64:	230c      	movs	r3, #12
 8001a66:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a70:	2300      	movs	r3, #0
 8001a72:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a76:	2300      	movs	r3, #0
 8001a78:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a7c:	2307      	movs	r3, #7
 8001a7e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a82:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001a86:	4619      	mov	r1, r3
 8001a88:	482d      	ldr	r0, [pc, #180]	@ (8001b40 <HAL_UART_MspInit+0x208>)
 8001a8a:	f001 ff19 	bl	80038c0 <HAL_GPIO_Init>
}
 8001a8e:	e04b      	b.n	8001b28 <HAL_UART_MspInit+0x1f0>
  else if(huart->Instance==USART3)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a2b      	ldr	r2, [pc, #172]	@ (8001b44 <HAL_UART_MspInit+0x20c>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d146      	bne.n	8001b28 <HAL_UART_MspInit+0x1f0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001a9a:	f04f 0202 	mov.w	r2, #2
 8001a9e:	f04f 0300 	mov.w	r3, #0
 8001aa2:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001aac:	f107 0320 	add.w	r3, r7, #32
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f003 f8ff 	bl	8004cb4 <HAL_RCCEx_PeriphCLKConfig>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <HAL_UART_MspInit+0x188>
      Error_Handler();
 8001abc:	f7ff fe74 	bl	80017a8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ac0:	4b1c      	ldr	r3, [pc, #112]	@ (8001b34 <HAL_UART_MspInit+0x1fc>)
 8001ac2:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001ac6:	4a1b      	ldr	r2, [pc, #108]	@ (8001b34 <HAL_UART_MspInit+0x1fc>)
 8001ac8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001acc:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001ad0:	4b18      	ldr	r3, [pc, #96]	@ (8001b34 <HAL_UART_MspInit+0x1fc>)
 8001ad2:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001ad6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ada:	60fb      	str	r3, [r7, #12]
 8001adc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ade:	4b15      	ldr	r3, [pc, #84]	@ (8001b34 <HAL_UART_MspInit+0x1fc>)
 8001ae0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001ae4:	4a13      	ldr	r2, [pc, #76]	@ (8001b34 <HAL_UART_MspInit+0x1fc>)
 8001ae6:	f043 0308 	orr.w	r3, r3, #8
 8001aea:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001aee:	4b11      	ldr	r3, [pc, #68]	@ (8001b34 <HAL_UART_MspInit+0x1fc>)
 8001af0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001af4:	f003 0308 	and.w	r3, r3, #8
 8001af8:	60bb      	str	r3, [r7, #8]
 8001afa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001afc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001b00:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b04:	2302      	movs	r3, #2
 8001b06:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b10:	2300      	movs	r3, #0
 8001b12:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b16:	2307      	movs	r3, #7
 8001b18:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b1c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001b20:	4619      	mov	r1, r3
 8001b22:	4809      	ldr	r0, [pc, #36]	@ (8001b48 <HAL_UART_MspInit+0x210>)
 8001b24:	f001 fecc 	bl	80038c0 <HAL_GPIO_Init>
}
 8001b28:	bf00      	nop
 8001b2a:	37f8      	adds	r7, #248	@ 0xf8
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	40011000 	.word	0x40011000
 8001b34:	58024400 	.word	0x58024400
 8001b38:	58020400 	.word	0x58020400
 8001b3c:	40004400 	.word	0x40004400
 8001b40:	58020000 	.word	0x58020000
 8001b44:	40004800 	.word	0x40004800
 8001b48:	58020c00 	.word	0x58020c00

08001b4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b50:	bf00      	nop
 8001b52:	e7fd      	b.n	8001b50 <NMI_Handler+0x4>

08001b54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b58:	bf00      	nop
 8001b5a:	e7fd      	b.n	8001b58 <HardFault_Handler+0x4>

08001b5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b60:	bf00      	nop
 8001b62:	e7fd      	b.n	8001b60 <MemManage_Handler+0x4>

08001b64 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b68:	bf00      	nop
 8001b6a:	e7fd      	b.n	8001b68 <BusFault_Handler+0x4>

08001b6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b70:	bf00      	nop
 8001b72:	e7fd      	b.n	8001b70 <UsageFault_Handler+0x4>

08001b74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b78:	bf00      	nop
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr

08001b82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b82:	b480      	push	{r7}
 8001b84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b86:	bf00      	nop
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b94:	bf00      	nop
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr

08001b9e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ba2:	f000 f9dd 	bl	8001f60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ba6:	bf00      	nop
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001baa:	b480      	push	{r7}
 8001bac:	af00      	add	r7, sp, #0
  return 1;
 8001bae:	2301      	movs	r3, #1
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr

08001bba <_kill>:

int _kill(int pid, int sig)
{
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b082      	sub	sp, #8
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	6078      	str	r0, [r7, #4]
 8001bc2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001bc4:	f008 f868 	bl	8009c98 <__errno>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2216      	movs	r2, #22
 8001bcc:	601a      	str	r2, [r3, #0]
  return -1;
 8001bce:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <_exit>:

void _exit (int status)
{
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	b082      	sub	sp, #8
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001be2:	f04f 31ff 	mov.w	r1, #4294967295
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f7ff ffe7 	bl	8001bba <_kill>
  while (1) {}    /* Make sure we hang here */
 8001bec:	bf00      	nop
 8001bee:	e7fd      	b.n	8001bec <_exit+0x12>

08001bf0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b086      	sub	sp, #24
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	617b      	str	r3, [r7, #20]
 8001c00:	e00a      	b.n	8001c18 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c02:	f3af 8000 	nop.w
 8001c06:	4601      	mov	r1, r0
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	1c5a      	adds	r2, r3, #1
 8001c0c:	60ba      	str	r2, [r7, #8]
 8001c0e:	b2ca      	uxtb	r2, r1
 8001c10:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	3301      	adds	r3, #1
 8001c16:	617b      	str	r3, [r7, #20]
 8001c18:	697a      	ldr	r2, [r7, #20]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	dbf0      	blt.n	8001c02 <_read+0x12>
  }

  return len;
 8001c20:	687b      	ldr	r3, [r7, #4]
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3718      	adds	r7, #24
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}

08001c2a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c2a:	b580      	push	{r7, lr}
 8001c2c:	b086      	sub	sp, #24
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	60f8      	str	r0, [r7, #12]
 8001c32:	60b9      	str	r1, [r7, #8]
 8001c34:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c36:	2300      	movs	r3, #0
 8001c38:	617b      	str	r3, [r7, #20]
 8001c3a:	e009      	b.n	8001c50 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	1c5a      	adds	r2, r3, #1
 8001c40:	60ba      	str	r2, [r7, #8]
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	4618      	mov	r0, r3
 8001c46:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	617b      	str	r3, [r7, #20]
 8001c50:	697a      	ldr	r2, [r7, #20]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	dbf1      	blt.n	8001c3c <_write+0x12>
  }
  return len;
 8001c58:	687b      	ldr	r3, [r7, #4]
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3718      	adds	r7, #24
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <_close>:

int _close(int file)
{
 8001c62:	b480      	push	{r7}
 8001c64:	b083      	sub	sp, #12
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c6a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	370c      	adds	r7, #12
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr

08001c7a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	b083      	sub	sp, #12
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
 8001c82:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c8a:	605a      	str	r2, [r3, #4]
  return 0;
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr

08001c9a <_isatty>:

int _isatty(int file)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	b083      	sub	sp, #12
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ca2:	2301      	movs	r3, #1
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b085      	sub	sp, #20
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3714      	adds	r7, #20
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
	...

08001ccc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b086      	sub	sp, #24
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cd4:	4a14      	ldr	r2, [pc, #80]	@ (8001d28 <_sbrk+0x5c>)
 8001cd6:	4b15      	ldr	r3, [pc, #84]	@ (8001d2c <_sbrk+0x60>)
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ce0:	4b13      	ldr	r3, [pc, #76]	@ (8001d30 <_sbrk+0x64>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d102      	bne.n	8001cee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ce8:	4b11      	ldr	r3, [pc, #68]	@ (8001d30 <_sbrk+0x64>)
 8001cea:	4a12      	ldr	r2, [pc, #72]	@ (8001d34 <_sbrk+0x68>)
 8001cec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cee:	4b10      	ldr	r3, [pc, #64]	@ (8001d30 <_sbrk+0x64>)
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	693a      	ldr	r2, [r7, #16]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d207      	bcs.n	8001d0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cfc:	f007 ffcc 	bl	8009c98 <__errno>
 8001d00:	4603      	mov	r3, r0
 8001d02:	220c      	movs	r2, #12
 8001d04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d06:	f04f 33ff 	mov.w	r3, #4294967295
 8001d0a:	e009      	b.n	8001d20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d0c:	4b08      	ldr	r3, [pc, #32]	@ (8001d30 <_sbrk+0x64>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d12:	4b07      	ldr	r3, [pc, #28]	@ (8001d30 <_sbrk+0x64>)
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4413      	add	r3, r2
 8001d1a:	4a05      	ldr	r2, [pc, #20]	@ (8001d30 <_sbrk+0x64>)
 8001d1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3718      	adds	r7, #24
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	24100000 	.word	0x24100000
 8001d2c:	00000400 	.word	0x00000400
 8001d30:	240004d8 	.word	0x240004d8
 8001d34:	24000630 	.word	0x24000630

08001d38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001d3c:	4b32      	ldr	r3, [pc, #200]	@ (8001e08 <SystemInit+0xd0>)
 8001d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d42:	4a31      	ldr	r2, [pc, #196]	@ (8001e08 <SystemInit+0xd0>)
 8001d44:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d48:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001d4c:	4b2f      	ldr	r3, [pc, #188]	@ (8001e0c <SystemInit+0xd4>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 030f 	and.w	r3, r3, #15
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d807      	bhi.n	8001d68 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001d58:	4b2c      	ldr	r3, [pc, #176]	@ (8001e0c <SystemInit+0xd4>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f023 030f 	bic.w	r3, r3, #15
 8001d60:	4a2a      	ldr	r2, [pc, #168]	@ (8001e0c <SystemInit+0xd4>)
 8001d62:	f043 0303 	orr.w	r3, r3, #3
 8001d66:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001d68:	4b29      	ldr	r3, [pc, #164]	@ (8001e10 <SystemInit+0xd8>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a28      	ldr	r2, [pc, #160]	@ (8001e10 <SystemInit+0xd8>)
 8001d6e:	f043 0301 	orr.w	r3, r3, #1
 8001d72:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001d74:	4b26      	ldr	r3, [pc, #152]	@ (8001e10 <SystemInit+0xd8>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001d7a:	4b25      	ldr	r3, [pc, #148]	@ (8001e10 <SystemInit+0xd8>)
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	4924      	ldr	r1, [pc, #144]	@ (8001e10 <SystemInit+0xd8>)
 8001d80:	4b24      	ldr	r3, [pc, #144]	@ (8001e14 <SystemInit+0xdc>)
 8001d82:	4013      	ands	r3, r2
 8001d84:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001d86:	4b21      	ldr	r3, [pc, #132]	@ (8001e0c <SystemInit+0xd4>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 030c 	and.w	r3, r3, #12
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d007      	beq.n	8001da2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001d92:	4b1e      	ldr	r3, [pc, #120]	@ (8001e0c <SystemInit+0xd4>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f023 030f 	bic.w	r3, r3, #15
 8001d9a:	4a1c      	ldr	r2, [pc, #112]	@ (8001e0c <SystemInit+0xd4>)
 8001d9c:	f043 0303 	orr.w	r3, r3, #3
 8001da0:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001da2:	4b1b      	ldr	r3, [pc, #108]	@ (8001e10 <SystemInit+0xd8>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001da8:	4b19      	ldr	r3, [pc, #100]	@ (8001e10 <SystemInit+0xd8>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001dae:	4b18      	ldr	r3, [pc, #96]	@ (8001e10 <SystemInit+0xd8>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001db4:	4b16      	ldr	r3, [pc, #88]	@ (8001e10 <SystemInit+0xd8>)
 8001db6:	4a18      	ldr	r2, [pc, #96]	@ (8001e18 <SystemInit+0xe0>)
 8001db8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001dba:	4b15      	ldr	r3, [pc, #84]	@ (8001e10 <SystemInit+0xd8>)
 8001dbc:	4a17      	ldr	r2, [pc, #92]	@ (8001e1c <SystemInit+0xe4>)
 8001dbe:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001dc0:	4b13      	ldr	r3, [pc, #76]	@ (8001e10 <SystemInit+0xd8>)
 8001dc2:	4a17      	ldr	r2, [pc, #92]	@ (8001e20 <SystemInit+0xe8>)
 8001dc4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001dc6:	4b12      	ldr	r3, [pc, #72]	@ (8001e10 <SystemInit+0xd8>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001dcc:	4b10      	ldr	r3, [pc, #64]	@ (8001e10 <SystemInit+0xd8>)
 8001dce:	4a14      	ldr	r2, [pc, #80]	@ (8001e20 <SystemInit+0xe8>)
 8001dd0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001dd2:	4b0f      	ldr	r3, [pc, #60]	@ (8001e10 <SystemInit+0xd8>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001dd8:	4b0d      	ldr	r3, [pc, #52]	@ (8001e10 <SystemInit+0xd8>)
 8001dda:	4a11      	ldr	r2, [pc, #68]	@ (8001e20 <SystemInit+0xe8>)
 8001ddc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001dde:	4b0c      	ldr	r3, [pc, #48]	@ (8001e10 <SystemInit+0xd8>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001de4:	4b0a      	ldr	r3, [pc, #40]	@ (8001e10 <SystemInit+0xd8>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a09      	ldr	r2, [pc, #36]	@ (8001e10 <SystemInit+0xd8>)
 8001dea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001dee:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001df0:	4b07      	ldr	r3, [pc, #28]	@ (8001e10 <SystemInit+0xd8>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001df6:	4b0b      	ldr	r3, [pc, #44]	@ (8001e24 <SystemInit+0xec>)
 8001df8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001dfc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001dfe:	bf00      	nop
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr
 8001e08:	e000ed00 	.word	0xe000ed00
 8001e0c:	52002000 	.word	0x52002000
 8001e10:	58024400 	.word	0x58024400
 8001e14:	eaf6ed7f 	.word	0xeaf6ed7f
 8001e18:	02020200 	.word	0x02020200
 8001e1c:	01ff0000 	.word	0x01ff0000
 8001e20:	01010280 	.word	0x01010280
 8001e24:	52004000 	.word	0x52004000

08001e28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e28:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e60 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001e2c:	f7ff ff84 	bl	8001d38 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e30:	480c      	ldr	r0, [pc, #48]	@ (8001e64 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e32:	490d      	ldr	r1, [pc, #52]	@ (8001e68 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e34:	4a0d      	ldr	r2, [pc, #52]	@ (8001e6c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e38:	e002      	b.n	8001e40 <LoopCopyDataInit>

08001e3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e3e:	3304      	adds	r3, #4

08001e40 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001e40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e44:	d3f9      	bcc.n	8001e3a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e46:	4a0a      	ldr	r2, [pc, #40]	@ (8001e70 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e48:	4c0a      	ldr	r4, [pc, #40]	@ (8001e74 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e4c:	e001      	b.n	8001e52 <LoopFillZerobss>

08001e4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e50:	3204      	adds	r2, #4

08001e52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e54:	d3fb      	bcc.n	8001e4e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001e56:	f007 ff25 	bl	8009ca4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e5a:	f7fe ff93 	bl	8000d84 <main>
  bx  lr
 8001e5e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e60:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001e64:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001e68:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 8001e6c:	0800d8a8 	.word	0x0800d8a8
  ldr r2, =_sbss
 8001e70:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 8001e74:	2400062c 	.word	0x2400062c

08001e78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e78:	e7fe      	b.n	8001e78 <ADC_IRQHandler>
	...

08001e7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e82:	2003      	movs	r0, #3
 8001e84:	f001 fcea 	bl	800385c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001e88:	f002 fd3e 	bl	8004908 <HAL_RCC_GetSysClockFreq>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	4b15      	ldr	r3, [pc, #84]	@ (8001ee4 <HAL_Init+0x68>)
 8001e90:	699b      	ldr	r3, [r3, #24]
 8001e92:	0a1b      	lsrs	r3, r3, #8
 8001e94:	f003 030f 	and.w	r3, r3, #15
 8001e98:	4913      	ldr	r1, [pc, #76]	@ (8001ee8 <HAL_Init+0x6c>)
 8001e9a:	5ccb      	ldrb	r3, [r1, r3]
 8001e9c:	f003 031f 	and.w	r3, r3, #31
 8001ea0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ea4:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001ea6:	4b0f      	ldr	r3, [pc, #60]	@ (8001ee4 <HAL_Init+0x68>)
 8001ea8:	699b      	ldr	r3, [r3, #24]
 8001eaa:	f003 030f 	and.w	r3, r3, #15
 8001eae:	4a0e      	ldr	r2, [pc, #56]	@ (8001ee8 <HAL_Init+0x6c>)
 8001eb0:	5cd3      	ldrb	r3, [r2, r3]
 8001eb2:	f003 031f 	and.w	r3, r3, #31
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	fa22 f303 	lsr.w	r3, r2, r3
 8001ebc:	4a0b      	ldr	r2, [pc, #44]	@ (8001eec <HAL_Init+0x70>)
 8001ebe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001ec0:	4a0b      	ldr	r2, [pc, #44]	@ (8001ef0 <HAL_Init+0x74>)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ec6:	2000      	movs	r0, #0
 8001ec8:	f000 f814 	bl	8001ef4 <HAL_InitTick>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e002      	b.n	8001edc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001ed6:	f7ff fc6d 	bl	80017b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001eda:	2300      	movs	r3, #0
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3708      	adds	r7, #8
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	58024400 	.word	0x58024400
 8001ee8:	0800d434 	.word	0x0800d434
 8001eec:	24000004 	.word	0x24000004
 8001ef0:	24000000 	.word	0x24000000

08001ef4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001efc:	4b15      	ldr	r3, [pc, #84]	@ (8001f54 <HAL_InitTick+0x60>)
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d101      	bne.n	8001f08 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e021      	b.n	8001f4c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001f08:	4b13      	ldr	r3, [pc, #76]	@ (8001f58 <HAL_InitTick+0x64>)
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	4b11      	ldr	r3, [pc, #68]	@ (8001f54 <HAL_InitTick+0x60>)
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	4619      	mov	r1, r3
 8001f12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f16:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f001 fcc1 	bl	80038a6 <HAL_SYSTICK_Config>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e00e      	b.n	8001f4c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2b0f      	cmp	r3, #15
 8001f32:	d80a      	bhi.n	8001f4a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f34:	2200      	movs	r2, #0
 8001f36:	6879      	ldr	r1, [r7, #4]
 8001f38:	f04f 30ff 	mov.w	r0, #4294967295
 8001f3c:	f001 fc99 	bl	8003872 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f40:	4a06      	ldr	r2, [pc, #24]	@ (8001f5c <HAL_InitTick+0x68>)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f46:	2300      	movs	r3, #0
 8001f48:	e000      	b.n	8001f4c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3708      	adds	r7, #8
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	2400000c 	.word	0x2400000c
 8001f58:	24000000 	.word	0x24000000
 8001f5c:	24000008 	.word	0x24000008

08001f60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f64:	4b06      	ldr	r3, [pc, #24]	@ (8001f80 <HAL_IncTick+0x20>)
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	461a      	mov	r2, r3
 8001f6a:	4b06      	ldr	r3, [pc, #24]	@ (8001f84 <HAL_IncTick+0x24>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4413      	add	r3, r2
 8001f70:	4a04      	ldr	r2, [pc, #16]	@ (8001f84 <HAL_IncTick+0x24>)
 8001f72:	6013      	str	r3, [r2, #0]
}
 8001f74:	bf00      	nop
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	2400000c 	.word	0x2400000c
 8001f84:	240004dc 	.word	0x240004dc

08001f88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f8c:	4b03      	ldr	r3, [pc, #12]	@ (8001f9c <HAL_GetTick+0x14>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	240004dc 	.word	0x240004dc

08001fa0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fa8:	f7ff ffee 	bl	8001f88 <HAL_GetTick>
 8001fac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fb8:	d005      	beq.n	8001fc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fba:	4b0a      	ldr	r3, [pc, #40]	@ (8001fe4 <HAL_Delay+0x44>)
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fc6:	bf00      	nop
 8001fc8:	f7ff ffde 	bl	8001f88 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	68fa      	ldr	r2, [r7, #12]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d8f7      	bhi.n	8001fc8 <HAL_Delay+0x28>
  {
  }
}
 8001fd8:	bf00      	nop
 8001fda:	bf00      	nop
 8001fdc:	3710      	adds	r7, #16
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	2400000c 	.word	0x2400000c

08001fe8 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8001ff2:	4b07      	ldr	r3, [pc, #28]	@ (8002010 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001ff4:	685a      	ldr	r2, [r3, #4]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	43db      	mvns	r3, r3
 8001ffa:	401a      	ands	r2, r3
 8001ffc:	4904      	ldr	r1, [pc, #16]	@ (8002010 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	4313      	orrs	r3, r2
 8002002:	604b      	str	r3, [r1, #4]
}
 8002004:	bf00      	nop
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr
 8002010:	58000400 	.word	0x58000400

08002014 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	431a      	orrs	r2, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	609a      	str	r2, [r3, #8]
}
 800202e:	bf00      	nop
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr

0800203a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800203a:	b480      	push	{r7}
 800203c:	b083      	sub	sp, #12
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
 8002042:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	431a      	orrs	r2, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	609a      	str	r2, [r3, #8]
}
 8002054:	bf00      	nop
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002070:	4618      	mov	r0, r3
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800207c:	b480      	push	{r7}
 800207e:	b087      	sub	sp, #28
 8002080:	af00      	add	r7, sp, #0
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	60b9      	str	r1, [r7, #8]
 8002086:	607a      	str	r2, [r7, #4]
 8002088:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	3360      	adds	r3, #96	@ 0x60
 800208e:	461a      	mov	r2, r3
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	4413      	add	r3, r2
 8002096:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	430b      	orrs	r3, r1
 80020aa:	431a      	orrs	r2, r3
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80020b0:	bf00      	nop
 80020b2:	371c      	adds	r7, #28
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80020bc:	b480      	push	{r7}
 80020be:	b085      	sub	sp, #20
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	60b9      	str	r1, [r7, #8]
 80020c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	691b      	ldr	r3, [r3, #16]
 80020cc:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	f003 031f 	and.w	r3, r3, #31
 80020d6:	6879      	ldr	r1, [r7, #4]
 80020d8:	fa01 f303 	lsl.w	r3, r1, r3
 80020dc:	431a      	orrs	r2, r3
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	611a      	str	r2, [r3, #16]
}
 80020e2:	bf00      	nop
 80020e4:	3714      	adds	r7, #20
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr

080020ee <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80020ee:	b480      	push	{r7}
 80020f0:	b087      	sub	sp, #28
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	60f8      	str	r0, [r7, #12]
 80020f6:	60b9      	str	r1, [r7, #8]
 80020f8:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	3360      	adds	r3, #96	@ 0x60
 80020fe:	461a      	mov	r2, r3
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	4413      	add	r3, r2
 8002106:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	431a      	orrs	r2, r3
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	601a      	str	r2, [r3, #0]
  }
}
 8002118:	bf00      	nop
 800211a:	371c      	adds	r7, #28
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002134:	2b00      	cmp	r3, #0
 8002136:	d101      	bne.n	800213c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002138:	2301      	movs	r3, #1
 800213a:	e000      	b.n	800213e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr

0800214a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800214a:	b480      	push	{r7}
 800214c:	b087      	sub	sp, #28
 800214e:	af00      	add	r7, sp, #0
 8002150:	60f8      	str	r0, [r7, #12]
 8002152:	60b9      	str	r1, [r7, #8]
 8002154:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	3330      	adds	r3, #48	@ 0x30
 800215a:	461a      	mov	r2, r3
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	0a1b      	lsrs	r3, r3, #8
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	f003 030c 	and.w	r3, r3, #12
 8002166:	4413      	add	r3, r2
 8002168:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	f003 031f 	and.w	r3, r3, #31
 8002174:	211f      	movs	r1, #31
 8002176:	fa01 f303 	lsl.w	r3, r1, r3
 800217a:	43db      	mvns	r3, r3
 800217c:	401a      	ands	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	0e9b      	lsrs	r3, r3, #26
 8002182:	f003 011f 	and.w	r1, r3, #31
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	f003 031f 	and.w	r3, r3, #31
 800218c:	fa01 f303 	lsl.w	r3, r1, r3
 8002190:	431a      	orrs	r2, r3
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002196:	bf00      	nop
 8002198:	371c      	adds	r7, #28
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr

080021a2 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80021a2:	b480      	push	{r7}
 80021a4:	b087      	sub	sp, #28
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	60f8      	str	r0, [r7, #12]
 80021aa:	60b9      	str	r1, [r7, #8]
 80021ac:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	3314      	adds	r3, #20
 80021b2:	461a      	mov	r2, r3
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	0e5b      	lsrs	r3, r3, #25
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	f003 0304 	and.w	r3, r3, #4
 80021be:	4413      	add	r3, r2
 80021c0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	0d1b      	lsrs	r3, r3, #20
 80021ca:	f003 031f 	and.w	r3, r3, #31
 80021ce:	2107      	movs	r1, #7
 80021d0:	fa01 f303 	lsl.w	r3, r1, r3
 80021d4:	43db      	mvns	r3, r3
 80021d6:	401a      	ands	r2, r3
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	0d1b      	lsrs	r3, r3, #20
 80021dc:	f003 031f 	and.w	r3, r3, #31
 80021e0:	6879      	ldr	r1, [r7, #4]
 80021e2:	fa01 f303 	lsl.w	r3, r1, r3
 80021e6:	431a      	orrs	r2, r3
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80021ec:	bf00      	nop
 80021ee:	371c      	adds	r7, #28
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b085      	sub	sp, #20
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	60b9      	str	r1, [r7, #8]
 8002202:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002210:	43db      	mvns	r3, r3
 8002212:	401a      	ands	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f003 0318 	and.w	r3, r3, #24
 800221a:	4908      	ldr	r1, [pc, #32]	@ (800223c <LL_ADC_SetChannelSingleDiff+0x44>)
 800221c:	40d9      	lsrs	r1, r3
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	400b      	ands	r3, r1
 8002222:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002226:	431a      	orrs	r2, r3
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800222e:	bf00      	nop
 8002230:	3714      	adds	r7, #20
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	000fffff 	.word	0x000fffff

08002240 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f003 031f 	and.w	r3, r3, #31
}
 8002250:	4618      	mov	r0, r3
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 800226c:	4618      	mov	r0, r3
 800226e:	370c      	adds	r7, #12
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	689a      	ldr	r2, [r3, #8]
 8002284:	4b04      	ldr	r3, [pc, #16]	@ (8002298 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002286:	4013      	ands	r3, r2
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	6093      	str	r3, [r2, #8]
}
 800228c:	bf00      	nop
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr
 8002298:	5fffffc0 	.word	0x5fffffc0

0800229c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80022ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80022b0:	d101      	bne.n	80022b6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80022b2:	2301      	movs	r3, #1
 80022b4:	e000      	b.n	80022b8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80022b6:	2300      	movs	r3, #0
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	689a      	ldr	r2, [r3, #8]
 80022d0:	4b05      	ldr	r3, [pc, #20]	@ (80022e8 <LL_ADC_EnableInternalRegulator+0x24>)
 80022d2:	4013      	ands	r3, r2
 80022d4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80022dc:	bf00      	nop
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr
 80022e8:	6fffffc0 	.word	0x6fffffc0

080022ec <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002300:	d101      	bne.n	8002306 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002302:	2301      	movs	r3, #1
 8002304:	e000      	b.n	8002308 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002306:	2300      	movs	r3, #0
}
 8002308:	4618      	mov	r0, r3
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	689a      	ldr	r2, [r3, #8]
 8002320:	4b05      	ldr	r3, [pc, #20]	@ (8002338 <LL_ADC_Enable+0x24>)
 8002322:	4013      	ands	r3, r2
 8002324:	f043 0201 	orr.w	r2, r3, #1
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800232c:	bf00      	nop
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr
 8002338:	7fffffc0 	.word	0x7fffffc0

0800233c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	689a      	ldr	r2, [r3, #8]
 8002348:	4b05      	ldr	r3, [pc, #20]	@ (8002360 <LL_ADC_Disable+0x24>)
 800234a:	4013      	ands	r3, r2
 800234c:	f043 0202 	orr.w	r2, r3, #2
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002354:	bf00      	nop
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr
 8002360:	7fffffc0 	.word	0x7fffffc0

08002364 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	f003 0301 	and.w	r3, r3, #1
 8002374:	2b01      	cmp	r3, #1
 8002376:	d101      	bne.n	800237c <LL_ADC_IsEnabled+0x18>
 8002378:	2301      	movs	r3, #1
 800237a:	e000      	b.n	800237e <LL_ADC_IsEnabled+0x1a>
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	370c      	adds	r7, #12
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr

0800238a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800238a:	b480      	push	{r7}
 800238c:	b083      	sub	sp, #12
 800238e:	af00      	add	r7, sp, #0
 8002390:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	2b02      	cmp	r3, #2
 800239c:	d101      	bne.n	80023a2 <LL_ADC_IsDisableOngoing+0x18>
 800239e:	2301      	movs	r3, #1
 80023a0:	e000      	b.n	80023a4 <LL_ADC_IsDisableOngoing+0x1a>
 80023a2:	2300      	movs	r3, #0
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	689a      	ldr	r2, [r3, #8]
 80023bc:	4b05      	ldr	r3, [pc, #20]	@ (80023d4 <LL_ADC_REG_StartConversion+0x24>)
 80023be:	4013      	ands	r3, r2
 80023c0:	f043 0204 	orr.w	r2, r3, #4
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80023c8:	bf00      	nop
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr
 80023d4:	7fffffc0 	.word	0x7fffffc0

080023d8 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	689a      	ldr	r2, [r3, #8]
 80023e4:	4b05      	ldr	r3, [pc, #20]	@ (80023fc <LL_ADC_REG_StopConversion+0x24>)
 80023e6:	4013      	ands	r3, r2
 80023e8:	f043 0210 	orr.w	r2, r3, #16
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80023f0:	bf00      	nop
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr
 80023fc:	7fffffc0 	.word	0x7fffffc0

08002400 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f003 0304 	and.w	r3, r3, #4
 8002410:	2b04      	cmp	r3, #4
 8002412:	d101      	bne.n	8002418 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002414:	2301      	movs	r3, #1
 8002416:	e000      	b.n	800241a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	370c      	adds	r7, #12
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
	...

08002428 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	689a      	ldr	r2, [r3, #8]
 8002434:	4b05      	ldr	r3, [pc, #20]	@ (800244c <LL_ADC_INJ_StopConversion+0x24>)
 8002436:	4013      	ands	r3, r2
 8002438:	f043 0220 	orr.w	r2, r3, #32
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002440:	bf00      	nop
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr
 800244c:	7fffffc0 	.word	0x7fffffc0

08002450 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	f003 0308 	and.w	r3, r3, #8
 8002460:	2b08      	cmp	r3, #8
 8002462:	d101      	bne.n	8002468 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002464:	2301      	movs	r3, #1
 8002466:	e000      	b.n	800246a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	370c      	adds	r7, #12
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
	...

08002478 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002478:	b590      	push	{r4, r7, lr}
 800247a:	b089      	sub	sp, #36	@ 0x24
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002480:	2300      	movs	r3, #0
 8002482:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002484:	2300      	movs	r3, #0
 8002486:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d101      	bne.n	8002492 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e138      	b.n	8002704 <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800249c:	2b00      	cmp	r3, #0
 800249e:	d109      	bne.n	80024b4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f7ff f9a1 	bl	80017e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7ff feef 	bl	800229c <LL_ADC_IsDeepPowerDownEnabled>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d004      	beq.n	80024ce <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7ff fed5 	bl	8002278 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7ff ff0a 	bl	80022ec <LL_ADC_IsInternalRegulatorEnabled>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d114      	bne.n	8002508 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7ff feee 	bl	80022c4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80024e8:	4b88      	ldr	r3, [pc, #544]	@ (800270c <HAL_ADC_Init+0x294>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	099b      	lsrs	r3, r3, #6
 80024ee:	4a88      	ldr	r2, [pc, #544]	@ (8002710 <HAL_ADC_Init+0x298>)
 80024f0:	fba2 2303 	umull	r2, r3, r2, r3
 80024f4:	099b      	lsrs	r3, r3, #6
 80024f6:	3301      	adds	r3, #1
 80024f8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80024fa:	e002      	b.n	8002502 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	3b01      	subs	r3, #1
 8002500:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d1f9      	bne.n	80024fc <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4618      	mov	r0, r3
 800250e:	f7ff feed 	bl	80022ec <LL_ADC_IsInternalRegulatorEnabled>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d10d      	bne.n	8002534 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800251c:	f043 0210 	orr.w	r2, r3, #16
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002528:	f043 0201 	orr.w	r2, r3, #1
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4618      	mov	r0, r3
 800253a:	f7ff ff61 	bl	8002400 <LL_ADC_REG_IsConversionOngoing>
 800253e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002544:	f003 0310 	and.w	r3, r3, #16
 8002548:	2b00      	cmp	r3, #0
 800254a:	f040 80d2 	bne.w	80026f2 <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	2b00      	cmp	r3, #0
 8002552:	f040 80ce 	bne.w	80026f2 <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800255a:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800255e:	f043 0202 	orr.w	r2, r3, #2
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4618      	mov	r0, r3
 800256c:	f7ff fefa 	bl	8002364 <LL_ADC_IsEnabled>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d110      	bne.n	8002598 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002576:	4867      	ldr	r0, [pc, #412]	@ (8002714 <HAL_ADC_Init+0x29c>)
 8002578:	f7ff fef4 	bl	8002364 <LL_ADC_IsEnabled>
 800257c:	4604      	mov	r4, r0
 800257e:	4866      	ldr	r0, [pc, #408]	@ (8002718 <HAL_ADC_Init+0x2a0>)
 8002580:	f7ff fef0 	bl	8002364 <LL_ADC_IsEnabled>
 8002584:	4603      	mov	r3, r0
 8002586:	4323      	orrs	r3, r4
 8002588:	2b00      	cmp	r3, #0
 800258a:	d105      	bne.n	8002598 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	4619      	mov	r1, r3
 8002592:	4862      	ldr	r0, [pc, #392]	@ (800271c <HAL_ADC_Init+0x2a4>)
 8002594:	f7ff fd3e 	bl	8002014 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	7d5b      	ldrb	r3, [r3, #21]
 800259c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80025a2:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 80025a8:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	7f1b      	ldrb	r3, [r3, #28]
 80025ae:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80025b0:	4313      	orrs	r3, r2
 80025b2:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	7f1b      	ldrb	r3, [r3, #28]
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d106      	bne.n	80025ca <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6a1b      	ldr	r3, [r3, #32]
 80025c0:	3b01      	subs	r3, #1
 80025c2:	045b      	lsls	r3, r3, #17
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d009      	beq.n	80025e6 <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d6:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025de:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	68da      	ldr	r2, [r3, #12]
 80025ec:	4b4c      	ldr	r3, [pc, #304]	@ (8002720 <HAL_ADC_Init+0x2a8>)
 80025ee:	4013      	ands	r3, r2
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	6812      	ldr	r2, [r2, #0]
 80025f4:	69b9      	ldr	r1, [r7, #24]
 80025f6:	430b      	orrs	r3, r1
 80025f8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4618      	mov	r0, r3
 8002600:	f7ff fefe 	bl	8002400 <LL_ADC_REG_IsConversionOngoing>
 8002604:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4618      	mov	r0, r3
 800260c:	f7ff ff20 	bl	8002450 <LL_ADC_INJ_IsConversionOngoing>
 8002610:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d14a      	bne.n	80026ae <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d147      	bne.n	80026ae <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	7d1b      	ldrb	r3, [r3, #20]
 8002622:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8002628:	4313      	orrs	r3, r2
 800262a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	68da      	ldr	r2, [r3, #12]
 8002632:	4b3c      	ldr	r3, [pc, #240]	@ (8002724 <HAL_ADC_Init+0x2ac>)
 8002634:	4013      	ands	r3, r2
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	6812      	ldr	r2, [r2, #0]
 800263a:	69b9      	ldr	r1, [r7, #24]
 800263c:	430b      	orrs	r3, r1
 800263e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002646:	2b01      	cmp	r3, #1
 8002648:	d11b      	bne.n	8002682 <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800264e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	691a      	ldr	r2, [r3, #16]
 8002656:	4b34      	ldr	r3, [pc, #208]	@ (8002728 <HAL_ADC_Init+0x2b0>)
 8002658:	4013      	ands	r3, r2
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800265e:	3a01      	subs	r2, #1
 8002660:	0411      	lsls	r1, r2, #16
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002666:	4311      	orrs	r1, r2
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800266c:	4311      	orrs	r1, r2
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002672:	430a      	orrs	r2, r1
 8002674:	431a      	orrs	r2, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f042 0201 	orr.w	r2, r2, #1
 800267e:	611a      	str	r2, [r3, #16]
 8002680:	e007      	b.n	8002692 <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	691a      	ldr	r2, [r3, #16]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f022 0201 	bic.w	r2, r2, #1
 8002690:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	691b      	ldr	r3, [r3, #16]
 8002698:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	430a      	orrs	r2, r1
 80026a6:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f000 fe95 	bl	80033d8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d10c      	bne.n	80026d0 <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026bc:	f023 010f 	bic.w	r1, r3, #15
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	699b      	ldr	r3, [r3, #24]
 80026c4:	1e5a      	subs	r2, r3, #1
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	430a      	orrs	r2, r1
 80026cc:	631a      	str	r2, [r3, #48]	@ 0x30
 80026ce:	e007      	b.n	80026e0 <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f022 020f 	bic.w	r2, r2, #15
 80026de:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026e4:	f023 0303 	bic.w	r3, r3, #3
 80026e8:	f043 0201 	orr.w	r2, r3, #1
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	655a      	str	r2, [r3, #84]	@ 0x54
 80026f0:	e007      	b.n	8002702 <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026f6:	f043 0210 	orr.w	r2, r3, #16
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002702:	7ffb      	ldrb	r3, [r7, #31]
}
 8002704:	4618      	mov	r0, r3
 8002706:	3724      	adds	r7, #36	@ 0x24
 8002708:	46bd      	mov	sp, r7
 800270a:	bd90      	pop	{r4, r7, pc}
 800270c:	24000000 	.word	0x24000000
 8002710:	053e2d63 	.word	0x053e2d63
 8002714:	40022000 	.word	0x40022000
 8002718:	40022100 	.word	0x40022100
 800271c:	40022300 	.word	0x40022300
 8002720:	fff0c003 	.word	0xfff0c003
 8002724:	ffffbffc 	.word	0xffffbffc
 8002728:	fc00f81e 	.word	0xfc00f81e

0800272c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b086      	sub	sp, #24
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002734:	4856      	ldr	r0, [pc, #344]	@ (8002890 <HAL_ADC_Start+0x164>)
 8002736:	f7ff fd83 	bl	8002240 <LL_ADC_GetMultimode>
 800273a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4618      	mov	r0, r3
 8002742:	f7ff fe5d 	bl	8002400 <LL_ADC_REG_IsConversionOngoing>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	f040 809a 	bne.w	8002882 <HAL_ADC_Start+0x156>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002754:	2b01      	cmp	r3, #1
 8002756:	d101      	bne.n	800275c <HAL_ADC_Start+0x30>
 8002758:	2302      	movs	r3, #2
 800275a:	e095      	b.n	8002888 <HAL_ADC_Start+0x15c>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2201      	movs	r2, #1
 8002760:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f000 fd5b 	bl	8003220 <ADC_Enable>
 800276a:	4603      	mov	r3, r0
 800276c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800276e:	7dfb      	ldrb	r3, [r7, #23]
 8002770:	2b00      	cmp	r3, #0
 8002772:	f040 8081 	bne.w	8002878 <HAL_ADC_Start+0x14c>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800277a:	4b46      	ldr	r3, [pc, #280]	@ (8002894 <HAL_ADC_Start+0x168>)
 800277c:	4013      	ands	r3, r2
 800277e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a43      	ldr	r2, [pc, #268]	@ (8002898 <HAL_ADC_Start+0x16c>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d002      	beq.n	8002796 <HAL_ADC_Start+0x6a>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	e000      	b.n	8002798 <HAL_ADC_Start+0x6c>
 8002796:	4b41      	ldr	r3, [pc, #260]	@ (800289c <HAL_ADC_Start+0x170>)
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	6812      	ldr	r2, [r2, #0]
 800279c:	4293      	cmp	r3, r2
 800279e:	d002      	beq.n	80027a6 <HAL_ADC_Start+0x7a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d105      	bne.n	80027b2 <HAL_ADC_Start+0x86>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027aa:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027be:	d106      	bne.n	80027ce <HAL_ADC_Start+0xa2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027c4:	f023 0206 	bic.w	r2, r3, #6
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	659a      	str	r2, [r3, #88]	@ 0x58
 80027cc:	e002      	b.n	80027d4 <HAL_ADC_Start+0xa8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	221c      	movs	r2, #28
 80027da:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a2b      	ldr	r2, [pc, #172]	@ (8002898 <HAL_ADC_Start+0x16c>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d002      	beq.n	80027f4 <HAL_ADC_Start+0xc8>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	e000      	b.n	80027f6 <HAL_ADC_Start+0xca>
 80027f4:	4b29      	ldr	r3, [pc, #164]	@ (800289c <HAL_ADC_Start+0x170>)
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	6812      	ldr	r2, [r2, #0]
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d008      	beq.n	8002810 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d005      	beq.n	8002810 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	2b05      	cmp	r3, #5
 8002808:	d002      	beq.n	8002810 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	2b09      	cmp	r3, #9
 800280e:	d114      	bne.n	800283a <HAL_ADC_Start+0x10e>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d007      	beq.n	800282e <HAL_ADC_Start+0x102>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002822:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002826:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4618      	mov	r0, r3
 8002834:	f7ff fdbc 	bl	80023b0 <LL_ADC_REG_StartConversion>
 8002838:	e025      	b.n	8002886 <HAL_ADC_Start+0x15a>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800283e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a13      	ldr	r2, [pc, #76]	@ (8002898 <HAL_ADC_Start+0x16c>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d002      	beq.n	8002856 <HAL_ADC_Start+0x12a>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	e000      	b.n	8002858 <HAL_ADC_Start+0x12c>
 8002856:	4b11      	ldr	r3, [pc, #68]	@ (800289c <HAL_ADC_Start+0x170>)
 8002858:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d00f      	beq.n	8002886 <HAL_ADC_Start+0x15a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800286a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800286e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	655a      	str	r2, [r3, #84]	@ 0x54
 8002876:	e006      	b.n	8002886 <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002880:	e001      	b.n	8002886 <HAL_ADC_Start+0x15a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002882:	2302      	movs	r3, #2
 8002884:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002886:	7dfb      	ldrb	r3, [r7, #23]
}
 8002888:	4618      	mov	r0, r3
 800288a:	3718      	adds	r7, #24
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	40022300 	.word	0x40022300
 8002894:	fffff0fe 	.word	0xfffff0fe
 8002898:	40022100 	.word	0x40022100
 800289c:	40022000 	.word	0x40022000

080028a0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d101      	bne.n	80028b6 <HAL_ADC_Stop+0x16>
 80028b2:	2302      	movs	r3, #2
 80028b4:	e021      	b.n	80028fa <HAL_ADC_Stop+0x5a>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2201      	movs	r2, #1
 80028ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80028be:	2103      	movs	r1, #3
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f000 fbf1 	bl	80030a8 <ADC_ConversionStop>
 80028c6:	4603      	mov	r3, r0
 80028c8:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80028ca:	7bfb      	ldrb	r3, [r7, #15]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d10f      	bne.n	80028f0 <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f000 fd21 	bl	8003318 <ADC_Disable>
 80028d6:	4603      	mov	r3, r0
 80028d8:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80028da:	7bfb      	ldrb	r3, [r7, #15]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d107      	bne.n	80028f0 <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80028e4:	4b07      	ldr	r3, [pc, #28]	@ (8002904 <HAL_ADC_Stop+0x64>)
 80028e6:	4013      	ands	r3, r2
 80028e8:	f043 0201 	orr.w	r2, r3, #1
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80028f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3710      	adds	r7, #16
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	ffffeefe 	.word	0xffffeefe

08002908 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b088      	sub	sp, #32
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002912:	4866      	ldr	r0, [pc, #408]	@ (8002aac <HAL_ADC_PollForConversion+0x1a4>)
 8002914:	f7ff fc94 	bl	8002240 <LL_ADC_GetMultimode>
 8002918:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	2b08      	cmp	r3, #8
 8002920:	d102      	bne.n	8002928 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002922:	2308      	movs	r3, #8
 8002924:	61fb      	str	r3, [r7, #28]
 8002926:	e02a      	b.n	800297e <HAL_ADC_PollForConversion+0x76>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d005      	beq.n	800293a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	2b05      	cmp	r3, #5
 8002932:	d002      	beq.n	800293a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	2b09      	cmp	r3, #9
 8002938:	d111      	bne.n	800295e <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	f003 0301 	and.w	r3, r3, #1
 8002944:	2b00      	cmp	r3, #0
 8002946:	d007      	beq.n	8002958 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800294c:	f043 0220 	orr.w	r2, r3, #32
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e0a4      	b.n	8002aa2 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002958:	2304      	movs	r3, #4
 800295a:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 800295c:	e00f      	b.n	800297e <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800295e:	4853      	ldr	r0, [pc, #332]	@ (8002aac <HAL_ADC_PollForConversion+0x1a4>)
 8002960:	f7ff fc7c 	bl	800225c <LL_ADC_GetMultiDMATransfer>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d007      	beq.n	800297a <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800296e:	f043 0220 	orr.w	r2, r3, #32
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e093      	b.n	8002aa2 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800297a:	2304      	movs	r3, #4
 800297c:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800297e:	f7ff fb03 	bl	8001f88 <HAL_GetTick>
 8002982:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002984:	e021      	b.n	80029ca <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800298c:	d01d      	beq.n	80029ca <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800298e:	f7ff fafb 	bl	8001f88 <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	683a      	ldr	r2, [r7, #0]
 800299a:	429a      	cmp	r2, r3
 800299c:	d302      	bcc.n	80029a4 <HAL_ADC_PollForConversion+0x9c>
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d112      	bne.n	80029ca <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	4013      	ands	r3, r2
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d10b      	bne.n	80029ca <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029b6:	f043 0204 	orr.w	r2, r3, #4
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e06b      	b.n	8002aa2 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	4013      	ands	r3, r2
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d0d6      	beq.n	8002986 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029dc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4618      	mov	r0, r3
 80029ea:	f7ff fb9b 	bl	8002124 <LL_ADC_REG_IsTriggerSourceSWStart>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d01c      	beq.n	8002a2e <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	7d5b      	ldrb	r3, [r3, #21]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d118      	bne.n	8002a2e <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0308 	and.w	r3, r3, #8
 8002a06:	2b08      	cmp	r3, #8
 8002a08:	d111      	bne.n	8002a2e <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a0e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a1a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d105      	bne.n	8002a2e <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a26:	f043 0201 	orr.w	r2, r3, #1
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a1f      	ldr	r2, [pc, #124]	@ (8002ab0 <HAL_ADC_PollForConversion+0x1a8>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d002      	beq.n	8002a3e <HAL_ADC_PollForConversion+0x136>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	e000      	b.n	8002a40 <HAL_ADC_PollForConversion+0x138>
 8002a3e:	4b1d      	ldr	r3, [pc, #116]	@ (8002ab4 <HAL_ADC_PollForConversion+0x1ac>)
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	6812      	ldr	r2, [r2, #0]
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d008      	beq.n	8002a5a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d005      	beq.n	8002a5a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	2b05      	cmp	r3, #5
 8002a52:	d002      	beq.n	8002a5a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	2b09      	cmp	r3, #9
 8002a58:	d104      	bne.n	8002a64 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	61bb      	str	r3, [r7, #24]
 8002a62:	e00c      	b.n	8002a7e <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a11      	ldr	r2, [pc, #68]	@ (8002ab0 <HAL_ADC_PollForConversion+0x1a8>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d002      	beq.n	8002a74 <HAL_ADC_PollForConversion+0x16c>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	e000      	b.n	8002a76 <HAL_ADC_PollForConversion+0x16e>
 8002a74:	4b0f      	ldr	r3, [pc, #60]	@ (8002ab4 <HAL_ADC_PollForConversion+0x1ac>)
 8002a76:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	2b08      	cmp	r3, #8
 8002a82:	d104      	bne.n	8002a8e <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	2208      	movs	r2, #8
 8002a8a:	601a      	str	r2, [r3, #0]
 8002a8c:	e008      	b.n	8002aa0 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d103      	bne.n	8002aa0 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	220c      	movs	r2, #12
 8002a9e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002aa0:	2300      	movs	r3, #0
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3720      	adds	r7, #32
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	40022300 	.word	0x40022300
 8002ab0:	40022100 	.word	0x40022100
 8002ab4:	40022000 	.word	0x40022000

08002ab8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	370c      	adds	r7, #12
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr
	...

08002ad4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002ad4:	b590      	push	{r4, r7, lr}
 8002ad6:	b0a1      	sub	sp, #132	@ 0x84
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	4a95      	ldr	r2, [pc, #596]	@ (8002d44 <HAL_ADC_ConfigChannel+0x270>)
 8002aee:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d101      	bne.n	8002afe <HAL_ADC_ConfigChannel+0x2a>
 8002afa:	2302      	movs	r3, #2
 8002afc:	e2c0      	b.n	8003080 <HAL_ADC_ConfigChannel+0x5ac>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2201      	movs	r2, #1
 8002b02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7ff fc78 	bl	8002400 <LL_ADC_REG_IsConversionOngoing>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	f040 82a5 	bne.w	8003062 <HAL_ADC_ConfigChannel+0x58e>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	db2c      	blt.n	8002b7a <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d108      	bne.n	8002b3e <HAL_ADC_ConfigChannel+0x6a>
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	0e9b      	lsrs	r3, r3, #26
 8002b32:	f003 031f 	and.w	r3, r3, #31
 8002b36:	2201      	movs	r2, #1
 8002b38:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3c:	e016      	b.n	8002b6c <HAL_ADC_ConfigChannel+0x98>
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b44:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002b46:	fa93 f3a3 	rbit	r3, r3
 8002b4a:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002b4c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002b4e:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002b50:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d101      	bne.n	8002b5a <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8002b56:	2320      	movs	r3, #32
 8002b58:	e003      	b.n	8002b62 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8002b5a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002b5c:	fab3 f383 	clz	r3, r3
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	f003 031f 	and.w	r3, r3, #31
 8002b66:	2201      	movs	r2, #1
 8002b68:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	6812      	ldr	r2, [r2, #0]
 8002b70:	69d1      	ldr	r1, [r2, #28]
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	6812      	ldr	r2, [r2, #0]
 8002b76:	430b      	orrs	r3, r1
 8002b78:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6818      	ldr	r0, [r3, #0]
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	6859      	ldr	r1, [r3, #4]
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	461a      	mov	r2, r3
 8002b88:	f7ff fadf 	bl	800214a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4618      	mov	r0, r3
 8002b92:	f7ff fc35 	bl	8002400 <LL_ADC_REG_IsConversionOngoing>
 8002b96:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7ff fc57 	bl	8002450 <LL_ADC_INJ_IsConversionOngoing>
 8002ba2:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ba4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	f040 80a0 	bne.w	8002cec <HAL_ADC_ConfigChannel+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002bac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	f040 809c 	bne.w	8002cec <HAL_ADC_ConfigChannel+0x218>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6818      	ldr	r0, [r3, #0]
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	6819      	ldr	r1, [r3, #0]
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	f7ff faee 	bl	80021a2 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	f003 0310 	and.w	r3, r3, #16
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d10b      	bne.n	8002bec <HAL_ADC_ConfigChannel+0x118>
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	695a      	ldr	r2, [r3, #20]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	089b      	lsrs	r3, r3, #2
 8002be0:	f003 0307 	and.w	r3, r3, #7
 8002be4:	005b      	lsls	r3, r3, #1
 8002be6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bea:	e00a      	b.n	8002c02 <HAL_ADC_ConfigChannel+0x12e>
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	695a      	ldr	r2, [r3, #20]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	089b      	lsrs	r3, r3, #2
 8002bf8:	f003 0304 	and.w	r3, r3, #4
 8002bfc:	005b      	lsls	r3, r3, #1
 8002bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002c02:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	691b      	ldr	r3, [r3, #16]
 8002c08:	2b04      	cmp	r3, #4
 8002c0a:	d027      	beq.n	8002c5c <HAL_ADC_ConfigChannel+0x188>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6818      	ldr	r0, [r3, #0]
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	6919      	ldr	r1, [r3, #16]
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002c1a:	f7ff fa2f 	bl	800207c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6818      	ldr	r0, [r3, #0]
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	6919      	ldr	r1, [r3, #16]
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	7e5b      	ldrb	r3, [r3, #25]
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d102      	bne.n	8002c34 <HAL_ADC_ConfigChannel+0x160>
 8002c2e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002c32:	e000      	b.n	8002c36 <HAL_ADC_ConfigChannel+0x162>
 8002c34:	2300      	movs	r3, #0
 8002c36:	461a      	mov	r2, r3
 8002c38:	f7ff fa59 	bl	80020ee <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6818      	ldr	r0, [r3, #0]
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	6919      	ldr	r1, [r3, #16]
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	7e1b      	ldrb	r3, [r3, #24]
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d102      	bne.n	8002c52 <HAL_ADC_ConfigChannel+0x17e>
 8002c4c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002c50:	e000      	b.n	8002c54 <HAL_ADC_ConfigChannel+0x180>
 8002c52:	2300      	movs	r3, #0
 8002c54:	461a      	mov	r2, r3
 8002c56:	f7ff fa31 	bl	80020bc <LL_ADC_SetDataRightShift>
 8002c5a:	e047      	b.n	8002cec <HAL_ADC_ConfigChannel+0x218>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c62:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	069b      	lsls	r3, r3, #26
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d107      	bne.n	8002c80 <HAL_ADC_ConfigChannel+0x1ac>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002c7e:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002c86:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	069b      	lsls	r3, r3, #26
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d107      	bne.n	8002ca4 <HAL_ADC_ConfigChannel+0x1d0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002ca2:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002caa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	069b      	lsls	r3, r3, #26
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d107      	bne.n	8002cc8 <HAL_ADC_ConfigChannel+0x1f4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002cc6:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002cce:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	069b      	lsls	r3, r3, #26
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d107      	bne.n	8002cec <HAL_ADC_ConfigChannel+0x218>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002cea:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7ff fb37 	bl	8002364 <LL_ADC_IsEnabled>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	f040 81bb 	bne.w	8003074 <HAL_ADC_ConfigChannel+0x5a0>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6818      	ldr	r0, [r3, #0]
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	6819      	ldr	r1, [r3, #0]
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	f7ff fa74 	bl	80021f8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	4a0b      	ldr	r2, [pc, #44]	@ (8002d44 <HAL_ADC_ConfigChannel+0x270>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	f040 8130 	bne.w	8002f7c <HAL_ADC_ConfigChannel+0x4a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d10d      	bne.n	8002d48 <HAL_ADC_ConfigChannel+0x274>
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	0e9b      	lsrs	r3, r3, #26
 8002d32:	3301      	adds	r3, #1
 8002d34:	f003 031f 	and.w	r3, r3, #31
 8002d38:	2b09      	cmp	r3, #9
 8002d3a:	bf94      	ite	ls
 8002d3c:	2301      	movls	r3, #1
 8002d3e:	2300      	movhi	r3, #0
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	e01b      	b.n	8002d7c <HAL_ADC_ConfigChannel+0x2a8>
 8002d44:	47ff0000 	.word	0x47ff0000
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d4e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002d50:	fa93 f3a3 	rbit	r3, r3
 8002d54:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002d56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d58:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002d5a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d101      	bne.n	8002d64 <HAL_ADC_ConfigChannel+0x290>
    return 32U;
 8002d60:	2320      	movs	r3, #32
 8002d62:	e003      	b.n	8002d6c <HAL_ADC_ConfigChannel+0x298>
  return __builtin_clz(value);
 8002d64:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d66:	fab3 f383 	clz	r3, r3
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	f003 031f 	and.w	r3, r3, #31
 8002d72:	2b09      	cmp	r3, #9
 8002d74:	bf94      	ite	ls
 8002d76:	2301      	movls	r3, #1
 8002d78:	2300      	movhi	r3, #0
 8002d7a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d079      	beq.n	8002e74 <HAL_ADC_ConfigChannel+0x3a0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d107      	bne.n	8002d9c <HAL_ADC_ConfigChannel+0x2c8>
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	0e9b      	lsrs	r3, r3, #26
 8002d92:	3301      	adds	r3, #1
 8002d94:	069b      	lsls	r3, r3, #26
 8002d96:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d9a:	e015      	b.n	8002dc8 <HAL_ADC_ConfigChannel+0x2f4>
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002da4:	fa93 f3a3 	rbit	r3, r3
 8002da8:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002daa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002dac:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002dae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d101      	bne.n	8002db8 <HAL_ADC_ConfigChannel+0x2e4>
    return 32U;
 8002db4:	2320      	movs	r3, #32
 8002db6:	e003      	b.n	8002dc0 <HAL_ADC_ConfigChannel+0x2ec>
  return __builtin_clz(value);
 8002db8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002dba:	fab3 f383 	clz	r3, r3
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	069b      	lsls	r3, r3, #26
 8002dc4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d109      	bne.n	8002de8 <HAL_ADC_ConfigChannel+0x314>
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	0e9b      	lsrs	r3, r3, #26
 8002dda:	3301      	adds	r3, #1
 8002ddc:	f003 031f 	and.w	r3, r3, #31
 8002de0:	2101      	movs	r1, #1
 8002de2:	fa01 f303 	lsl.w	r3, r1, r3
 8002de6:	e017      	b.n	8002e18 <HAL_ADC_ConfigChannel+0x344>
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002df0:	fa93 f3a3 	rbit	r3, r3
 8002df4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002df6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002df8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002dfa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d101      	bne.n	8002e04 <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 8002e00:	2320      	movs	r3, #32
 8002e02:	e003      	b.n	8002e0c <HAL_ADC_ConfigChannel+0x338>
  return __builtin_clz(value);
 8002e04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e06:	fab3 f383 	clz	r3, r3
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	f003 031f 	and.w	r3, r3, #31
 8002e12:	2101      	movs	r1, #1
 8002e14:	fa01 f303 	lsl.w	r3, r1, r3
 8002e18:	ea42 0103 	orr.w	r1, r2, r3
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d10a      	bne.n	8002e3e <HAL_ADC_ConfigChannel+0x36a>
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	0e9b      	lsrs	r3, r3, #26
 8002e2e:	3301      	adds	r3, #1
 8002e30:	f003 021f 	and.w	r2, r3, #31
 8002e34:	4613      	mov	r3, r2
 8002e36:	005b      	lsls	r3, r3, #1
 8002e38:	4413      	add	r3, r2
 8002e3a:	051b      	lsls	r3, r3, #20
 8002e3c:	e018      	b.n	8002e70 <HAL_ADC_ConfigChannel+0x39c>
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e46:	fa93 f3a3 	rbit	r3, r3
 8002e4a:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002e4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e4e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002e50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d101      	bne.n	8002e5a <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8002e56:	2320      	movs	r3, #32
 8002e58:	e003      	b.n	8002e62 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8002e5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e5c:	fab3 f383 	clz	r3, r3
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	3301      	adds	r3, #1
 8002e64:	f003 021f 	and.w	r2, r3, #31
 8002e68:	4613      	mov	r3, r2
 8002e6a:	005b      	lsls	r3, r3, #1
 8002e6c:	4413      	add	r3, r2
 8002e6e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e70:	430b      	orrs	r3, r1
 8002e72:	e07e      	b.n	8002f72 <HAL_ADC_ConfigChannel+0x49e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d107      	bne.n	8002e90 <HAL_ADC_ConfigChannel+0x3bc>
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	0e9b      	lsrs	r3, r3, #26
 8002e86:	3301      	adds	r3, #1
 8002e88:	069b      	lsls	r3, r3, #26
 8002e8a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e8e:	e015      	b.n	8002ebc <HAL_ADC_ConfigChannel+0x3e8>
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e98:	fa93 f3a3 	rbit	r3, r3
 8002e9c:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002ea2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d101      	bne.n	8002eac <HAL_ADC_ConfigChannel+0x3d8>
    return 32U;
 8002ea8:	2320      	movs	r3, #32
 8002eaa:	e003      	b.n	8002eb4 <HAL_ADC_ConfigChannel+0x3e0>
  return __builtin_clz(value);
 8002eac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002eae:	fab3 f383 	clz	r3, r3
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	069b      	lsls	r3, r3, #26
 8002eb8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d109      	bne.n	8002edc <HAL_ADC_ConfigChannel+0x408>
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	0e9b      	lsrs	r3, r3, #26
 8002ece:	3301      	adds	r3, #1
 8002ed0:	f003 031f 	and.w	r3, r3, #31
 8002ed4:	2101      	movs	r1, #1
 8002ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eda:	e017      	b.n	8002f0c <HAL_ADC_ConfigChannel+0x438>
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	fa93 f3a3 	rbit	r3, r3
 8002ee8:	61bb      	str	r3, [r7, #24]
  return result;
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002eee:	6a3b      	ldr	r3, [r7, #32]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d101      	bne.n	8002ef8 <HAL_ADC_ConfigChannel+0x424>
    return 32U;
 8002ef4:	2320      	movs	r3, #32
 8002ef6:	e003      	b.n	8002f00 <HAL_ADC_ConfigChannel+0x42c>
  return __builtin_clz(value);
 8002ef8:	6a3b      	ldr	r3, [r7, #32]
 8002efa:	fab3 f383 	clz	r3, r3
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	3301      	adds	r3, #1
 8002f02:	f003 031f 	and.w	r3, r3, #31
 8002f06:	2101      	movs	r1, #1
 8002f08:	fa01 f303 	lsl.w	r3, r1, r3
 8002f0c:	ea42 0103 	orr.w	r1, r2, r3
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d10d      	bne.n	8002f38 <HAL_ADC_ConfigChannel+0x464>
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	0e9b      	lsrs	r3, r3, #26
 8002f22:	3301      	adds	r3, #1
 8002f24:	f003 021f 	and.w	r2, r3, #31
 8002f28:	4613      	mov	r3, r2
 8002f2a:	005b      	lsls	r3, r3, #1
 8002f2c:	4413      	add	r3, r2
 8002f2e:	3b1e      	subs	r3, #30
 8002f30:	051b      	lsls	r3, r3, #20
 8002f32:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002f36:	e01b      	b.n	8002f70 <HAL_ADC_ConfigChannel+0x49c>
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	fa93 f3a3 	rbit	r3, r3
 8002f44:	60fb      	str	r3, [r7, #12]
  return result;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d101      	bne.n	8002f54 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8002f50:	2320      	movs	r3, #32
 8002f52:	e003      	b.n	8002f5c <HAL_ADC_ConfigChannel+0x488>
  return __builtin_clz(value);
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	fab3 f383 	clz	r3, r3
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	f003 021f 	and.w	r2, r3, #31
 8002f62:	4613      	mov	r3, r2
 8002f64:	005b      	lsls	r3, r3, #1
 8002f66:	4413      	add	r3, r2
 8002f68:	3b1e      	subs	r3, #30
 8002f6a:	051b      	lsls	r3, r3, #20
 8002f6c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f70:	430b      	orrs	r3, r1
 8002f72:	683a      	ldr	r2, [r7, #0]
 8002f74:	6892      	ldr	r2, [r2, #8]
 8002f76:	4619      	mov	r1, r3
 8002f78:	f7ff f913 	bl	80021a2 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	da77      	bge.n	8003074 <HAL_ADC_ConfigChannel+0x5a0>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f84:	4840      	ldr	r0, [pc, #256]	@ (8003088 <HAL_ADC_ConfigChannel+0x5b4>)
 8002f86:	f7ff f86b 	bl	8002060 <LL_ADC_GetCommonPathInternalCh>
 8002f8a:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f8c:	483f      	ldr	r0, [pc, #252]	@ (800308c <HAL_ADC_ConfigChannel+0x5b8>)
 8002f8e:	f7ff f9e9 	bl	8002364 <LL_ADC_IsEnabled>
 8002f92:	4604      	mov	r4, r0
 8002f94:	483e      	ldr	r0, [pc, #248]	@ (8003090 <HAL_ADC_ConfigChannel+0x5bc>)
 8002f96:	f7ff f9e5 	bl	8002364 <LL_ADC_IsEnabled>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	4323      	orrs	r3, r4
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d155      	bne.n	800304e <HAL_ADC_ConfigChannel+0x57a>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a3b      	ldr	r2, [pc, #236]	@ (8003094 <HAL_ADC_ConfigChannel+0x5c0>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d122      	bne.n	8002ff2 <HAL_ADC_ConfigChannel+0x51e>
 8002fac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002fae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d11d      	bne.n	8002ff2 <HAL_ADC_ConfigChannel+0x51e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a35      	ldr	r2, [pc, #212]	@ (8003090 <HAL_ADC_ConfigChannel+0x5bc>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d159      	bne.n	8003074 <HAL_ADC_ConfigChannel+0x5a0>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002fc0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002fc2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	482f      	ldr	r0, [pc, #188]	@ (8003088 <HAL_ADC_ConfigChannel+0x5b4>)
 8002fca:	f7ff f836 	bl	800203a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002fce:	4b32      	ldr	r3, [pc, #200]	@ (8003098 <HAL_ADC_ConfigChannel+0x5c4>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	099b      	lsrs	r3, r3, #6
 8002fd4:	4a31      	ldr	r2, [pc, #196]	@ (800309c <HAL_ADC_ConfigChannel+0x5c8>)
 8002fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fda:	099b      	lsrs	r3, r3, #6
 8002fdc:	3301      	adds	r3, #1
 8002fde:	005b      	lsls	r3, r3, #1
 8002fe0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002fe2:	e002      	b.n	8002fea <HAL_ADC_ConfigChannel+0x516>
              {
                wait_loop_index--;
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	3b01      	subs	r3, #1
 8002fe8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d1f9      	bne.n	8002fe4 <HAL_ADC_ConfigChannel+0x510>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ff0:	e040      	b.n	8003074 <HAL_ADC_ConfigChannel+0x5a0>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a2a      	ldr	r2, [pc, #168]	@ (80030a0 <HAL_ADC_ConfigChannel+0x5cc>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d111      	bne.n	8003020 <HAL_ADC_ConfigChannel+0x54c>
 8002ffc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ffe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d10c      	bne.n	8003020 <HAL_ADC_ConfigChannel+0x54c>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a21      	ldr	r2, [pc, #132]	@ (8003090 <HAL_ADC_ConfigChannel+0x5bc>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d131      	bne.n	8003074 <HAL_ADC_ConfigChannel+0x5a0>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003010:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003012:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003016:	4619      	mov	r1, r3
 8003018:	481b      	ldr	r0, [pc, #108]	@ (8003088 <HAL_ADC_ConfigChannel+0x5b4>)
 800301a:	f7ff f80e 	bl	800203a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800301e:	e029      	b.n	8003074 <HAL_ADC_ConfigChannel+0x5a0>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a1f      	ldr	r2, [pc, #124]	@ (80030a4 <HAL_ADC_ConfigChannel+0x5d0>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d124      	bne.n	8003074 <HAL_ADC_ConfigChannel+0x5a0>
 800302a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800302c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d11f      	bne.n	8003074 <HAL_ADC_ConfigChannel+0x5a0>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a15      	ldr	r2, [pc, #84]	@ (8003090 <HAL_ADC_ConfigChannel+0x5bc>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d11a      	bne.n	8003074 <HAL_ADC_ConfigChannel+0x5a0>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800303e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003040:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003044:	4619      	mov	r1, r3
 8003046:	4810      	ldr	r0, [pc, #64]	@ (8003088 <HAL_ADC_ConfigChannel+0x5b4>)
 8003048:	f7fe fff7 	bl	800203a <LL_ADC_SetCommonPathInternalCh>
 800304c:	e012      	b.n	8003074 <HAL_ADC_ConfigChannel+0x5a0>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003052:	f043 0220 	orr.w	r2, r3, #32
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003060:	e008      	b.n	8003074 <HAL_ADC_ConfigChannel+0x5a0>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003066:	f043 0220 	orr.w	r2, r3, #32
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800307c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003080:	4618      	mov	r0, r3
 8003082:	3784      	adds	r7, #132	@ 0x84
 8003084:	46bd      	mov	sp, r7
 8003086:	bd90      	pop	{r4, r7, pc}
 8003088:	40022300 	.word	0x40022300
 800308c:	40022000 	.word	0x40022000
 8003090:	40022100 	.word	0x40022100
 8003094:	cb840000 	.word	0xcb840000
 8003098:	24000000 	.word	0x24000000
 800309c:	053e2d63 	.word	0x053e2d63
 80030a0:	bac04000 	.word	0xbac04000
 80030a4:	cfb80000 	.word	0xcfb80000

080030a8 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b088      	sub	sp, #32
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80030b2:	2300      	movs	r3, #0
 80030b4:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4618      	mov	r0, r3
 80030c0:	f7ff f99e 	bl	8002400 <LL_ADC_REG_IsConversionOngoing>
 80030c4:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7ff f9c0 	bl	8002450 <LL_ADC_INJ_IsConversionOngoing>
 80030d0:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d103      	bne.n	80030e0 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	f000 8098 	beq.w	8003210 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d02a      	beq.n	8003144 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	7d5b      	ldrb	r3, [r3, #21]
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d126      	bne.n	8003144 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	7d1b      	ldrb	r3, [r3, #20]
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d122      	bne.n	8003144 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80030fe:	2301      	movs	r3, #1
 8003100:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003102:	e014      	b.n	800312e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	4a45      	ldr	r2, [pc, #276]	@ (800321c <ADC_ConversionStop+0x174>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d90d      	bls.n	8003128 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003110:	f043 0210 	orr.w	r2, r3, #16
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800311c:	f043 0201 	orr.w	r2, r3, #1
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e074      	b.n	8003212 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	3301      	adds	r3, #1
 800312c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003138:	2b40      	cmp	r3, #64	@ 0x40
 800313a:	d1e3      	bne.n	8003104 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2240      	movs	r2, #64	@ 0x40
 8003142:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	2b02      	cmp	r3, #2
 8003148:	d014      	beq.n	8003174 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4618      	mov	r0, r3
 8003150:	f7ff f956 	bl	8002400 <LL_ADC_REG_IsConversionOngoing>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00c      	beq.n	8003174 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4618      	mov	r0, r3
 8003160:	f7ff f913 	bl	800238a <LL_ADC_IsDisableOngoing>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d104      	bne.n	8003174 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4618      	mov	r0, r3
 8003170:	f7ff f932 	bl	80023d8 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	2b01      	cmp	r3, #1
 8003178:	d014      	beq.n	80031a4 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4618      	mov	r0, r3
 8003180:	f7ff f966 	bl	8002450 <LL_ADC_INJ_IsConversionOngoing>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d00c      	beq.n	80031a4 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4618      	mov	r0, r3
 8003190:	f7ff f8fb 	bl	800238a <LL_ADC_IsDisableOngoing>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d104      	bne.n	80031a4 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4618      	mov	r0, r3
 80031a0:	f7ff f942 	bl	8002428 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d005      	beq.n	80031b6 <ADC_ConversionStop+0x10e>
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	2b03      	cmp	r3, #3
 80031ae:	d105      	bne.n	80031bc <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80031b0:	230c      	movs	r3, #12
 80031b2:	617b      	str	r3, [r7, #20]
        break;
 80031b4:	e005      	b.n	80031c2 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80031b6:	2308      	movs	r3, #8
 80031b8:	617b      	str	r3, [r7, #20]
        break;
 80031ba:	e002      	b.n	80031c2 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80031bc:	2304      	movs	r3, #4
 80031be:	617b      	str	r3, [r7, #20]
        break;
 80031c0:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80031c2:	f7fe fee1 	bl	8001f88 <HAL_GetTick>
 80031c6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80031c8:	e01b      	b.n	8003202 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80031ca:	f7fe fedd 	bl	8001f88 <HAL_GetTick>
 80031ce:	4602      	mov	r2, r0
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	2b05      	cmp	r3, #5
 80031d6:	d914      	bls.n	8003202 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	689a      	ldr	r2, [r3, #8]
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	4013      	ands	r3, r2
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d00d      	beq.n	8003202 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031ea:	f043 0210 	orr.w	r2, r3, #16
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031f6:	f043 0201 	orr.w	r2, r3, #1
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e007      	b.n	8003212 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	689a      	ldr	r2, [r3, #8]
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	4013      	ands	r3, r2
 800320c:	2b00      	cmp	r3, #0
 800320e:	d1dc      	bne.n	80031ca <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	3720      	adds	r7, #32
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	000cdbff 	.word	0x000cdbff

08003220 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4618      	mov	r0, r3
 800322e:	f7ff f899 	bl	8002364 <LL_ADC_IsEnabled>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d161      	bne.n	80032fc <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	689a      	ldr	r2, [r3, #8]
 800323e:	4b32      	ldr	r3, [pc, #200]	@ (8003308 <ADC_Enable+0xe8>)
 8003240:	4013      	ands	r3, r2
 8003242:	2b00      	cmp	r3, #0
 8003244:	d00d      	beq.n	8003262 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800324a:	f043 0210 	orr.w	r2, r3, #16
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003256:	f043 0201 	orr.w	r2, r3, #1
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e04d      	b.n	80032fe <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4618      	mov	r0, r3
 8003268:	f7ff f854 	bl	8002314 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800326c:	f7fe fe8c 	bl	8001f88 <HAL_GetTick>
 8003270:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003272:	4826      	ldr	r0, [pc, #152]	@ (800330c <ADC_Enable+0xec>)
 8003274:	f7fe ffe4 	bl	8002240 <LL_ADC_GetMultimode>
 8003278:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a24      	ldr	r2, [pc, #144]	@ (8003310 <ADC_Enable+0xf0>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d002      	beq.n	800328a <ADC_Enable+0x6a>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	e000      	b.n	800328c <ADC_Enable+0x6c>
 800328a:	4b22      	ldr	r3, [pc, #136]	@ (8003314 <ADC_Enable+0xf4>)
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	6812      	ldr	r2, [r2, #0]
 8003290:	4293      	cmp	r3, r2
 8003292:	d02c      	beq.n	80032ee <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d130      	bne.n	80032fc <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800329a:	e028      	b.n	80032ee <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4618      	mov	r0, r3
 80032a2:	f7ff f85f 	bl	8002364 <LL_ADC_IsEnabled>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d104      	bne.n	80032b6 <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4618      	mov	r0, r3
 80032b2:	f7ff f82f 	bl	8002314 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80032b6:	f7fe fe67 	bl	8001f88 <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d914      	bls.n	80032ee <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0301 	and.w	r3, r3, #1
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d00d      	beq.n	80032ee <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032d6:	f043 0210 	orr.w	r2, r3, #16
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032e2:	f043 0201 	orr.w	r2, r3, #1
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e007      	b.n	80032fe <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0301 	and.w	r3, r3, #1
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d1cf      	bne.n	800329c <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3710      	adds	r7, #16
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	8000003f 	.word	0x8000003f
 800330c:	40022300 	.word	0x40022300
 8003310:	40022100 	.word	0x40022100
 8003314:	40022000 	.word	0x40022000

08003318 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4618      	mov	r0, r3
 8003326:	f7ff f830 	bl	800238a <LL_ADC_IsDisableOngoing>
 800332a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4618      	mov	r0, r3
 8003332:	f7ff f817 	bl	8002364 <LL_ADC_IsEnabled>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d047      	beq.n	80033cc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d144      	bne.n	80033cc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f003 030d 	and.w	r3, r3, #13
 800334c:	2b01      	cmp	r3, #1
 800334e:	d10c      	bne.n	800336a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4618      	mov	r0, r3
 8003356:	f7fe fff1 	bl	800233c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2203      	movs	r2, #3
 8003360:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003362:	f7fe fe11 	bl	8001f88 <HAL_GetTick>
 8003366:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003368:	e029      	b.n	80033be <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800336e:	f043 0210 	orr.w	r2, r3, #16
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800337a:	f043 0201 	orr.w	r2, r3, #1
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e023      	b.n	80033ce <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003386:	f7fe fdff 	bl	8001f88 <HAL_GetTick>
 800338a:	4602      	mov	r2, r0
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	2b02      	cmp	r3, #2
 8003392:	d914      	bls.n	80033be <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f003 0301 	and.w	r3, r3, #1
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00d      	beq.n	80033be <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033a6:	f043 0210 	orr.w	r2, r3, #16
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033b2:	f043 0201 	orr.w	r2, r3, #1
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e007      	b.n	80033ce <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	f003 0301 	and.w	r3, r3, #1
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d1dc      	bne.n	8003386 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80033cc:	2300      	movs	r3, #0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3710      	adds	r7, #16
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
	...

080033d8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80033e0:	4b60      	ldr	r3, [pc, #384]	@ (8003564 <ADC_ConfigureBoostMode+0x18c>)
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d01c      	beq.n	8003426 <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80033ec:	f001 fc06 	bl	8004bfc <HAL_RCC_GetHCLKFreq>
 80033f0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80033fa:	d010      	beq.n	800341e <ADC_ConfigureBoostMode+0x46>
 80033fc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003400:	d873      	bhi.n	80034ea <ADC_ConfigureBoostMode+0x112>
 8003402:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003406:	d002      	beq.n	800340e <ADC_ConfigureBoostMode+0x36>
 8003408:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800340c:	d16d      	bne.n	80034ea <ADC_ConfigureBoostMode+0x112>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	0c1b      	lsrs	r3, r3, #16
 8003414:	68fa      	ldr	r2, [r7, #12]
 8003416:	fbb2 f3f3 	udiv	r3, r2, r3
 800341a:	60fb      	str	r3, [r7, #12]
        break;
 800341c:	e068      	b.n	80034f0 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	089b      	lsrs	r3, r3, #2
 8003422:	60fb      	str	r3, [r7, #12]
        break;
 8003424:	e064      	b.n	80034f0 <ADC_ConfigureBoostMode+0x118>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003426:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800342a:	f04f 0100 	mov.w	r1, #0
 800342e:	f002 fdff 	bl	8006030 <HAL_RCCEx_GetPeriphCLKFreq>
 8003432:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800343c:	d051      	beq.n	80034e2 <ADC_ConfigureBoostMode+0x10a>
 800343e:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003442:	d854      	bhi.n	80034ee <ADC_ConfigureBoostMode+0x116>
 8003444:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003448:	d047      	beq.n	80034da <ADC_ConfigureBoostMode+0x102>
 800344a:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800344e:	d84e      	bhi.n	80034ee <ADC_ConfigureBoostMode+0x116>
 8003450:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003454:	d03d      	beq.n	80034d2 <ADC_ConfigureBoostMode+0xfa>
 8003456:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800345a:	d848      	bhi.n	80034ee <ADC_ConfigureBoostMode+0x116>
 800345c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003460:	d033      	beq.n	80034ca <ADC_ConfigureBoostMode+0xf2>
 8003462:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003466:	d842      	bhi.n	80034ee <ADC_ConfigureBoostMode+0x116>
 8003468:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800346c:	d029      	beq.n	80034c2 <ADC_ConfigureBoostMode+0xea>
 800346e:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003472:	d83c      	bhi.n	80034ee <ADC_ConfigureBoostMode+0x116>
 8003474:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003478:	d01a      	beq.n	80034b0 <ADC_ConfigureBoostMode+0xd8>
 800347a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800347e:	d836      	bhi.n	80034ee <ADC_ConfigureBoostMode+0x116>
 8003480:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003484:	d014      	beq.n	80034b0 <ADC_ConfigureBoostMode+0xd8>
 8003486:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800348a:	d830      	bhi.n	80034ee <ADC_ConfigureBoostMode+0x116>
 800348c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003490:	d00e      	beq.n	80034b0 <ADC_ConfigureBoostMode+0xd8>
 8003492:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003496:	d82a      	bhi.n	80034ee <ADC_ConfigureBoostMode+0x116>
 8003498:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800349c:	d008      	beq.n	80034b0 <ADC_ConfigureBoostMode+0xd8>
 800349e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80034a2:	d824      	bhi.n	80034ee <ADC_ConfigureBoostMode+0x116>
 80034a4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80034a8:	d002      	beq.n	80034b0 <ADC_ConfigureBoostMode+0xd8>
 80034aa:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80034ae:	d11e      	bne.n	80034ee <ADC_ConfigureBoostMode+0x116>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	0c9b      	lsrs	r3, r3, #18
 80034b6:	005b      	lsls	r3, r3, #1
 80034b8:	68fa      	ldr	r2, [r7, #12]
 80034ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80034be:	60fb      	str	r3, [r7, #12]
        break;
 80034c0:	e016      	b.n	80034f0 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	091b      	lsrs	r3, r3, #4
 80034c6:	60fb      	str	r3, [r7, #12]
        break;
 80034c8:	e012      	b.n	80034f0 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	095b      	lsrs	r3, r3, #5
 80034ce:	60fb      	str	r3, [r7, #12]
        break;
 80034d0:	e00e      	b.n	80034f0 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	099b      	lsrs	r3, r3, #6
 80034d6:	60fb      	str	r3, [r7, #12]
        break;
 80034d8:	e00a      	b.n	80034f0 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	09db      	lsrs	r3, r3, #7
 80034de:	60fb      	str	r3, [r7, #12]
        break;
 80034e0:	e006      	b.n	80034f0 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	0a1b      	lsrs	r3, r3, #8
 80034e6:	60fb      	str	r3, [r7, #12]
        break;
 80034e8:	e002      	b.n	80034f0 <ADC_ConfigureBoostMode+0x118>
        break;
 80034ea:	bf00      	nop
 80034ec:	e000      	b.n	80034f0 <ADC_ConfigureBoostMode+0x118>
      default:
        break;
 80034ee:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	085b      	lsrs	r3, r3, #1
 80034f4:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	4a1b      	ldr	r2, [pc, #108]	@ (8003568 <ADC_ConfigureBoostMode+0x190>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d808      	bhi.n	8003510 <ADC_ConfigureBoostMode+0x138>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	689a      	ldr	r2, [r3, #8]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800350c:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800350e:	e025      	b.n	800355c <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 12500000UL)
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	4a16      	ldr	r2, [pc, #88]	@ (800356c <ADC_ConfigureBoostMode+0x194>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d80a      	bhi.n	800352e <ADC_ConfigureBoostMode+0x156>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800352a:	609a      	str	r2, [r3, #8]
}
 800352c:	e016      	b.n	800355c <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 25000000UL)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	4a0f      	ldr	r2, [pc, #60]	@ (8003570 <ADC_ConfigureBoostMode+0x198>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d80a      	bhi.n	800354c <ADC_ConfigureBoostMode+0x174>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003548:	609a      	str	r2, [r3, #8]
}
 800354a:	e007      	b.n	800355c <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	689a      	ldr	r2, [r3, #8]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800355a:	609a      	str	r2, [r3, #8]
}
 800355c:	bf00      	nop
 800355e:	3710      	adds	r7, #16
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	40022300 	.word	0x40022300
 8003568:	005f5e10 	.word	0x005f5e10
 800356c:	00bebc20 	.word	0x00bebc20
 8003570:	017d7840 	.word	0x017d7840

08003574 <LL_ADC_IsEnabled>:
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f003 0301 	and.w	r3, r3, #1
 8003584:	2b01      	cmp	r3, #1
 8003586:	d101      	bne.n	800358c <LL_ADC_IsEnabled+0x18>
 8003588:	2301      	movs	r3, #1
 800358a:	e000      	b.n	800358e <LL_ADC_IsEnabled+0x1a>
 800358c:	2300      	movs	r3, #0
}
 800358e:	4618      	mov	r0, r3
 8003590:	370c      	adds	r7, #12
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr

0800359a <LL_ADC_REG_IsConversionOngoing>:
{
 800359a:	b480      	push	{r7}
 800359c:	b083      	sub	sp, #12
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f003 0304 	and.w	r3, r3, #4
 80035aa:	2b04      	cmp	r3, #4
 80035ac:	d101      	bne.n	80035b2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80035ae:	2301      	movs	r3, #1
 80035b0:	e000      	b.n	80035b4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80035b2:	2300      	movs	r3, #0
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	370c      	adds	r7, #12
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80035c0:	b590      	push	{r4, r7, lr}
 80035c2:	b09f      	sub	sp, #124	@ 0x7c
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035ca:	2300      	movs	r3, #0
 80035cc:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d101      	bne.n	80035de <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80035da:	2302      	movs	r3, #2
 80035dc:	e080      	b.n	80036e0 <HAL_ADCEx_MultiModeConfigChannel+0x120>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2201      	movs	r2, #1
 80035e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80035e6:	2300      	movs	r3, #0
 80035e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80035ea:	2300      	movs	r3, #0
 80035ec:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a3d      	ldr	r2, [pc, #244]	@ (80036e8 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d102      	bne.n	80035fe <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80035f8:	4b3c      	ldr	r3, [pc, #240]	@ (80036ec <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 80035fa:	60bb      	str	r3, [r7, #8]
 80035fc:	e001      	b.n	8003602 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80035fe:	2300      	movs	r3, #0
 8003600:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d10b      	bne.n	8003620 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800360c:	f043 0220 	orr.w	r2, r3, #32
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e05f      	b.n	80036e0 <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	4618      	mov	r0, r3
 8003624:	f7ff ffb9 	bl	800359a <LL_ADC_REG_IsConversionOngoing>
 8003628:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4618      	mov	r0, r3
 8003630:	f7ff ffb3 	bl	800359a <LL_ADC_REG_IsConversionOngoing>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d141      	bne.n	80036be <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800363a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800363c:	2b00      	cmp	r3, #0
 800363e:	d13e      	bne.n	80036be <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003640:	4b2b      	ldr	r3, [pc, #172]	@ (80036f0 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 8003642:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d020      	beq.n	800368e <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800364c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	431a      	orrs	r2, r3
 800365a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800365c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800365e:	4822      	ldr	r0, [pc, #136]	@ (80036e8 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8003660:	f7ff ff88 	bl	8003574 <LL_ADC_IsEnabled>
 8003664:	4604      	mov	r4, r0
 8003666:	4821      	ldr	r0, [pc, #132]	@ (80036ec <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8003668:	f7ff ff84 	bl	8003574 <LL_ADC_IsEnabled>
 800366c:	4603      	mov	r3, r0
 800366e:	4323      	orrs	r3, r4
 8003670:	2b00      	cmp	r3, #0
 8003672:	d12e      	bne.n	80036d2 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003674:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003676:	689a      	ldr	r2, [r3, #8]
 8003678:	4b1e      	ldr	r3, [pc, #120]	@ (80036f4 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 800367a:	4013      	ands	r3, r2
 800367c:	683a      	ldr	r2, [r7, #0]
 800367e:	6811      	ldr	r1, [r2, #0]
 8003680:	683a      	ldr	r2, [r7, #0]
 8003682:	6892      	ldr	r2, [r2, #8]
 8003684:	430a      	orrs	r2, r1
 8003686:	431a      	orrs	r2, r3
 8003688:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800368a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800368c:	e021      	b.n	80036d2 <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800368e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003696:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003698:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800369a:	4813      	ldr	r0, [pc, #76]	@ (80036e8 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 800369c:	f7ff ff6a 	bl	8003574 <LL_ADC_IsEnabled>
 80036a0:	4604      	mov	r4, r0
 80036a2:	4812      	ldr	r0, [pc, #72]	@ (80036ec <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 80036a4:	f7ff ff66 	bl	8003574 <LL_ADC_IsEnabled>
 80036a8:	4603      	mov	r3, r0
 80036aa:	4323      	orrs	r3, r4
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d110      	bne.n	80036d2 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80036b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80036b2:	689a      	ldr	r2, [r3, #8]
 80036b4:	4b0f      	ldr	r3, [pc, #60]	@ (80036f4 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 80036b6:	4013      	ands	r3, r2
 80036b8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80036ba:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80036bc:	e009      	b.n	80036d2 <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036c2:	f043 0220 	orr.w	r2, r3, #32
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80036d0:	e000      	b.n	80036d4 <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80036d2:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80036dc:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	377c      	adds	r7, #124	@ 0x7c
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd90      	pop	{r4, r7, pc}
 80036e8:	40022000 	.word	0x40022000
 80036ec:	40022100 	.word	0x40022100
 80036f0:	40022300 	.word	0x40022300
 80036f4:	fffff0e0 	.word	0xfffff0e0

080036f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b085      	sub	sp, #20
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f003 0307 	and.w	r3, r3, #7
 8003706:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003708:	4b0b      	ldr	r3, [pc, #44]	@ (8003738 <__NVIC_SetPriorityGrouping+0x40>)
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800370e:	68ba      	ldr	r2, [r7, #8]
 8003710:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003714:	4013      	ands	r3, r2
 8003716:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003720:	4b06      	ldr	r3, [pc, #24]	@ (800373c <__NVIC_SetPriorityGrouping+0x44>)
 8003722:	4313      	orrs	r3, r2
 8003724:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003726:	4a04      	ldr	r2, [pc, #16]	@ (8003738 <__NVIC_SetPriorityGrouping+0x40>)
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	60d3      	str	r3, [r2, #12]
}
 800372c:	bf00      	nop
 800372e:	3714      	adds	r7, #20
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr
 8003738:	e000ed00 	.word	0xe000ed00
 800373c:	05fa0000 	.word	0x05fa0000

08003740 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003740:	b480      	push	{r7}
 8003742:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003744:	4b04      	ldr	r3, [pc, #16]	@ (8003758 <__NVIC_GetPriorityGrouping+0x18>)
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	0a1b      	lsrs	r3, r3, #8
 800374a:	f003 0307 	and.w	r3, r3, #7
}
 800374e:	4618      	mov	r0, r3
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr
 8003758:	e000ed00 	.word	0xe000ed00

0800375c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	4603      	mov	r3, r0
 8003764:	6039      	str	r1, [r7, #0]
 8003766:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003768:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800376c:	2b00      	cmp	r3, #0
 800376e:	db0a      	blt.n	8003786 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	b2da      	uxtb	r2, r3
 8003774:	490c      	ldr	r1, [pc, #48]	@ (80037a8 <__NVIC_SetPriority+0x4c>)
 8003776:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800377a:	0112      	lsls	r2, r2, #4
 800377c:	b2d2      	uxtb	r2, r2
 800377e:	440b      	add	r3, r1
 8003780:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003784:	e00a      	b.n	800379c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	b2da      	uxtb	r2, r3
 800378a:	4908      	ldr	r1, [pc, #32]	@ (80037ac <__NVIC_SetPriority+0x50>)
 800378c:	88fb      	ldrh	r3, [r7, #6]
 800378e:	f003 030f 	and.w	r3, r3, #15
 8003792:	3b04      	subs	r3, #4
 8003794:	0112      	lsls	r2, r2, #4
 8003796:	b2d2      	uxtb	r2, r2
 8003798:	440b      	add	r3, r1
 800379a:	761a      	strb	r2, [r3, #24]
}
 800379c:	bf00      	nop
 800379e:	370c      	adds	r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr
 80037a8:	e000e100 	.word	0xe000e100
 80037ac:	e000ed00 	.word	0xe000ed00

080037b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b089      	sub	sp, #36	@ 0x24
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	60b9      	str	r1, [r7, #8]
 80037ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f003 0307 	and.w	r3, r3, #7
 80037c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	f1c3 0307 	rsb	r3, r3, #7
 80037ca:	2b04      	cmp	r3, #4
 80037cc:	bf28      	it	cs
 80037ce:	2304      	movcs	r3, #4
 80037d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	3304      	adds	r3, #4
 80037d6:	2b06      	cmp	r3, #6
 80037d8:	d902      	bls.n	80037e0 <NVIC_EncodePriority+0x30>
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	3b03      	subs	r3, #3
 80037de:	e000      	b.n	80037e2 <NVIC_EncodePriority+0x32>
 80037e0:	2300      	movs	r3, #0
 80037e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037e4:	f04f 32ff 	mov.w	r2, #4294967295
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	fa02 f303 	lsl.w	r3, r2, r3
 80037ee:	43da      	mvns	r2, r3
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	401a      	ands	r2, r3
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037f8:	f04f 31ff 	mov.w	r1, #4294967295
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003802:	43d9      	mvns	r1, r3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003808:	4313      	orrs	r3, r2
         );
}
 800380a:	4618      	mov	r0, r3
 800380c:	3724      	adds	r7, #36	@ 0x24
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
	...

08003818 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	3b01      	subs	r3, #1
 8003824:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003828:	d301      	bcc.n	800382e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800382a:	2301      	movs	r3, #1
 800382c:	e00f      	b.n	800384e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800382e:	4a0a      	ldr	r2, [pc, #40]	@ (8003858 <SysTick_Config+0x40>)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	3b01      	subs	r3, #1
 8003834:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003836:	210f      	movs	r1, #15
 8003838:	f04f 30ff 	mov.w	r0, #4294967295
 800383c:	f7ff ff8e 	bl	800375c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003840:	4b05      	ldr	r3, [pc, #20]	@ (8003858 <SysTick_Config+0x40>)
 8003842:	2200      	movs	r2, #0
 8003844:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003846:	4b04      	ldr	r3, [pc, #16]	@ (8003858 <SysTick_Config+0x40>)
 8003848:	2207      	movs	r2, #7
 800384a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800384c:	2300      	movs	r3, #0
}
 800384e:	4618      	mov	r0, r3
 8003850:	3708      	adds	r7, #8
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	e000e010 	.word	0xe000e010

0800385c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f7ff ff47 	bl	80036f8 <__NVIC_SetPriorityGrouping>
}
 800386a:	bf00      	nop
 800386c:	3708      	adds	r7, #8
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}

08003872 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003872:	b580      	push	{r7, lr}
 8003874:	b086      	sub	sp, #24
 8003876:	af00      	add	r7, sp, #0
 8003878:	4603      	mov	r3, r0
 800387a:	60b9      	str	r1, [r7, #8]
 800387c:	607a      	str	r2, [r7, #4]
 800387e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003880:	f7ff ff5e 	bl	8003740 <__NVIC_GetPriorityGrouping>
 8003884:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	68b9      	ldr	r1, [r7, #8]
 800388a:	6978      	ldr	r0, [r7, #20]
 800388c:	f7ff ff90 	bl	80037b0 <NVIC_EncodePriority>
 8003890:	4602      	mov	r2, r0
 8003892:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003896:	4611      	mov	r1, r2
 8003898:	4618      	mov	r0, r3
 800389a:	f7ff ff5f 	bl	800375c <__NVIC_SetPriority>
}
 800389e:	bf00      	nop
 80038a0:	3718      	adds	r7, #24
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}

080038a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038a6:	b580      	push	{r7, lr}
 80038a8:	b082      	sub	sp, #8
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f7ff ffb2 	bl	8003818 <SysTick_Config>
 80038b4:	4603      	mov	r3, r0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3708      	adds	r7, #8
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
	...

080038c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b089      	sub	sp, #36	@ 0x24
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80038ca:	2300      	movs	r3, #0
 80038cc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80038ce:	4b89      	ldr	r3, [pc, #548]	@ (8003af4 <HAL_GPIO_Init+0x234>)
 80038d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80038d2:	e194      	b.n	8003bfe <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	2101      	movs	r1, #1
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	fa01 f303 	lsl.w	r3, r1, r3
 80038e0:	4013      	ands	r3, r2
 80038e2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	f000 8186 	beq.w	8003bf8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f003 0303 	and.w	r3, r3, #3
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d005      	beq.n	8003904 <HAL_GPIO_Init+0x44>
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f003 0303 	and.w	r3, r3, #3
 8003900:	2b02      	cmp	r3, #2
 8003902:	d130      	bne.n	8003966 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	005b      	lsls	r3, r3, #1
 800390e:	2203      	movs	r2, #3
 8003910:	fa02 f303 	lsl.w	r3, r2, r3
 8003914:	43db      	mvns	r3, r3
 8003916:	69ba      	ldr	r2, [r7, #24]
 8003918:	4013      	ands	r3, r2
 800391a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	68da      	ldr	r2, [r3, #12]
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	005b      	lsls	r3, r3, #1
 8003924:	fa02 f303 	lsl.w	r3, r2, r3
 8003928:	69ba      	ldr	r2, [r7, #24]
 800392a:	4313      	orrs	r3, r2
 800392c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	69ba      	ldr	r2, [r7, #24]
 8003932:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800393a:	2201      	movs	r2, #1
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	fa02 f303 	lsl.w	r3, r2, r3
 8003942:	43db      	mvns	r3, r3
 8003944:	69ba      	ldr	r2, [r7, #24]
 8003946:	4013      	ands	r3, r2
 8003948:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	091b      	lsrs	r3, r3, #4
 8003950:	f003 0201 	and.w	r2, r3, #1
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	fa02 f303 	lsl.w	r3, r2, r3
 800395a:	69ba      	ldr	r2, [r7, #24]
 800395c:	4313      	orrs	r3, r2
 800395e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	69ba      	ldr	r2, [r7, #24]
 8003964:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	f003 0303 	and.w	r3, r3, #3
 800396e:	2b03      	cmp	r3, #3
 8003970:	d017      	beq.n	80039a2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	005b      	lsls	r3, r3, #1
 800397c:	2203      	movs	r2, #3
 800397e:	fa02 f303 	lsl.w	r3, r2, r3
 8003982:	43db      	mvns	r3, r3
 8003984:	69ba      	ldr	r2, [r7, #24]
 8003986:	4013      	ands	r3, r2
 8003988:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	689a      	ldr	r2, [r3, #8]
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	005b      	lsls	r3, r3, #1
 8003992:	fa02 f303 	lsl.w	r3, r2, r3
 8003996:	69ba      	ldr	r2, [r7, #24]
 8003998:	4313      	orrs	r3, r2
 800399a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	69ba      	ldr	r2, [r7, #24]
 80039a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f003 0303 	and.w	r3, r3, #3
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d123      	bne.n	80039f6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	08da      	lsrs	r2, r3, #3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	3208      	adds	r2, #8
 80039b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	f003 0307 	and.w	r3, r3, #7
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	220f      	movs	r2, #15
 80039c6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ca:	43db      	mvns	r3, r3
 80039cc:	69ba      	ldr	r2, [r7, #24]
 80039ce:	4013      	ands	r3, r2
 80039d0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	691a      	ldr	r2, [r3, #16]
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	f003 0307 	and.w	r3, r3, #7
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	fa02 f303 	lsl.w	r3, r2, r3
 80039e2:	69ba      	ldr	r2, [r7, #24]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	08da      	lsrs	r2, r3, #3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	3208      	adds	r2, #8
 80039f0:	69b9      	ldr	r1, [r7, #24]
 80039f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	005b      	lsls	r3, r3, #1
 8003a00:	2203      	movs	r2, #3
 8003a02:	fa02 f303 	lsl.w	r3, r2, r3
 8003a06:	43db      	mvns	r3, r3
 8003a08:	69ba      	ldr	r2, [r7, #24]
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f003 0203 	and.w	r2, r3, #3
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	005b      	lsls	r3, r3, #1
 8003a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1e:	69ba      	ldr	r2, [r7, #24]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	69ba      	ldr	r2, [r7, #24]
 8003a28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	f000 80e0 	beq.w	8003bf8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a38:	4b2f      	ldr	r3, [pc, #188]	@ (8003af8 <HAL_GPIO_Init+0x238>)
 8003a3a:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8003a3e:	4a2e      	ldr	r2, [pc, #184]	@ (8003af8 <HAL_GPIO_Init+0x238>)
 8003a40:	f043 0302 	orr.w	r3, r3, #2
 8003a44:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8003a48:	4b2b      	ldr	r3, [pc, #172]	@ (8003af8 <HAL_GPIO_Init+0x238>)
 8003a4a:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8003a4e:	f003 0302 	and.w	r3, r3, #2
 8003a52:	60fb      	str	r3, [r7, #12]
 8003a54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a56:	4a29      	ldr	r2, [pc, #164]	@ (8003afc <HAL_GPIO_Init+0x23c>)
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	089b      	lsrs	r3, r3, #2
 8003a5c:	3302      	adds	r3, #2
 8003a5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	f003 0303 	and.w	r3, r3, #3
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	220f      	movs	r2, #15
 8003a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a72:	43db      	mvns	r3, r3
 8003a74:	69ba      	ldr	r2, [r7, #24]
 8003a76:	4013      	ands	r3, r2
 8003a78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a20      	ldr	r2, [pc, #128]	@ (8003b00 <HAL_GPIO_Init+0x240>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d052      	beq.n	8003b28 <HAL_GPIO_Init+0x268>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a1f      	ldr	r2, [pc, #124]	@ (8003b04 <HAL_GPIO_Init+0x244>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d031      	beq.n	8003aee <HAL_GPIO_Init+0x22e>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a1e      	ldr	r2, [pc, #120]	@ (8003b08 <HAL_GPIO_Init+0x248>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d02b      	beq.n	8003aea <HAL_GPIO_Init+0x22a>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a1d      	ldr	r2, [pc, #116]	@ (8003b0c <HAL_GPIO_Init+0x24c>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d025      	beq.n	8003ae6 <HAL_GPIO_Init+0x226>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a1c      	ldr	r2, [pc, #112]	@ (8003b10 <HAL_GPIO_Init+0x250>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d01f      	beq.n	8003ae2 <HAL_GPIO_Init+0x222>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a1b      	ldr	r2, [pc, #108]	@ (8003b14 <HAL_GPIO_Init+0x254>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d019      	beq.n	8003ade <HAL_GPIO_Init+0x21e>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a1a      	ldr	r2, [pc, #104]	@ (8003b18 <HAL_GPIO_Init+0x258>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d013      	beq.n	8003ada <HAL_GPIO_Init+0x21a>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a19      	ldr	r2, [pc, #100]	@ (8003b1c <HAL_GPIO_Init+0x25c>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d00d      	beq.n	8003ad6 <HAL_GPIO_Init+0x216>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a18      	ldr	r2, [pc, #96]	@ (8003b20 <HAL_GPIO_Init+0x260>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d007      	beq.n	8003ad2 <HAL_GPIO_Init+0x212>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a17      	ldr	r2, [pc, #92]	@ (8003b24 <HAL_GPIO_Init+0x264>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d101      	bne.n	8003ace <HAL_GPIO_Init+0x20e>
 8003aca:	2309      	movs	r3, #9
 8003acc:	e02d      	b.n	8003b2a <HAL_GPIO_Init+0x26a>
 8003ace:	230a      	movs	r3, #10
 8003ad0:	e02b      	b.n	8003b2a <HAL_GPIO_Init+0x26a>
 8003ad2:	2308      	movs	r3, #8
 8003ad4:	e029      	b.n	8003b2a <HAL_GPIO_Init+0x26a>
 8003ad6:	2307      	movs	r3, #7
 8003ad8:	e027      	b.n	8003b2a <HAL_GPIO_Init+0x26a>
 8003ada:	2306      	movs	r3, #6
 8003adc:	e025      	b.n	8003b2a <HAL_GPIO_Init+0x26a>
 8003ade:	2305      	movs	r3, #5
 8003ae0:	e023      	b.n	8003b2a <HAL_GPIO_Init+0x26a>
 8003ae2:	2304      	movs	r3, #4
 8003ae4:	e021      	b.n	8003b2a <HAL_GPIO_Init+0x26a>
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e01f      	b.n	8003b2a <HAL_GPIO_Init+0x26a>
 8003aea:	2302      	movs	r3, #2
 8003aec:	e01d      	b.n	8003b2a <HAL_GPIO_Init+0x26a>
 8003aee:	2301      	movs	r3, #1
 8003af0:	e01b      	b.n	8003b2a <HAL_GPIO_Init+0x26a>
 8003af2:	bf00      	nop
 8003af4:	58000080 	.word	0x58000080
 8003af8:	58024400 	.word	0x58024400
 8003afc:	58000400 	.word	0x58000400
 8003b00:	58020000 	.word	0x58020000
 8003b04:	58020400 	.word	0x58020400
 8003b08:	58020800 	.word	0x58020800
 8003b0c:	58020c00 	.word	0x58020c00
 8003b10:	58021000 	.word	0x58021000
 8003b14:	58021400 	.word	0x58021400
 8003b18:	58021800 	.word	0x58021800
 8003b1c:	58021c00 	.word	0x58021c00
 8003b20:	58022000 	.word	0x58022000
 8003b24:	58022400 	.word	0x58022400
 8003b28:	2300      	movs	r3, #0
 8003b2a:	69fa      	ldr	r2, [r7, #28]
 8003b2c:	f002 0203 	and.w	r2, r2, #3
 8003b30:	0092      	lsls	r2, r2, #2
 8003b32:	4093      	lsls	r3, r2
 8003b34:	69ba      	ldr	r2, [r7, #24]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b3a:	4938      	ldr	r1, [pc, #224]	@ (8003c1c <HAL_GPIO_Init+0x35c>)
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	089b      	lsrs	r3, r3, #2
 8003b40:	3302      	adds	r3, #2
 8003b42:	69ba      	ldr	r2, [r7, #24]
 8003b44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003b48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	43db      	mvns	r3, r3
 8003b54:	69ba      	ldr	r2, [r7, #24]
 8003b56:	4013      	ands	r3, r2
 8003b58:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d003      	beq.n	8003b6e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003b66:	69ba      	ldr	r2, [r7, #24]
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003b6e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003b76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	43db      	mvns	r3, r3
 8003b82:	69ba      	ldr	r2, [r7, #24]
 8003b84:	4013      	ands	r3, r2
 8003b86:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d003      	beq.n	8003b9c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003b94:	69ba      	ldr	r2, [r7, #24]
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003b9c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	43db      	mvns	r3, r3
 8003bae:	69ba      	ldr	r2, [r7, #24]
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d003      	beq.n	8003bc8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003bc0:	69ba      	ldr	r2, [r7, #24]
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	69ba      	ldr	r2, [r7, #24]
 8003bcc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	43db      	mvns	r3, r3
 8003bd8:	69ba      	ldr	r2, [r7, #24]
 8003bda:	4013      	ands	r3, r2
 8003bdc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d003      	beq.n	8003bf2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003bea:	69ba      	ldr	r2, [r7, #24]
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	69ba      	ldr	r2, [r7, #24]
 8003bf6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	3301      	adds	r3, #1
 8003bfc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	fa22 f303 	lsr.w	r3, r2, r3
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	f47f ae63 	bne.w	80038d4 <HAL_GPIO_Init+0x14>
  }
}
 8003c0e:	bf00      	nop
 8003c10:	bf00      	nop
 8003c12:	3724      	adds	r7, #36	@ 0x24
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr
 8003c1c:	58000400 	.word	0x58000400

08003c20 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b085      	sub	sp, #20
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	460b      	mov	r3, r1
 8003c2a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	691a      	ldr	r2, [r3, #16]
 8003c30:	887b      	ldrh	r3, [r7, #2]
 8003c32:	4013      	ands	r3, r2
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d002      	beq.n	8003c3e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	73fb      	strb	r3, [r7, #15]
 8003c3c:	e001      	b.n	8003c42 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003c42:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3714      	adds	r7, #20
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr

08003c50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b083      	sub	sp, #12
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	460b      	mov	r3, r1
 8003c5a:	807b      	strh	r3, [r7, #2]
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003c60:	787b      	ldrb	r3, [r7, #1]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d003      	beq.n	8003c6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c66:	887a      	ldrh	r2, [r7, #2]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003c6c:	e003      	b.n	8003c76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003c6e:	887b      	ldrh	r3, [r7, #2]
 8003c70:	041a      	lsls	r2, r3, #16
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	619a      	str	r2, [r3, #24]
}
 8003c76:	bf00      	nop
 8003c78:	370c      	adds	r7, #12
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr
	...

08003c84 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003c8c:	4b29      	ldr	r3, [pc, #164]	@ (8003d34 <HAL_PWREx_ConfigSupply+0xb0>)
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	f003 0307 	and.w	r3, r3, #7
 8003c94:	2b06      	cmp	r3, #6
 8003c96:	d00a      	beq.n	8003cae <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003c98:	4b26      	ldr	r3, [pc, #152]	@ (8003d34 <HAL_PWREx_ConfigSupply+0xb0>)
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d001      	beq.n	8003caa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e040      	b.n	8003d2c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003caa:	2300      	movs	r3, #0
 8003cac:	e03e      	b.n	8003d2c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003cae:	4b21      	ldr	r3, [pc, #132]	@ (8003d34 <HAL_PWREx_ConfigSupply+0xb0>)
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8003cb6:	491f      	ldr	r1, [pc, #124]	@ (8003d34 <HAL_PWREx_ConfigSupply+0xb0>)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003cbe:	f7fe f963 	bl	8001f88 <HAL_GetTick>
 8003cc2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003cc4:	e009      	b.n	8003cda <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003cc6:	f7fe f95f 	bl	8001f88 <HAL_GetTick>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003cd4:	d901      	bls.n	8003cda <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e028      	b.n	8003d2c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003cda:	4b16      	ldr	r3, [pc, #88]	@ (8003d34 <HAL_PWREx_ConfigSupply+0xb0>)
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ce2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ce6:	d1ee      	bne.n	8003cc6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2b1e      	cmp	r3, #30
 8003cec:	d008      	beq.n	8003d00 <HAL_PWREx_ConfigSupply+0x7c>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2b2e      	cmp	r3, #46	@ 0x2e
 8003cf2:	d005      	beq.n	8003d00 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2b1d      	cmp	r3, #29
 8003cf8:	d002      	beq.n	8003d00 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2b2d      	cmp	r3, #45	@ 0x2d
 8003cfe:	d114      	bne.n	8003d2a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003d00:	f7fe f942 	bl	8001f88 <HAL_GetTick>
 8003d04:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003d06:	e009      	b.n	8003d1c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003d08:	f7fe f93e 	bl	8001f88 <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003d16:	d901      	bls.n	8003d1c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e007      	b.n	8003d2c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003d1c:	4b05      	ldr	r3, [pc, #20]	@ (8003d34 <HAL_PWREx_ConfigSupply+0xb0>)
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d28:	d1ee      	bne.n	8003d08 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003d2a:	2300      	movs	r3, #0
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3710      	adds	r7, #16
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	58024800 	.word	0x58024800

08003d38 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b08c      	sub	sp, #48	@ 0x30
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d102      	bne.n	8003d4c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	f000 bc1f 	b.w	800458a <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0301 	and.w	r3, r3, #1
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	f000 80b3 	beq.w	8003ec0 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d5a:	4b95      	ldr	r3, [pc, #596]	@ (8003fb0 <HAL_RCC_OscConfig+0x278>)
 8003d5c:	691b      	ldr	r3, [r3, #16]
 8003d5e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003d62:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003d64:	4b92      	ldr	r3, [pc, #584]	@ (8003fb0 <HAL_RCC_OscConfig+0x278>)
 8003d66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d68:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003d6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d6c:	2b10      	cmp	r3, #16
 8003d6e:	d007      	beq.n	8003d80 <HAL_RCC_OscConfig+0x48>
 8003d70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d72:	2b18      	cmp	r3, #24
 8003d74:	d112      	bne.n	8003d9c <HAL_RCC_OscConfig+0x64>
 8003d76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d78:	f003 0303 	and.w	r3, r3, #3
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	d10d      	bne.n	8003d9c <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d80:	4b8b      	ldr	r3, [pc, #556]	@ (8003fb0 <HAL_RCC_OscConfig+0x278>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	f000 8098 	beq.w	8003ebe <HAL_RCC_OscConfig+0x186>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	f040 8093 	bne.w	8003ebe <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e3f6      	b.n	800458a <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003da4:	d106      	bne.n	8003db4 <HAL_RCC_OscConfig+0x7c>
 8003da6:	4b82      	ldr	r3, [pc, #520]	@ (8003fb0 <HAL_RCC_OscConfig+0x278>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a81      	ldr	r2, [pc, #516]	@ (8003fb0 <HAL_RCC_OscConfig+0x278>)
 8003dac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003db0:	6013      	str	r3, [r2, #0]
 8003db2:	e058      	b.n	8003e66 <HAL_RCC_OscConfig+0x12e>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d112      	bne.n	8003de2 <HAL_RCC_OscConfig+0xaa>
 8003dbc:	4b7c      	ldr	r3, [pc, #496]	@ (8003fb0 <HAL_RCC_OscConfig+0x278>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a7b      	ldr	r2, [pc, #492]	@ (8003fb0 <HAL_RCC_OscConfig+0x278>)
 8003dc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003dc6:	6013      	str	r3, [r2, #0]
 8003dc8:	4b79      	ldr	r3, [pc, #484]	@ (8003fb0 <HAL_RCC_OscConfig+0x278>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a78      	ldr	r2, [pc, #480]	@ (8003fb0 <HAL_RCC_OscConfig+0x278>)
 8003dce:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003dd2:	6013      	str	r3, [r2, #0]
 8003dd4:	4b76      	ldr	r3, [pc, #472]	@ (8003fb0 <HAL_RCC_OscConfig+0x278>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a75      	ldr	r2, [pc, #468]	@ (8003fb0 <HAL_RCC_OscConfig+0x278>)
 8003dda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003dde:	6013      	str	r3, [r2, #0]
 8003de0:	e041      	b.n	8003e66 <HAL_RCC_OscConfig+0x12e>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003dea:	d112      	bne.n	8003e12 <HAL_RCC_OscConfig+0xda>
 8003dec:	4b70      	ldr	r3, [pc, #448]	@ (8003fb0 <HAL_RCC_OscConfig+0x278>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a6f      	ldr	r2, [pc, #444]	@ (8003fb0 <HAL_RCC_OscConfig+0x278>)
 8003df2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003df6:	6013      	str	r3, [r2, #0]
 8003df8:	4b6d      	ldr	r3, [pc, #436]	@ (8003fb0 <HAL_RCC_OscConfig+0x278>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a6c      	ldr	r2, [pc, #432]	@ (8003fb0 <HAL_RCC_OscConfig+0x278>)
 8003dfe:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003e02:	6013      	str	r3, [r2, #0]
 8003e04:	4b6a      	ldr	r3, [pc, #424]	@ (8003fb0 <HAL_RCC_OscConfig+0x278>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a69      	ldr	r2, [pc, #420]	@ (8003fb0 <HAL_RCC_OscConfig+0x278>)
 8003e0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e0e:	6013      	str	r3, [r2, #0]
 8003e10:	e029      	b.n	8003e66 <HAL_RCC_OscConfig+0x12e>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8003e1a:	d112      	bne.n	8003e42 <HAL_RCC_OscConfig+0x10a>
 8003e1c:	4b64      	ldr	r3, [pc, #400]	@ (8003fb0 <HAL_RCC_OscConfig+0x278>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a63      	ldr	r2, [pc, #396]	@ (8003fb0 <HAL_RCC_OscConfig+0x278>)
 8003e22:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e26:	6013      	str	r3, [r2, #0]
 8003e28:	4b61      	ldr	r3, [pc, #388]	@ (8003fb0 <HAL_RCC_OscConfig+0x278>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a60      	ldr	r2, [pc, #384]	@ (8003fb0 <HAL_RCC_OscConfig+0x278>)
 8003e2e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e32:	6013      	str	r3, [r2, #0]
 8003e34:	4b5e      	ldr	r3, [pc, #376]	@ (8003fb0 <HAL_RCC_OscConfig+0x278>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a5d      	ldr	r2, [pc, #372]	@ (8003fb0 <HAL_RCC_OscConfig+0x278>)
 8003e3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e3e:	6013      	str	r3, [r2, #0]
 8003e40:	e011      	b.n	8003e66 <HAL_RCC_OscConfig+0x12e>
 8003e42:	4b5b      	ldr	r3, [pc, #364]	@ (8003fb0 <HAL_RCC_OscConfig+0x278>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a5a      	ldr	r2, [pc, #360]	@ (8003fb0 <HAL_RCC_OscConfig+0x278>)
 8003e48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e4c:	6013      	str	r3, [r2, #0]
 8003e4e:	4b58      	ldr	r3, [pc, #352]	@ (8003fb0 <HAL_RCC_OscConfig+0x278>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a57      	ldr	r2, [pc, #348]	@ (8003fb0 <HAL_RCC_OscConfig+0x278>)
 8003e54:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e58:	6013      	str	r3, [r2, #0]
 8003e5a:	4b55      	ldr	r3, [pc, #340]	@ (8003fb0 <HAL_RCC_OscConfig+0x278>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a54      	ldr	r2, [pc, #336]	@ (8003fb0 <HAL_RCC_OscConfig+0x278>)
 8003e60:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003e64:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d013      	beq.n	8003e96 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e6e:	f7fe f88b 	bl	8001f88 <HAL_GetTick>
 8003e72:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003e74:	e008      	b.n	8003e88 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e76:	f7fe f887 	bl	8001f88 <HAL_GetTick>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	2b64      	cmp	r3, #100	@ 0x64
 8003e82:	d901      	bls.n	8003e88 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8003e84:	2303      	movs	r3, #3
 8003e86:	e380      	b.n	800458a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003e88:	4b49      	ldr	r3, [pc, #292]	@ (8003fb0 <HAL_RCC_OscConfig+0x278>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d0f0      	beq.n	8003e76 <HAL_RCC_OscConfig+0x13e>
 8003e94:	e014      	b.n	8003ec0 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e96:	f7fe f877 	bl	8001f88 <HAL_GetTick>
 8003e9a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003e9c:	e008      	b.n	8003eb0 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e9e:	f7fe f873 	bl	8001f88 <HAL_GetTick>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	2b64      	cmp	r3, #100	@ 0x64
 8003eaa:	d901      	bls.n	8003eb0 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	e36c      	b.n	800458a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003eb0:	4b3f      	ldr	r3, [pc, #252]	@ (8003fb0 <HAL_RCC_OscConfig+0x278>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d1f0      	bne.n	8003e9e <HAL_RCC_OscConfig+0x166>
 8003ebc:	e000      	b.n	8003ec0 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ebe:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0302 	and.w	r3, r3, #2
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	f000 808c 	beq.w	8003fe6 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ece:	4b38      	ldr	r3, [pc, #224]	@ (8003fb0 <HAL_RCC_OscConfig+0x278>)
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003ed6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003ed8:	4b35      	ldr	r3, [pc, #212]	@ (8003fb0 <HAL_RCC_OscConfig+0x278>)
 8003eda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003edc:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003ede:	6a3b      	ldr	r3, [r7, #32]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d007      	beq.n	8003ef4 <HAL_RCC_OscConfig+0x1bc>
 8003ee4:	6a3b      	ldr	r3, [r7, #32]
 8003ee6:	2b18      	cmp	r3, #24
 8003ee8:	d137      	bne.n	8003f5a <HAL_RCC_OscConfig+0x222>
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	f003 0303 	and.w	r3, r3, #3
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d132      	bne.n	8003f5a <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ef4:	4b2e      	ldr	r3, [pc, #184]	@ (8003fb0 <HAL_RCC_OscConfig+0x278>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0304 	and.w	r3, r3, #4
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d005      	beq.n	8003f0c <HAL_RCC_OscConfig+0x1d4>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d101      	bne.n	8003f0c <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e33e      	b.n	800458a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003f0c:	4b28      	ldr	r3, [pc, #160]	@ (8003fb0 <HAL_RCC_OscConfig+0x278>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f023 0219 	bic.w	r2, r3, #25
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	4925      	ldr	r1, [pc, #148]	@ (8003fb0 <HAL_RCC_OscConfig+0x278>)
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f1e:	f7fe f833 	bl	8001f88 <HAL_GetTick>
 8003f22:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f24:	e008      	b.n	8003f38 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f26:	f7fe f82f 	bl	8001f88 <HAL_GetTick>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f2e:	1ad3      	subs	r3, r2, r3
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	d901      	bls.n	8003f38 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003f34:	2303      	movs	r3, #3
 8003f36:	e328      	b.n	800458a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f38:	4b1d      	ldr	r3, [pc, #116]	@ (8003fb0 <HAL_RCC_OscConfig+0x278>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0304 	and.w	r3, r3, #4
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d0f0      	beq.n	8003f26 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f44:	4b1a      	ldr	r3, [pc, #104]	@ (8003fb0 <HAL_RCC_OscConfig+0x278>)
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	691b      	ldr	r3, [r3, #16]
 8003f50:	061b      	lsls	r3, r3, #24
 8003f52:	4917      	ldr	r1, [pc, #92]	@ (8003fb0 <HAL_RCC_OscConfig+0x278>)
 8003f54:	4313      	orrs	r3, r2
 8003f56:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f58:	e045      	b.n	8003fe6 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d028      	beq.n	8003fb4 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003f62:	4b13      	ldr	r3, [pc, #76]	@ (8003fb0 <HAL_RCC_OscConfig+0x278>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f023 0219 	bic.w	r2, r3, #25
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	4910      	ldr	r1, [pc, #64]	@ (8003fb0 <HAL_RCC_OscConfig+0x278>)
 8003f70:	4313      	orrs	r3, r2
 8003f72:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f74:	f7fe f808 	bl	8001f88 <HAL_GetTick>
 8003f78:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f7a:	e008      	b.n	8003f8e <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f7c:	f7fe f804 	bl	8001f88 <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d901      	bls.n	8003f8e <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e2fd      	b.n	800458a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f8e:	4b08      	ldr	r3, [pc, #32]	@ (8003fb0 <HAL_RCC_OscConfig+0x278>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0304 	and.w	r3, r3, #4
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d0f0      	beq.n	8003f7c <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f9a:	4b05      	ldr	r3, [pc, #20]	@ (8003fb0 <HAL_RCC_OscConfig+0x278>)
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	691b      	ldr	r3, [r3, #16]
 8003fa6:	061b      	lsls	r3, r3, #24
 8003fa8:	4901      	ldr	r1, [pc, #4]	@ (8003fb0 <HAL_RCC_OscConfig+0x278>)
 8003faa:	4313      	orrs	r3, r2
 8003fac:	604b      	str	r3, [r1, #4]
 8003fae:	e01a      	b.n	8003fe6 <HAL_RCC_OscConfig+0x2ae>
 8003fb0:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fb4:	4b97      	ldr	r3, [pc, #604]	@ (8004214 <HAL_RCC_OscConfig+0x4dc>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a96      	ldr	r2, [pc, #600]	@ (8004214 <HAL_RCC_OscConfig+0x4dc>)
 8003fba:	f023 0301 	bic.w	r3, r3, #1
 8003fbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fc0:	f7fd ffe2 	bl	8001f88 <HAL_GetTick>
 8003fc4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003fc6:	e008      	b.n	8003fda <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fc8:	f7fd ffde 	bl	8001f88 <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d901      	bls.n	8003fda <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e2d7      	b.n	800458a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003fda:	4b8e      	ldr	r3, [pc, #568]	@ (8004214 <HAL_RCC_OscConfig+0x4dc>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0304 	and.w	r3, r3, #4
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d1f0      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0310 	and.w	r3, r3, #16
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d06a      	beq.n	80040c8 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ff2:	4b88      	ldr	r3, [pc, #544]	@ (8004214 <HAL_RCC_OscConfig+0x4dc>)
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003ffa:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003ffc:	4b85      	ldr	r3, [pc, #532]	@ (8004214 <HAL_RCC_OscConfig+0x4dc>)
 8003ffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004000:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	2b08      	cmp	r3, #8
 8004006:	d007      	beq.n	8004018 <HAL_RCC_OscConfig+0x2e0>
 8004008:	69bb      	ldr	r3, [r7, #24]
 800400a:	2b18      	cmp	r3, #24
 800400c:	d11b      	bne.n	8004046 <HAL_RCC_OscConfig+0x30e>
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	f003 0303 	and.w	r3, r3, #3
 8004014:	2b01      	cmp	r3, #1
 8004016:	d116      	bne.n	8004046 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004018:	4b7e      	ldr	r3, [pc, #504]	@ (8004214 <HAL_RCC_OscConfig+0x4dc>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004020:	2b00      	cmp	r3, #0
 8004022:	d005      	beq.n	8004030 <HAL_RCC_OscConfig+0x2f8>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	69db      	ldr	r3, [r3, #28]
 8004028:	2b80      	cmp	r3, #128	@ 0x80
 800402a:	d001      	beq.n	8004030 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	e2ac      	b.n	800458a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004030:	4b78      	ldr	r3, [pc, #480]	@ (8004214 <HAL_RCC_OscConfig+0x4dc>)
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6a1b      	ldr	r3, [r3, #32]
 800403c:	061b      	lsls	r3, r3, #24
 800403e:	4975      	ldr	r1, [pc, #468]	@ (8004214 <HAL_RCC_OscConfig+0x4dc>)
 8004040:	4313      	orrs	r3, r2
 8004042:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004044:	e040      	b.n	80040c8 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	69db      	ldr	r3, [r3, #28]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d023      	beq.n	8004096 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800404e:	4b71      	ldr	r3, [pc, #452]	@ (8004214 <HAL_RCC_OscConfig+0x4dc>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a70      	ldr	r2, [pc, #448]	@ (8004214 <HAL_RCC_OscConfig+0x4dc>)
 8004054:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004058:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800405a:	f7fd ff95 	bl	8001f88 <HAL_GetTick>
 800405e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004060:	e008      	b.n	8004074 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004062:	f7fd ff91 	bl	8001f88 <HAL_GetTick>
 8004066:	4602      	mov	r2, r0
 8004068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	2b02      	cmp	r3, #2
 800406e:	d901      	bls.n	8004074 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8004070:	2303      	movs	r3, #3
 8004072:	e28a      	b.n	800458a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004074:	4b67      	ldr	r3, [pc, #412]	@ (8004214 <HAL_RCC_OscConfig+0x4dc>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800407c:	2b00      	cmp	r3, #0
 800407e:	d0f0      	beq.n	8004062 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004080:	4b64      	ldr	r3, [pc, #400]	@ (8004214 <HAL_RCC_OscConfig+0x4dc>)
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6a1b      	ldr	r3, [r3, #32]
 800408c:	061b      	lsls	r3, r3, #24
 800408e:	4961      	ldr	r1, [pc, #388]	@ (8004214 <HAL_RCC_OscConfig+0x4dc>)
 8004090:	4313      	orrs	r3, r2
 8004092:	60cb      	str	r3, [r1, #12]
 8004094:	e018      	b.n	80040c8 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004096:	4b5f      	ldr	r3, [pc, #380]	@ (8004214 <HAL_RCC_OscConfig+0x4dc>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a5e      	ldr	r2, [pc, #376]	@ (8004214 <HAL_RCC_OscConfig+0x4dc>)
 800409c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80040a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040a2:	f7fd ff71 	bl	8001f88 <HAL_GetTick>
 80040a6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80040a8:	e008      	b.n	80040bc <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80040aa:	f7fd ff6d 	bl	8001f88 <HAL_GetTick>
 80040ae:	4602      	mov	r2, r0
 80040b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040b2:	1ad3      	subs	r3, r2, r3
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	d901      	bls.n	80040bc <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80040b8:	2303      	movs	r3, #3
 80040ba:	e266      	b.n	800458a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80040bc:	4b55      	ldr	r3, [pc, #340]	@ (8004214 <HAL_RCC_OscConfig+0x4dc>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d1f0      	bne.n	80040aa <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0308 	and.w	r3, r3, #8
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d036      	beq.n	8004142 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	695b      	ldr	r3, [r3, #20]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d019      	beq.n	8004110 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040dc:	4b4d      	ldr	r3, [pc, #308]	@ (8004214 <HAL_RCC_OscConfig+0x4dc>)
 80040de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040e0:	4a4c      	ldr	r2, [pc, #304]	@ (8004214 <HAL_RCC_OscConfig+0x4dc>)
 80040e2:	f043 0301 	orr.w	r3, r3, #1
 80040e6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040e8:	f7fd ff4e 	bl	8001f88 <HAL_GetTick>
 80040ec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80040ee:	e008      	b.n	8004102 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040f0:	f7fd ff4a 	bl	8001f88 <HAL_GetTick>
 80040f4:	4602      	mov	r2, r0
 80040f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	d901      	bls.n	8004102 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	e243      	b.n	800458a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004102:	4b44      	ldr	r3, [pc, #272]	@ (8004214 <HAL_RCC_OscConfig+0x4dc>)
 8004104:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004106:	f003 0302 	and.w	r3, r3, #2
 800410a:	2b00      	cmp	r3, #0
 800410c:	d0f0      	beq.n	80040f0 <HAL_RCC_OscConfig+0x3b8>
 800410e:	e018      	b.n	8004142 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004110:	4b40      	ldr	r3, [pc, #256]	@ (8004214 <HAL_RCC_OscConfig+0x4dc>)
 8004112:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004114:	4a3f      	ldr	r2, [pc, #252]	@ (8004214 <HAL_RCC_OscConfig+0x4dc>)
 8004116:	f023 0301 	bic.w	r3, r3, #1
 800411a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800411c:	f7fd ff34 	bl	8001f88 <HAL_GetTick>
 8004120:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004122:	e008      	b.n	8004136 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004124:	f7fd ff30 	bl	8001f88 <HAL_GetTick>
 8004128:	4602      	mov	r2, r0
 800412a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	2b02      	cmp	r3, #2
 8004130:	d901      	bls.n	8004136 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e229      	b.n	800458a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004136:	4b37      	ldr	r3, [pc, #220]	@ (8004214 <HAL_RCC_OscConfig+0x4dc>)
 8004138:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800413a:	f003 0302 	and.w	r3, r3, #2
 800413e:	2b00      	cmp	r3, #0
 8004140:	d1f0      	bne.n	8004124 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0320 	and.w	r3, r3, #32
 800414a:	2b00      	cmp	r3, #0
 800414c:	d036      	beq.n	80041bc <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	699b      	ldr	r3, [r3, #24]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d019      	beq.n	800418a <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004156:	4b2f      	ldr	r3, [pc, #188]	@ (8004214 <HAL_RCC_OscConfig+0x4dc>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a2e      	ldr	r2, [pc, #184]	@ (8004214 <HAL_RCC_OscConfig+0x4dc>)
 800415c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004160:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004162:	f7fd ff11 	bl	8001f88 <HAL_GetTick>
 8004166:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004168:	e008      	b.n	800417c <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800416a:	f7fd ff0d 	bl	8001f88 <HAL_GetTick>
 800416e:	4602      	mov	r2, r0
 8004170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004172:	1ad3      	subs	r3, r2, r3
 8004174:	2b02      	cmp	r3, #2
 8004176:	d901      	bls.n	800417c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8004178:	2303      	movs	r3, #3
 800417a:	e206      	b.n	800458a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800417c:	4b25      	ldr	r3, [pc, #148]	@ (8004214 <HAL_RCC_OscConfig+0x4dc>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004184:	2b00      	cmp	r3, #0
 8004186:	d0f0      	beq.n	800416a <HAL_RCC_OscConfig+0x432>
 8004188:	e018      	b.n	80041bc <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800418a:	4b22      	ldr	r3, [pc, #136]	@ (8004214 <HAL_RCC_OscConfig+0x4dc>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a21      	ldr	r2, [pc, #132]	@ (8004214 <HAL_RCC_OscConfig+0x4dc>)
 8004190:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004194:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004196:	f7fd fef7 	bl	8001f88 <HAL_GetTick>
 800419a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800419c:	e008      	b.n	80041b0 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800419e:	f7fd fef3 	bl	8001f88 <HAL_GetTick>
 80041a2:	4602      	mov	r2, r0
 80041a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041a6:	1ad3      	subs	r3, r2, r3
 80041a8:	2b02      	cmp	r3, #2
 80041aa:	d901      	bls.n	80041b0 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80041ac:	2303      	movs	r3, #3
 80041ae:	e1ec      	b.n	800458a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80041b0:	4b18      	ldr	r3, [pc, #96]	@ (8004214 <HAL_RCC_OscConfig+0x4dc>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d1f0      	bne.n	800419e <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0304 	and.w	r3, r3, #4
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	f000 80af 	beq.w	8004328 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80041ca:	4b13      	ldr	r3, [pc, #76]	@ (8004218 <HAL_RCC_OscConfig+0x4e0>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a12      	ldr	r2, [pc, #72]	@ (8004218 <HAL_RCC_OscConfig+0x4e0>)
 80041d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041d4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80041d6:	f7fd fed7 	bl	8001f88 <HAL_GetTick>
 80041da:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80041dc:	e008      	b.n	80041f0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041de:	f7fd fed3 	bl	8001f88 <HAL_GetTick>
 80041e2:	4602      	mov	r2, r0
 80041e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e6:	1ad3      	subs	r3, r2, r3
 80041e8:	2b64      	cmp	r3, #100	@ 0x64
 80041ea:	d901      	bls.n	80041f0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80041ec:	2303      	movs	r3, #3
 80041ee:	e1cc      	b.n	800458a <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80041f0:	4b09      	ldr	r3, [pc, #36]	@ (8004218 <HAL_RCC_OscConfig+0x4e0>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d0f0      	beq.n	80041de <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	2b01      	cmp	r3, #1
 8004202:	d10b      	bne.n	800421c <HAL_RCC_OscConfig+0x4e4>
 8004204:	4b03      	ldr	r3, [pc, #12]	@ (8004214 <HAL_RCC_OscConfig+0x4dc>)
 8004206:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004208:	4a02      	ldr	r2, [pc, #8]	@ (8004214 <HAL_RCC_OscConfig+0x4dc>)
 800420a:	f043 0301 	orr.w	r3, r3, #1
 800420e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004210:	e05b      	b.n	80042ca <HAL_RCC_OscConfig+0x592>
 8004212:	bf00      	nop
 8004214:	58024400 	.word	0x58024400
 8004218:	58024800 	.word	0x58024800
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d112      	bne.n	800424a <HAL_RCC_OscConfig+0x512>
 8004224:	4b9d      	ldr	r3, [pc, #628]	@ (800449c <HAL_RCC_OscConfig+0x764>)
 8004226:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004228:	4a9c      	ldr	r2, [pc, #624]	@ (800449c <HAL_RCC_OscConfig+0x764>)
 800422a:	f023 0301 	bic.w	r3, r3, #1
 800422e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004230:	4b9a      	ldr	r3, [pc, #616]	@ (800449c <HAL_RCC_OscConfig+0x764>)
 8004232:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004234:	4a99      	ldr	r2, [pc, #612]	@ (800449c <HAL_RCC_OscConfig+0x764>)
 8004236:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800423a:	6713      	str	r3, [r2, #112]	@ 0x70
 800423c:	4b97      	ldr	r3, [pc, #604]	@ (800449c <HAL_RCC_OscConfig+0x764>)
 800423e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004240:	4a96      	ldr	r2, [pc, #600]	@ (800449c <HAL_RCC_OscConfig+0x764>)
 8004242:	f023 0304 	bic.w	r3, r3, #4
 8004246:	6713      	str	r3, [r2, #112]	@ 0x70
 8004248:	e03f      	b.n	80042ca <HAL_RCC_OscConfig+0x592>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	2b05      	cmp	r3, #5
 8004250:	d112      	bne.n	8004278 <HAL_RCC_OscConfig+0x540>
 8004252:	4b92      	ldr	r3, [pc, #584]	@ (800449c <HAL_RCC_OscConfig+0x764>)
 8004254:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004256:	4a91      	ldr	r2, [pc, #580]	@ (800449c <HAL_RCC_OscConfig+0x764>)
 8004258:	f043 0304 	orr.w	r3, r3, #4
 800425c:	6713      	str	r3, [r2, #112]	@ 0x70
 800425e:	4b8f      	ldr	r3, [pc, #572]	@ (800449c <HAL_RCC_OscConfig+0x764>)
 8004260:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004262:	4a8e      	ldr	r2, [pc, #568]	@ (800449c <HAL_RCC_OscConfig+0x764>)
 8004264:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004268:	6713      	str	r3, [r2, #112]	@ 0x70
 800426a:	4b8c      	ldr	r3, [pc, #560]	@ (800449c <HAL_RCC_OscConfig+0x764>)
 800426c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800426e:	4a8b      	ldr	r2, [pc, #556]	@ (800449c <HAL_RCC_OscConfig+0x764>)
 8004270:	f043 0301 	orr.w	r3, r3, #1
 8004274:	6713      	str	r3, [r2, #112]	@ 0x70
 8004276:	e028      	b.n	80042ca <HAL_RCC_OscConfig+0x592>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	2b85      	cmp	r3, #133	@ 0x85
 800427e:	d112      	bne.n	80042a6 <HAL_RCC_OscConfig+0x56e>
 8004280:	4b86      	ldr	r3, [pc, #536]	@ (800449c <HAL_RCC_OscConfig+0x764>)
 8004282:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004284:	4a85      	ldr	r2, [pc, #532]	@ (800449c <HAL_RCC_OscConfig+0x764>)
 8004286:	f043 0304 	orr.w	r3, r3, #4
 800428a:	6713      	str	r3, [r2, #112]	@ 0x70
 800428c:	4b83      	ldr	r3, [pc, #524]	@ (800449c <HAL_RCC_OscConfig+0x764>)
 800428e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004290:	4a82      	ldr	r2, [pc, #520]	@ (800449c <HAL_RCC_OscConfig+0x764>)
 8004292:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004296:	6713      	str	r3, [r2, #112]	@ 0x70
 8004298:	4b80      	ldr	r3, [pc, #512]	@ (800449c <HAL_RCC_OscConfig+0x764>)
 800429a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800429c:	4a7f      	ldr	r2, [pc, #508]	@ (800449c <HAL_RCC_OscConfig+0x764>)
 800429e:	f043 0301 	orr.w	r3, r3, #1
 80042a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80042a4:	e011      	b.n	80042ca <HAL_RCC_OscConfig+0x592>
 80042a6:	4b7d      	ldr	r3, [pc, #500]	@ (800449c <HAL_RCC_OscConfig+0x764>)
 80042a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042aa:	4a7c      	ldr	r2, [pc, #496]	@ (800449c <HAL_RCC_OscConfig+0x764>)
 80042ac:	f023 0301 	bic.w	r3, r3, #1
 80042b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80042b2:	4b7a      	ldr	r3, [pc, #488]	@ (800449c <HAL_RCC_OscConfig+0x764>)
 80042b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042b6:	4a79      	ldr	r2, [pc, #484]	@ (800449c <HAL_RCC_OscConfig+0x764>)
 80042b8:	f023 0304 	bic.w	r3, r3, #4
 80042bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80042be:	4b77      	ldr	r3, [pc, #476]	@ (800449c <HAL_RCC_OscConfig+0x764>)
 80042c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042c2:	4a76      	ldr	r2, [pc, #472]	@ (800449c <HAL_RCC_OscConfig+0x764>)
 80042c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80042c8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d015      	beq.n	80042fe <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042d2:	f7fd fe59 	bl	8001f88 <HAL_GetTick>
 80042d6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042d8:	e00a      	b.n	80042f0 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042da:	f7fd fe55 	bl	8001f88 <HAL_GetTick>
 80042de:	4602      	mov	r2, r0
 80042e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d901      	bls.n	80042f0 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 80042ec:	2303      	movs	r3, #3
 80042ee:	e14c      	b.n	800458a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042f0:	4b6a      	ldr	r3, [pc, #424]	@ (800449c <HAL_RCC_OscConfig+0x764>)
 80042f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042f4:	f003 0302 	and.w	r3, r3, #2
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d0ee      	beq.n	80042da <HAL_RCC_OscConfig+0x5a2>
 80042fc:	e014      	b.n	8004328 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042fe:	f7fd fe43 	bl	8001f88 <HAL_GetTick>
 8004302:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004304:	e00a      	b.n	800431c <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004306:	f7fd fe3f 	bl	8001f88 <HAL_GetTick>
 800430a:	4602      	mov	r2, r0
 800430c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004314:	4293      	cmp	r3, r2
 8004316:	d901      	bls.n	800431c <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8004318:	2303      	movs	r3, #3
 800431a:	e136      	b.n	800458a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800431c:	4b5f      	ldr	r3, [pc, #380]	@ (800449c <HAL_RCC_OscConfig+0x764>)
 800431e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004320:	f003 0302 	and.w	r3, r3, #2
 8004324:	2b00      	cmp	r3, #0
 8004326:	d1ee      	bne.n	8004306 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800432c:	2b00      	cmp	r3, #0
 800432e:	f000 812b 	beq.w	8004588 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004332:	4b5a      	ldr	r3, [pc, #360]	@ (800449c <HAL_RCC_OscConfig+0x764>)
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800433a:	2b18      	cmp	r3, #24
 800433c:	f000 80bb 	beq.w	80044b6 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004344:	2b02      	cmp	r3, #2
 8004346:	f040 8095 	bne.w	8004474 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800434a:	4b54      	ldr	r3, [pc, #336]	@ (800449c <HAL_RCC_OscConfig+0x764>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a53      	ldr	r2, [pc, #332]	@ (800449c <HAL_RCC_OscConfig+0x764>)
 8004350:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004354:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004356:	f7fd fe17 	bl	8001f88 <HAL_GetTick>
 800435a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800435c:	e008      	b.n	8004370 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800435e:	f7fd fe13 	bl	8001f88 <HAL_GetTick>
 8004362:	4602      	mov	r2, r0
 8004364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004366:	1ad3      	subs	r3, r2, r3
 8004368:	2b02      	cmp	r3, #2
 800436a:	d901      	bls.n	8004370 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 800436c:	2303      	movs	r3, #3
 800436e:	e10c      	b.n	800458a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004370:	4b4a      	ldr	r3, [pc, #296]	@ (800449c <HAL_RCC_OscConfig+0x764>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004378:	2b00      	cmp	r3, #0
 800437a:	d1f0      	bne.n	800435e <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800437c:	4b47      	ldr	r3, [pc, #284]	@ (800449c <HAL_RCC_OscConfig+0x764>)
 800437e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004380:	4b47      	ldr	r3, [pc, #284]	@ (80044a0 <HAL_RCC_OscConfig+0x768>)
 8004382:	4013      	ands	r3, r2
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800438c:	0112      	lsls	r2, r2, #4
 800438e:	430a      	orrs	r2, r1
 8004390:	4942      	ldr	r1, [pc, #264]	@ (800449c <HAL_RCC_OscConfig+0x764>)
 8004392:	4313      	orrs	r3, r2
 8004394:	628b      	str	r3, [r1, #40]	@ 0x28
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800439a:	3b01      	subs	r3, #1
 800439c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043a4:	3b01      	subs	r3, #1
 80043a6:	025b      	lsls	r3, r3, #9
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	431a      	orrs	r2, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043b0:	3b01      	subs	r3, #1
 80043b2:	041b      	lsls	r3, r3, #16
 80043b4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80043b8:	431a      	orrs	r2, r3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043be:	3b01      	subs	r3, #1
 80043c0:	061b      	lsls	r3, r3, #24
 80043c2:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80043c6:	4935      	ldr	r1, [pc, #212]	@ (800449c <HAL_RCC_OscConfig+0x764>)
 80043c8:	4313      	orrs	r3, r2
 80043ca:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80043cc:	4b33      	ldr	r3, [pc, #204]	@ (800449c <HAL_RCC_OscConfig+0x764>)
 80043ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043d0:	4a32      	ldr	r2, [pc, #200]	@ (800449c <HAL_RCC_OscConfig+0x764>)
 80043d2:	f023 0301 	bic.w	r3, r3, #1
 80043d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80043d8:	4b30      	ldr	r3, [pc, #192]	@ (800449c <HAL_RCC_OscConfig+0x764>)
 80043da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80043dc:	4b31      	ldr	r3, [pc, #196]	@ (80044a4 <HAL_RCC_OscConfig+0x76c>)
 80043de:	4013      	ands	r3, r2
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80043e4:	00d2      	lsls	r2, r2, #3
 80043e6:	492d      	ldr	r1, [pc, #180]	@ (800449c <HAL_RCC_OscConfig+0x764>)
 80043e8:	4313      	orrs	r3, r2
 80043ea:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80043ec:	4b2b      	ldr	r3, [pc, #172]	@ (800449c <HAL_RCC_OscConfig+0x764>)
 80043ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043f0:	f023 020c 	bic.w	r2, r3, #12
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043f8:	4928      	ldr	r1, [pc, #160]	@ (800449c <HAL_RCC_OscConfig+0x764>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80043fe:	4b27      	ldr	r3, [pc, #156]	@ (800449c <HAL_RCC_OscConfig+0x764>)
 8004400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004402:	f023 0202 	bic.w	r2, r3, #2
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800440a:	4924      	ldr	r1, [pc, #144]	@ (800449c <HAL_RCC_OscConfig+0x764>)
 800440c:	4313      	orrs	r3, r2
 800440e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004410:	4b22      	ldr	r3, [pc, #136]	@ (800449c <HAL_RCC_OscConfig+0x764>)
 8004412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004414:	4a21      	ldr	r2, [pc, #132]	@ (800449c <HAL_RCC_OscConfig+0x764>)
 8004416:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800441a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800441c:	4b1f      	ldr	r3, [pc, #124]	@ (800449c <HAL_RCC_OscConfig+0x764>)
 800441e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004420:	4a1e      	ldr	r2, [pc, #120]	@ (800449c <HAL_RCC_OscConfig+0x764>)
 8004422:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004426:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004428:	4b1c      	ldr	r3, [pc, #112]	@ (800449c <HAL_RCC_OscConfig+0x764>)
 800442a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800442c:	4a1b      	ldr	r2, [pc, #108]	@ (800449c <HAL_RCC_OscConfig+0x764>)
 800442e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004432:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004434:	4b19      	ldr	r3, [pc, #100]	@ (800449c <HAL_RCC_OscConfig+0x764>)
 8004436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004438:	4a18      	ldr	r2, [pc, #96]	@ (800449c <HAL_RCC_OscConfig+0x764>)
 800443a:	f043 0301 	orr.w	r3, r3, #1
 800443e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004440:	4b16      	ldr	r3, [pc, #88]	@ (800449c <HAL_RCC_OscConfig+0x764>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a15      	ldr	r2, [pc, #84]	@ (800449c <HAL_RCC_OscConfig+0x764>)
 8004446:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800444a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800444c:	f7fd fd9c 	bl	8001f88 <HAL_GetTick>
 8004450:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004452:	e008      	b.n	8004466 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004454:	f7fd fd98 	bl	8001f88 <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	2b02      	cmp	r3, #2
 8004460:	d901      	bls.n	8004466 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	e091      	b.n	800458a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004466:	4b0d      	ldr	r3, [pc, #52]	@ (800449c <HAL_RCC_OscConfig+0x764>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800446e:	2b00      	cmp	r3, #0
 8004470:	d0f0      	beq.n	8004454 <HAL_RCC_OscConfig+0x71c>
 8004472:	e089      	b.n	8004588 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004474:	4b09      	ldr	r3, [pc, #36]	@ (800449c <HAL_RCC_OscConfig+0x764>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a08      	ldr	r2, [pc, #32]	@ (800449c <HAL_RCC_OscConfig+0x764>)
 800447a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800447e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004480:	f7fd fd82 	bl	8001f88 <HAL_GetTick>
 8004484:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004486:	e00f      	b.n	80044a8 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004488:	f7fd fd7e 	bl	8001f88 <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	2b02      	cmp	r3, #2
 8004494:	d908      	bls.n	80044a8 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e077      	b.n	800458a <HAL_RCC_OscConfig+0x852>
 800449a:	bf00      	nop
 800449c:	58024400 	.word	0x58024400
 80044a0:	fffffc0c 	.word	0xfffffc0c
 80044a4:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80044a8:	4b3a      	ldr	r3, [pc, #232]	@ (8004594 <HAL_RCC_OscConfig+0x85c>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d1e9      	bne.n	8004488 <HAL_RCC_OscConfig+0x750>
 80044b4:	e068      	b.n	8004588 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80044b6:	4b37      	ldr	r3, [pc, #220]	@ (8004594 <HAL_RCC_OscConfig+0x85c>)
 80044b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044ba:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80044bc:	4b35      	ldr	r3, [pc, #212]	@ (8004594 <HAL_RCC_OscConfig+0x85c>)
 80044be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044c0:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d031      	beq.n	800452e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	f003 0203 	and.w	r2, r3, #3
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d12a      	bne.n	800452e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	091b      	lsrs	r3, r3, #4
 80044dc:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d122      	bne.n	800452e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044f2:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d11a      	bne.n	800452e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	0a5b      	lsrs	r3, r3, #9
 80044fc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004504:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004506:	429a      	cmp	r2, r3
 8004508:	d111      	bne.n	800452e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	0c1b      	lsrs	r3, r3, #16
 800450e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004516:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004518:	429a      	cmp	r2, r3
 800451a:	d108      	bne.n	800452e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	0e1b      	lsrs	r3, r3, #24
 8004520:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004528:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800452a:	429a      	cmp	r2, r3
 800452c:	d001      	beq.n	8004532 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e02b      	b.n	800458a <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004532:	4b18      	ldr	r3, [pc, #96]	@ (8004594 <HAL_RCC_OscConfig+0x85c>)
 8004534:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004536:	08db      	lsrs	r3, r3, #3
 8004538:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800453c:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004542:	693a      	ldr	r2, [r7, #16]
 8004544:	429a      	cmp	r2, r3
 8004546:	d01f      	beq.n	8004588 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004548:	4b12      	ldr	r3, [pc, #72]	@ (8004594 <HAL_RCC_OscConfig+0x85c>)
 800454a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800454c:	4a11      	ldr	r2, [pc, #68]	@ (8004594 <HAL_RCC_OscConfig+0x85c>)
 800454e:	f023 0301 	bic.w	r3, r3, #1
 8004552:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004554:	f7fd fd18 	bl	8001f88 <HAL_GetTick>
 8004558:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800455a:	bf00      	nop
 800455c:	f7fd fd14 	bl	8001f88 <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004564:	4293      	cmp	r3, r2
 8004566:	d0f9      	beq.n	800455c <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004568:	4b0a      	ldr	r3, [pc, #40]	@ (8004594 <HAL_RCC_OscConfig+0x85c>)
 800456a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800456c:	4b0a      	ldr	r3, [pc, #40]	@ (8004598 <HAL_RCC_OscConfig+0x860>)
 800456e:	4013      	ands	r3, r2
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004574:	00d2      	lsls	r2, r2, #3
 8004576:	4907      	ldr	r1, [pc, #28]	@ (8004594 <HAL_RCC_OscConfig+0x85c>)
 8004578:	4313      	orrs	r3, r2
 800457a:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800457c:	4b05      	ldr	r3, [pc, #20]	@ (8004594 <HAL_RCC_OscConfig+0x85c>)
 800457e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004580:	4a04      	ldr	r2, [pc, #16]	@ (8004594 <HAL_RCC_OscConfig+0x85c>)
 8004582:	f043 0301 	orr.w	r3, r3, #1
 8004586:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004588:	2300      	movs	r3, #0
}
 800458a:	4618      	mov	r0, r3
 800458c:	3730      	adds	r7, #48	@ 0x30
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	58024400 	.word	0x58024400
 8004598:	ffff0007 	.word	0xffff0007

0800459c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b086      	sub	sp, #24
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d101      	bne.n	80045b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e19c      	b.n	80048ea <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80045b0:	4b8a      	ldr	r3, [pc, #552]	@ (80047dc <HAL_RCC_ClockConfig+0x240>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 030f 	and.w	r3, r3, #15
 80045b8:	683a      	ldr	r2, [r7, #0]
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d910      	bls.n	80045e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045be:	4b87      	ldr	r3, [pc, #540]	@ (80047dc <HAL_RCC_ClockConfig+0x240>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f023 020f 	bic.w	r2, r3, #15
 80045c6:	4985      	ldr	r1, [pc, #532]	@ (80047dc <HAL_RCC_ClockConfig+0x240>)
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045ce:	4b83      	ldr	r3, [pc, #524]	@ (80047dc <HAL_RCC_ClockConfig+0x240>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 030f 	and.w	r3, r3, #15
 80045d6:	683a      	ldr	r2, [r7, #0]
 80045d8:	429a      	cmp	r2, r3
 80045da:	d001      	beq.n	80045e0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	e184      	b.n	80048ea <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 0304 	and.w	r3, r3, #4
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d010      	beq.n	800460e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	691a      	ldr	r2, [r3, #16]
 80045f0:	4b7b      	ldr	r3, [pc, #492]	@ (80047e0 <HAL_RCC_ClockConfig+0x244>)
 80045f2:	699b      	ldr	r3, [r3, #24]
 80045f4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d908      	bls.n	800460e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80045fc:	4b78      	ldr	r3, [pc, #480]	@ (80047e0 <HAL_RCC_ClockConfig+0x244>)
 80045fe:	699b      	ldr	r3, [r3, #24]
 8004600:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	691b      	ldr	r3, [r3, #16]
 8004608:	4975      	ldr	r1, [pc, #468]	@ (80047e0 <HAL_RCC_ClockConfig+0x244>)
 800460a:	4313      	orrs	r3, r2
 800460c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 0308 	and.w	r3, r3, #8
 8004616:	2b00      	cmp	r3, #0
 8004618:	d010      	beq.n	800463c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	695a      	ldr	r2, [r3, #20]
 800461e:	4b70      	ldr	r3, [pc, #448]	@ (80047e0 <HAL_RCC_ClockConfig+0x244>)
 8004620:	69db      	ldr	r3, [r3, #28]
 8004622:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004626:	429a      	cmp	r2, r3
 8004628:	d908      	bls.n	800463c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800462a:	4b6d      	ldr	r3, [pc, #436]	@ (80047e0 <HAL_RCC_ClockConfig+0x244>)
 800462c:	69db      	ldr	r3, [r3, #28]
 800462e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	695b      	ldr	r3, [r3, #20]
 8004636:	496a      	ldr	r1, [pc, #424]	@ (80047e0 <HAL_RCC_ClockConfig+0x244>)
 8004638:	4313      	orrs	r3, r2
 800463a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 0310 	and.w	r3, r3, #16
 8004644:	2b00      	cmp	r3, #0
 8004646:	d010      	beq.n	800466a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	699a      	ldr	r2, [r3, #24]
 800464c:	4b64      	ldr	r3, [pc, #400]	@ (80047e0 <HAL_RCC_ClockConfig+0x244>)
 800464e:	69db      	ldr	r3, [r3, #28]
 8004650:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004654:	429a      	cmp	r2, r3
 8004656:	d908      	bls.n	800466a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004658:	4b61      	ldr	r3, [pc, #388]	@ (80047e0 <HAL_RCC_ClockConfig+0x244>)
 800465a:	69db      	ldr	r3, [r3, #28]
 800465c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	699b      	ldr	r3, [r3, #24]
 8004664:	495e      	ldr	r1, [pc, #376]	@ (80047e0 <HAL_RCC_ClockConfig+0x244>)
 8004666:	4313      	orrs	r3, r2
 8004668:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0320 	and.w	r3, r3, #32
 8004672:	2b00      	cmp	r3, #0
 8004674:	d010      	beq.n	8004698 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	69da      	ldr	r2, [r3, #28]
 800467a:	4b59      	ldr	r3, [pc, #356]	@ (80047e0 <HAL_RCC_ClockConfig+0x244>)
 800467c:	6a1b      	ldr	r3, [r3, #32]
 800467e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004682:	429a      	cmp	r2, r3
 8004684:	d908      	bls.n	8004698 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004686:	4b56      	ldr	r3, [pc, #344]	@ (80047e0 <HAL_RCC_ClockConfig+0x244>)
 8004688:	6a1b      	ldr	r3, [r3, #32]
 800468a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	69db      	ldr	r3, [r3, #28]
 8004692:	4953      	ldr	r1, [pc, #332]	@ (80047e0 <HAL_RCC_ClockConfig+0x244>)
 8004694:	4313      	orrs	r3, r2
 8004696:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f003 0302 	and.w	r3, r3, #2
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d010      	beq.n	80046c6 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	68da      	ldr	r2, [r3, #12]
 80046a8:	4b4d      	ldr	r3, [pc, #308]	@ (80047e0 <HAL_RCC_ClockConfig+0x244>)
 80046aa:	699b      	ldr	r3, [r3, #24]
 80046ac:	f003 030f 	and.w	r3, r3, #15
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d908      	bls.n	80046c6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046b4:	4b4a      	ldr	r3, [pc, #296]	@ (80047e0 <HAL_RCC_ClockConfig+0x244>)
 80046b6:	699b      	ldr	r3, [r3, #24]
 80046b8:	f023 020f 	bic.w	r2, r3, #15
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	4947      	ldr	r1, [pc, #284]	@ (80047e0 <HAL_RCC_ClockConfig+0x244>)
 80046c2:	4313      	orrs	r3, r2
 80046c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0301 	and.w	r3, r3, #1
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d055      	beq.n	800477e <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80046d2:	4b43      	ldr	r3, [pc, #268]	@ (80047e0 <HAL_RCC_ClockConfig+0x244>)
 80046d4:	699b      	ldr	r3, [r3, #24]
 80046d6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	4940      	ldr	r1, [pc, #256]	@ (80047e0 <HAL_RCC_ClockConfig+0x244>)
 80046e0:	4313      	orrs	r3, r2
 80046e2:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d107      	bne.n	80046fc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80046ec:	4b3c      	ldr	r3, [pc, #240]	@ (80047e0 <HAL_RCC_ClockConfig+0x244>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d121      	bne.n	800473c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	e0f6      	b.n	80048ea <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	2b03      	cmp	r3, #3
 8004702:	d107      	bne.n	8004714 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004704:	4b36      	ldr	r3, [pc, #216]	@ (80047e0 <HAL_RCC_ClockConfig+0x244>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800470c:	2b00      	cmp	r3, #0
 800470e:	d115      	bne.n	800473c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e0ea      	b.n	80048ea <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	2b01      	cmp	r3, #1
 800471a:	d107      	bne.n	800472c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800471c:	4b30      	ldr	r3, [pc, #192]	@ (80047e0 <HAL_RCC_ClockConfig+0x244>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004724:	2b00      	cmp	r3, #0
 8004726:	d109      	bne.n	800473c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e0de      	b.n	80048ea <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800472c:	4b2c      	ldr	r3, [pc, #176]	@ (80047e0 <HAL_RCC_ClockConfig+0x244>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 0304 	and.w	r3, r3, #4
 8004734:	2b00      	cmp	r3, #0
 8004736:	d101      	bne.n	800473c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e0d6      	b.n	80048ea <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800473c:	4b28      	ldr	r3, [pc, #160]	@ (80047e0 <HAL_RCC_ClockConfig+0x244>)
 800473e:	691b      	ldr	r3, [r3, #16]
 8004740:	f023 0207 	bic.w	r2, r3, #7
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	4925      	ldr	r1, [pc, #148]	@ (80047e0 <HAL_RCC_ClockConfig+0x244>)
 800474a:	4313      	orrs	r3, r2
 800474c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800474e:	f7fd fc1b 	bl	8001f88 <HAL_GetTick>
 8004752:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004754:	e00a      	b.n	800476c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004756:	f7fd fc17 	bl	8001f88 <HAL_GetTick>
 800475a:	4602      	mov	r2, r0
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	1ad3      	subs	r3, r2, r3
 8004760:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004764:	4293      	cmp	r3, r2
 8004766:	d901      	bls.n	800476c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004768:	2303      	movs	r3, #3
 800476a:	e0be      	b.n	80048ea <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800476c:	4b1c      	ldr	r3, [pc, #112]	@ (80047e0 <HAL_RCC_ClockConfig+0x244>)
 800476e:	691b      	ldr	r3, [r3, #16]
 8004770:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	00db      	lsls	r3, r3, #3
 800477a:	429a      	cmp	r2, r3
 800477c:	d1eb      	bne.n	8004756 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 0302 	and.w	r3, r3, #2
 8004786:	2b00      	cmp	r3, #0
 8004788:	d010      	beq.n	80047ac <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	68da      	ldr	r2, [r3, #12]
 800478e:	4b14      	ldr	r3, [pc, #80]	@ (80047e0 <HAL_RCC_ClockConfig+0x244>)
 8004790:	699b      	ldr	r3, [r3, #24]
 8004792:	f003 030f 	and.w	r3, r3, #15
 8004796:	429a      	cmp	r2, r3
 8004798:	d208      	bcs.n	80047ac <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800479a:	4b11      	ldr	r3, [pc, #68]	@ (80047e0 <HAL_RCC_ClockConfig+0x244>)
 800479c:	699b      	ldr	r3, [r3, #24]
 800479e:	f023 020f 	bic.w	r2, r3, #15
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	490e      	ldr	r1, [pc, #56]	@ (80047e0 <HAL_RCC_ClockConfig+0x244>)
 80047a8:	4313      	orrs	r3, r2
 80047aa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80047ac:	4b0b      	ldr	r3, [pc, #44]	@ (80047dc <HAL_RCC_ClockConfig+0x240>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 030f 	and.w	r3, r3, #15
 80047b4:	683a      	ldr	r2, [r7, #0]
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d214      	bcs.n	80047e4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047ba:	4b08      	ldr	r3, [pc, #32]	@ (80047dc <HAL_RCC_ClockConfig+0x240>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f023 020f 	bic.w	r2, r3, #15
 80047c2:	4906      	ldr	r1, [pc, #24]	@ (80047dc <HAL_RCC_ClockConfig+0x240>)
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047ca:	4b04      	ldr	r3, [pc, #16]	@ (80047dc <HAL_RCC_ClockConfig+0x240>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 030f 	and.w	r3, r3, #15
 80047d2:	683a      	ldr	r2, [r7, #0]
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d005      	beq.n	80047e4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	e086      	b.n	80048ea <HAL_RCC_ClockConfig+0x34e>
 80047dc:	52002000 	.word	0x52002000
 80047e0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 0304 	and.w	r3, r3, #4
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d010      	beq.n	8004812 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	691a      	ldr	r2, [r3, #16]
 80047f4:	4b3f      	ldr	r3, [pc, #252]	@ (80048f4 <HAL_RCC_ClockConfig+0x358>)
 80047f6:	699b      	ldr	r3, [r3, #24]
 80047f8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d208      	bcs.n	8004812 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004800:	4b3c      	ldr	r3, [pc, #240]	@ (80048f4 <HAL_RCC_ClockConfig+0x358>)
 8004802:	699b      	ldr	r3, [r3, #24]
 8004804:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	691b      	ldr	r3, [r3, #16]
 800480c:	4939      	ldr	r1, [pc, #228]	@ (80048f4 <HAL_RCC_ClockConfig+0x358>)
 800480e:	4313      	orrs	r3, r2
 8004810:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 0308 	and.w	r3, r3, #8
 800481a:	2b00      	cmp	r3, #0
 800481c:	d010      	beq.n	8004840 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	695a      	ldr	r2, [r3, #20]
 8004822:	4b34      	ldr	r3, [pc, #208]	@ (80048f4 <HAL_RCC_ClockConfig+0x358>)
 8004824:	69db      	ldr	r3, [r3, #28]
 8004826:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800482a:	429a      	cmp	r2, r3
 800482c:	d208      	bcs.n	8004840 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800482e:	4b31      	ldr	r3, [pc, #196]	@ (80048f4 <HAL_RCC_ClockConfig+0x358>)
 8004830:	69db      	ldr	r3, [r3, #28]
 8004832:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	695b      	ldr	r3, [r3, #20]
 800483a:	492e      	ldr	r1, [pc, #184]	@ (80048f4 <HAL_RCC_ClockConfig+0x358>)
 800483c:	4313      	orrs	r3, r2
 800483e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0310 	and.w	r3, r3, #16
 8004848:	2b00      	cmp	r3, #0
 800484a:	d010      	beq.n	800486e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	699a      	ldr	r2, [r3, #24]
 8004850:	4b28      	ldr	r3, [pc, #160]	@ (80048f4 <HAL_RCC_ClockConfig+0x358>)
 8004852:	69db      	ldr	r3, [r3, #28]
 8004854:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004858:	429a      	cmp	r2, r3
 800485a:	d208      	bcs.n	800486e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800485c:	4b25      	ldr	r3, [pc, #148]	@ (80048f4 <HAL_RCC_ClockConfig+0x358>)
 800485e:	69db      	ldr	r3, [r3, #28]
 8004860:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	699b      	ldr	r3, [r3, #24]
 8004868:	4922      	ldr	r1, [pc, #136]	@ (80048f4 <HAL_RCC_ClockConfig+0x358>)
 800486a:	4313      	orrs	r3, r2
 800486c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0320 	and.w	r3, r3, #32
 8004876:	2b00      	cmp	r3, #0
 8004878:	d010      	beq.n	800489c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	69da      	ldr	r2, [r3, #28]
 800487e:	4b1d      	ldr	r3, [pc, #116]	@ (80048f4 <HAL_RCC_ClockConfig+0x358>)
 8004880:	6a1b      	ldr	r3, [r3, #32]
 8004882:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004886:	429a      	cmp	r2, r3
 8004888:	d208      	bcs.n	800489c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800488a:	4b1a      	ldr	r3, [pc, #104]	@ (80048f4 <HAL_RCC_ClockConfig+0x358>)
 800488c:	6a1b      	ldr	r3, [r3, #32]
 800488e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	69db      	ldr	r3, [r3, #28]
 8004896:	4917      	ldr	r1, [pc, #92]	@ (80048f4 <HAL_RCC_ClockConfig+0x358>)
 8004898:	4313      	orrs	r3, r2
 800489a:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800489c:	f000 f834 	bl	8004908 <HAL_RCC_GetSysClockFreq>
 80048a0:	4602      	mov	r2, r0
 80048a2:	4b14      	ldr	r3, [pc, #80]	@ (80048f4 <HAL_RCC_ClockConfig+0x358>)
 80048a4:	699b      	ldr	r3, [r3, #24]
 80048a6:	0a1b      	lsrs	r3, r3, #8
 80048a8:	f003 030f 	and.w	r3, r3, #15
 80048ac:	4912      	ldr	r1, [pc, #72]	@ (80048f8 <HAL_RCC_ClockConfig+0x35c>)
 80048ae:	5ccb      	ldrb	r3, [r1, r3]
 80048b0:	f003 031f 	and.w	r3, r3, #31
 80048b4:	fa22 f303 	lsr.w	r3, r2, r3
 80048b8:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80048ba:	4b0e      	ldr	r3, [pc, #56]	@ (80048f4 <HAL_RCC_ClockConfig+0x358>)
 80048bc:	699b      	ldr	r3, [r3, #24]
 80048be:	f003 030f 	and.w	r3, r3, #15
 80048c2:	4a0d      	ldr	r2, [pc, #52]	@ (80048f8 <HAL_RCC_ClockConfig+0x35c>)
 80048c4:	5cd3      	ldrb	r3, [r2, r3]
 80048c6:	f003 031f 	and.w	r3, r3, #31
 80048ca:	693a      	ldr	r2, [r7, #16]
 80048cc:	fa22 f303 	lsr.w	r3, r2, r3
 80048d0:	4a0a      	ldr	r2, [pc, #40]	@ (80048fc <HAL_RCC_ClockConfig+0x360>)
 80048d2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80048d4:	4a0a      	ldr	r2, [pc, #40]	@ (8004900 <HAL_RCC_ClockConfig+0x364>)
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80048da:	4b0a      	ldr	r3, [pc, #40]	@ (8004904 <HAL_RCC_ClockConfig+0x368>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4618      	mov	r0, r3
 80048e0:	f7fd fb08 	bl	8001ef4 <HAL_InitTick>
 80048e4:	4603      	mov	r3, r0
 80048e6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80048e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3718      	adds	r7, #24
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	58024400 	.word	0x58024400
 80048f8:	0800d434 	.word	0x0800d434
 80048fc:	24000004 	.word	0x24000004
 8004900:	24000000 	.word	0x24000000
 8004904:	24000008 	.word	0x24000008

08004908 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004908:	b480      	push	{r7}
 800490a:	b089      	sub	sp, #36	@ 0x24
 800490c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800490e:	4bb3      	ldr	r3, [pc, #716]	@ (8004bdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004910:	691b      	ldr	r3, [r3, #16]
 8004912:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004916:	2b18      	cmp	r3, #24
 8004918:	f200 8155 	bhi.w	8004bc6 <HAL_RCC_GetSysClockFreq+0x2be>
 800491c:	a201      	add	r2, pc, #4	@ (adr r2, 8004924 <HAL_RCC_GetSysClockFreq+0x1c>)
 800491e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004922:	bf00      	nop
 8004924:	08004989 	.word	0x08004989
 8004928:	08004bc7 	.word	0x08004bc7
 800492c:	08004bc7 	.word	0x08004bc7
 8004930:	08004bc7 	.word	0x08004bc7
 8004934:	08004bc7 	.word	0x08004bc7
 8004938:	08004bc7 	.word	0x08004bc7
 800493c:	08004bc7 	.word	0x08004bc7
 8004940:	08004bc7 	.word	0x08004bc7
 8004944:	080049af 	.word	0x080049af
 8004948:	08004bc7 	.word	0x08004bc7
 800494c:	08004bc7 	.word	0x08004bc7
 8004950:	08004bc7 	.word	0x08004bc7
 8004954:	08004bc7 	.word	0x08004bc7
 8004958:	08004bc7 	.word	0x08004bc7
 800495c:	08004bc7 	.word	0x08004bc7
 8004960:	08004bc7 	.word	0x08004bc7
 8004964:	080049b5 	.word	0x080049b5
 8004968:	08004bc7 	.word	0x08004bc7
 800496c:	08004bc7 	.word	0x08004bc7
 8004970:	08004bc7 	.word	0x08004bc7
 8004974:	08004bc7 	.word	0x08004bc7
 8004978:	08004bc7 	.word	0x08004bc7
 800497c:	08004bc7 	.word	0x08004bc7
 8004980:	08004bc7 	.word	0x08004bc7
 8004984:	080049bb 	.word	0x080049bb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004988:	4b94      	ldr	r3, [pc, #592]	@ (8004bdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 0320 	and.w	r3, r3, #32
 8004990:	2b00      	cmp	r3, #0
 8004992:	d009      	beq.n	80049a8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004994:	4b91      	ldr	r3, [pc, #580]	@ (8004bdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	08db      	lsrs	r3, r3, #3
 800499a:	f003 0303 	and.w	r3, r3, #3
 800499e:	4a90      	ldr	r2, [pc, #576]	@ (8004be0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80049a0:	fa22 f303 	lsr.w	r3, r2, r3
 80049a4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80049a6:	e111      	b.n	8004bcc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80049a8:	4b8d      	ldr	r3, [pc, #564]	@ (8004be0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80049aa:	61bb      	str	r3, [r7, #24]
      break;
 80049ac:	e10e      	b.n	8004bcc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80049ae:	4b8d      	ldr	r3, [pc, #564]	@ (8004be4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80049b0:	61bb      	str	r3, [r7, #24]
      break;
 80049b2:	e10b      	b.n	8004bcc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80049b4:	4b8c      	ldr	r3, [pc, #560]	@ (8004be8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80049b6:	61bb      	str	r3, [r7, #24]
      break;
 80049b8:	e108      	b.n	8004bcc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80049ba:	4b88      	ldr	r3, [pc, #544]	@ (8004bdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049be:	f003 0303 	and.w	r3, r3, #3
 80049c2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80049c4:	4b85      	ldr	r3, [pc, #532]	@ (8004bdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049c8:	091b      	lsrs	r3, r3, #4
 80049ca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80049ce:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80049d0:	4b82      	ldr	r3, [pc, #520]	@ (8004bdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049d4:	f003 0301 	and.w	r3, r3, #1
 80049d8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80049da:	4b80      	ldr	r3, [pc, #512]	@ (8004bdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049de:	08db      	lsrs	r3, r3, #3
 80049e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80049e4:	68fa      	ldr	r2, [r7, #12]
 80049e6:	fb02 f303 	mul.w	r3, r2, r3
 80049ea:	ee07 3a90 	vmov	s15, r3
 80049ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049f2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	f000 80e1 	beq.w	8004bc0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	2b02      	cmp	r3, #2
 8004a02:	f000 8083 	beq.w	8004b0c <HAL_RCC_GetSysClockFreq+0x204>
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	2b02      	cmp	r3, #2
 8004a0a:	f200 80a1 	bhi.w	8004b50 <HAL_RCC_GetSysClockFreq+0x248>
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d003      	beq.n	8004a1c <HAL_RCC_GetSysClockFreq+0x114>
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d056      	beq.n	8004ac8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004a1a:	e099      	b.n	8004b50 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a1c:	4b6f      	ldr	r3, [pc, #444]	@ (8004bdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 0320 	and.w	r3, r3, #32
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d02d      	beq.n	8004a84 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004a28:	4b6c      	ldr	r3, [pc, #432]	@ (8004bdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	08db      	lsrs	r3, r3, #3
 8004a2e:	f003 0303 	and.w	r3, r3, #3
 8004a32:	4a6b      	ldr	r2, [pc, #428]	@ (8004be0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004a34:	fa22 f303 	lsr.w	r3, r2, r3
 8004a38:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	ee07 3a90 	vmov	s15, r3
 8004a40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	ee07 3a90 	vmov	s15, r3
 8004a4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a52:	4b62      	ldr	r3, [pc, #392]	@ (8004bdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a5a:	ee07 3a90 	vmov	s15, r3
 8004a5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a62:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a66:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004bec <HAL_RCC_GetSysClockFreq+0x2e4>
 8004a6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a7e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004a82:	e087      	b.n	8004b94 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	ee07 3a90 	vmov	s15, r3
 8004a8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a8e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004bf0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004a92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a96:	4b51      	ldr	r3, [pc, #324]	@ (8004bdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a9e:	ee07 3a90 	vmov	s15, r3
 8004aa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004aa6:	ed97 6a02 	vldr	s12, [r7, #8]
 8004aaa:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004bec <HAL_RCC_GetSysClockFreq+0x2e4>
 8004aae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ab2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ab6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004aba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004abe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ac2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004ac6:	e065      	b.n	8004b94 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	ee07 3a90 	vmov	s15, r3
 8004ace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ad2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004bf4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004ad6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ada:	4b40      	ldr	r3, [pc, #256]	@ (8004bdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ade:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ae2:	ee07 3a90 	vmov	s15, r3
 8004ae6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004aea:	ed97 6a02 	vldr	s12, [r7, #8]
 8004aee:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004bec <HAL_RCC_GetSysClockFreq+0x2e4>
 8004af2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004af6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004afa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004afe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b06:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004b0a:	e043      	b.n	8004b94 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	ee07 3a90 	vmov	s15, r3
 8004b12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b16:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004bf8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004b1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b1e:	4b2f      	ldr	r3, [pc, #188]	@ (8004bdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b26:	ee07 3a90 	vmov	s15, r3
 8004b2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b2e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b32:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004bec <HAL_RCC_GetSysClockFreq+0x2e4>
 8004b36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b4a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004b4e:	e021      	b.n	8004b94 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	ee07 3a90 	vmov	s15, r3
 8004b56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b5a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004bf4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004b5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b62:	4b1e      	ldr	r3, [pc, #120]	@ (8004bdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b6a:	ee07 3a90 	vmov	s15, r3
 8004b6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b72:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b76:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004bec <HAL_RCC_GetSysClockFreq+0x2e4>
 8004b7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b8e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004b92:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004b94:	4b11      	ldr	r3, [pc, #68]	@ (8004bdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b98:	0a5b      	lsrs	r3, r3, #9
 8004b9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	ee07 3a90 	vmov	s15, r3
 8004ba8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004bac:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bb8:	ee17 3a90 	vmov	r3, s15
 8004bbc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004bbe:	e005      	b.n	8004bcc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	61bb      	str	r3, [r7, #24]
      break;
 8004bc4:	e002      	b.n	8004bcc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004bc6:	4b07      	ldr	r3, [pc, #28]	@ (8004be4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004bc8:	61bb      	str	r3, [r7, #24]
      break;
 8004bca:	bf00      	nop
  }

  return sysclockfreq;
 8004bcc:	69bb      	ldr	r3, [r7, #24]
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3724      	adds	r7, #36	@ 0x24
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr
 8004bda:	bf00      	nop
 8004bdc:	58024400 	.word	0x58024400
 8004be0:	03d09000 	.word	0x03d09000
 8004be4:	003d0900 	.word	0x003d0900
 8004be8:	007a1200 	.word	0x007a1200
 8004bec:	46000000 	.word	0x46000000
 8004bf0:	4c742400 	.word	0x4c742400
 8004bf4:	4a742400 	.word	0x4a742400
 8004bf8:	4af42400 	.word	0x4af42400

08004bfc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b082      	sub	sp, #8
 8004c00:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8004c02:	f7ff fe81 	bl	8004908 <HAL_RCC_GetSysClockFreq>
 8004c06:	4602      	mov	r2, r0
 8004c08:	4b10      	ldr	r3, [pc, #64]	@ (8004c4c <HAL_RCC_GetHCLKFreq+0x50>)
 8004c0a:	699b      	ldr	r3, [r3, #24]
 8004c0c:	0a1b      	lsrs	r3, r3, #8
 8004c0e:	f003 030f 	and.w	r3, r3, #15
 8004c12:	490f      	ldr	r1, [pc, #60]	@ (8004c50 <HAL_RCC_GetHCLKFreq+0x54>)
 8004c14:	5ccb      	ldrb	r3, [r1, r3]
 8004c16:	f003 031f 	and.w	r3, r3, #31
 8004c1a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c1e:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8004c20:	4b0a      	ldr	r3, [pc, #40]	@ (8004c4c <HAL_RCC_GetHCLKFreq+0x50>)
 8004c22:	699b      	ldr	r3, [r3, #24]
 8004c24:	f003 030f 	and.w	r3, r3, #15
 8004c28:	4a09      	ldr	r2, [pc, #36]	@ (8004c50 <HAL_RCC_GetHCLKFreq+0x54>)
 8004c2a:	5cd3      	ldrb	r3, [r2, r3]
 8004c2c:	f003 031f 	and.w	r3, r3, #31
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	fa22 f303 	lsr.w	r3, r2, r3
 8004c36:	4a07      	ldr	r2, [pc, #28]	@ (8004c54 <HAL_RCC_GetHCLKFreq+0x58>)
 8004c38:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004c3a:	4a07      	ldr	r2, [pc, #28]	@ (8004c58 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004c40:	4b04      	ldr	r3, [pc, #16]	@ (8004c54 <HAL_RCC_GetHCLKFreq+0x58>)
 8004c42:	681b      	ldr	r3, [r3, #0]
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3708      	adds	r7, #8
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	58024400 	.word	0x58024400
 8004c50:	0800d434 	.word	0x0800d434
 8004c54:	24000004 	.word	0x24000004
 8004c58:	24000000 	.word	0x24000000

08004c5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8004c60:	f7ff ffcc 	bl	8004bfc <HAL_RCC_GetHCLKFreq>
 8004c64:	4602      	mov	r2, r0
 8004c66:	4b06      	ldr	r3, [pc, #24]	@ (8004c80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c68:	69db      	ldr	r3, [r3, #28]
 8004c6a:	091b      	lsrs	r3, r3, #4
 8004c6c:	f003 0307 	and.w	r3, r3, #7
 8004c70:	4904      	ldr	r1, [pc, #16]	@ (8004c84 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004c72:	5ccb      	ldrb	r3, [r1, r3]
 8004c74:	f003 031f 	and.w	r3, r3, #31
 8004c78:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	bd80      	pop	{r7, pc}
 8004c80:	58024400 	.word	0x58024400
 8004c84:	0800d434 	.word	0x0800d434

08004c88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8004c8c:	f7ff ffb6 	bl	8004bfc <HAL_RCC_GetHCLKFreq>
 8004c90:	4602      	mov	r2, r0
 8004c92:	4b06      	ldr	r3, [pc, #24]	@ (8004cac <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c94:	69db      	ldr	r3, [r3, #28]
 8004c96:	0a1b      	lsrs	r3, r3, #8
 8004c98:	f003 0307 	and.w	r3, r3, #7
 8004c9c:	4904      	ldr	r1, [pc, #16]	@ (8004cb0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004c9e:	5ccb      	ldrb	r3, [r1, r3]
 8004ca0:	f003 031f 	and.w	r3, r3, #31
 8004ca4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	bd80      	pop	{r7, pc}
 8004cac:	58024400 	.word	0x58024400
 8004cb0:	0800d434 	.word	0x0800d434

08004cb4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004cb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cb8:	b0c8      	sub	sp, #288	@ 0x120
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004ccc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cd4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004cd8:	2500      	movs	r5, #0
 8004cda:	ea54 0305 	orrs.w	r3, r4, r5
 8004cde:	d049      	beq.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004ce0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ce4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ce6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004cea:	d02f      	beq.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004cec:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004cf0:	d828      	bhi.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004cf2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004cf6:	d01a      	beq.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004cf8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004cfc:	d822      	bhi.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d003      	beq.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004d02:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d06:	d007      	beq.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004d08:	e01c      	b.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d0a:	4ba7      	ldr	r3, [pc, #668]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004d0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d0e:	4aa6      	ldr	r2, [pc, #664]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004d10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d14:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004d16:	e01a      	b.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004d18:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d1c:	3308      	adds	r3, #8
 8004d1e:	2102      	movs	r1, #2
 8004d20:	4618      	mov	r0, r3
 8004d22:	f002 fa6d 	bl	8007200 <RCCEx_PLL2_Config>
 8004d26:	4603      	mov	r3, r0
 8004d28:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004d2c:	e00f      	b.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004d2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d32:	3328      	adds	r3, #40	@ 0x28
 8004d34:	2102      	movs	r1, #2
 8004d36:	4618      	mov	r0, r3
 8004d38:	f002 fb14 	bl	8007364 <RCCEx_PLL3_Config>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004d42:	e004      	b.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004d4a:	e000      	b.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004d4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d4e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d10a      	bne.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004d56:	4b94      	ldr	r3, [pc, #592]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004d58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d5a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004d5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d64:	4a90      	ldr	r2, [pc, #576]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004d66:	430b      	orrs	r3, r1
 8004d68:	6513      	str	r3, [r2, #80]	@ 0x50
 8004d6a:	e003      	b.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d6c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004d70:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004d74:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d7c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004d80:	f04f 0900 	mov.w	r9, #0
 8004d84:	ea58 0309 	orrs.w	r3, r8, r9
 8004d88:	d047      	beq.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004d8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d90:	2b04      	cmp	r3, #4
 8004d92:	d82a      	bhi.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004d94:	a201      	add	r2, pc, #4	@ (adr r2, 8004d9c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d9a:	bf00      	nop
 8004d9c:	08004db1 	.word	0x08004db1
 8004da0:	08004dbf 	.word	0x08004dbf
 8004da4:	08004dd5 	.word	0x08004dd5
 8004da8:	08004df3 	.word	0x08004df3
 8004dac:	08004df3 	.word	0x08004df3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004db0:	4b7d      	ldr	r3, [pc, #500]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004db2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004db4:	4a7c      	ldr	r2, [pc, #496]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004db6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004dba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004dbc:	e01a      	b.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004dbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004dc2:	3308      	adds	r3, #8
 8004dc4:	2100      	movs	r1, #0
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f002 fa1a 	bl	8007200 <RCCEx_PLL2_Config>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004dd2:	e00f      	b.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004dd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004dd8:	3328      	adds	r3, #40	@ 0x28
 8004dda:	2100      	movs	r1, #0
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f002 fac1 	bl	8007364 <RCCEx_PLL3_Config>
 8004de2:	4603      	mov	r3, r0
 8004de4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004de8:	e004      	b.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004df0:	e000      	b.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004df2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004df4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d10a      	bne.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004dfc:	4b6a      	ldr	r3, [pc, #424]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004dfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e00:	f023 0107 	bic.w	r1, r3, #7
 8004e04:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e0a:	4a67      	ldr	r2, [pc, #412]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004e0c:	430b      	orrs	r3, r1
 8004e0e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004e10:	e003      	b.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e12:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004e16:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8004e1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e22:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8004e26:	f04f 0b00 	mov.w	fp, #0
 8004e2a:	ea5a 030b 	orrs.w	r3, sl, fp
 8004e2e:	d054      	beq.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8004e30:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e36:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004e3a:	d036      	beq.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8004e3c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004e40:	d82f      	bhi.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004e42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e46:	d032      	beq.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004e48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e4c:	d829      	bhi.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004e4e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004e50:	d02f      	beq.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8004e52:	2bc0      	cmp	r3, #192	@ 0xc0
 8004e54:	d825      	bhi.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004e56:	2b80      	cmp	r3, #128	@ 0x80
 8004e58:	d018      	beq.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8004e5a:	2b80      	cmp	r3, #128	@ 0x80
 8004e5c:	d821      	bhi.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d002      	beq.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8004e62:	2b40      	cmp	r3, #64	@ 0x40
 8004e64:	d007      	beq.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8004e66:	e01c      	b.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e68:	4b4f      	ldr	r3, [pc, #316]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004e6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e6c:	4a4e      	ldr	r2, [pc, #312]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004e6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e72:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8004e74:	e01e      	b.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e76:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e7a:	3308      	adds	r3, #8
 8004e7c:	2100      	movs	r1, #0
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f002 f9be 	bl	8007200 <RCCEx_PLL2_Config>
 8004e84:	4603      	mov	r3, r0
 8004e86:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8004e8a:	e013      	b.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004e8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e90:	3328      	adds	r3, #40	@ 0x28
 8004e92:	2100      	movs	r1, #0
 8004e94:	4618      	mov	r0, r3
 8004e96:	f002 fa65 	bl	8007364 <RCCEx_PLL3_Config>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8004ea0:	e008      	b.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004ea8:	e004      	b.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8004eaa:	bf00      	nop
 8004eac:	e002      	b.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8004eae:	bf00      	nop
 8004eb0:	e000      	b.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8004eb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004eb4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d10a      	bne.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8004ebc:	4b3a      	ldr	r3, [pc, #232]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004ebe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ec0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004ec4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ec8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004eca:	4a37      	ldr	r2, [pc, #220]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004ecc:	430b      	orrs	r3, r1
 8004ece:	6513      	str	r3, [r2, #80]	@ 0x50
 8004ed0:	e003      	b.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ed2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004ed6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8004eda:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ee2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004ee6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004eea:	2300      	movs	r3, #0
 8004eec:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004ef0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8004ef4:	460b      	mov	r3, r1
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	d05c      	beq.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8004efa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004efe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f00:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004f04:	d03b      	beq.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004f06:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004f0a:	d834      	bhi.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004f0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f10:	d037      	beq.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8004f12:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f16:	d82e      	bhi.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004f18:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004f1c:	d033      	beq.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004f1e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004f22:	d828      	bhi.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004f24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f28:	d01a      	beq.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8004f2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f2e:	d822      	bhi.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d003      	beq.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x288>
 8004f34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f38:	d007      	beq.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x296>
 8004f3a:	e01c      	b.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f3c:	4b1a      	ldr	r3, [pc, #104]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004f3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f40:	4a19      	ldr	r2, [pc, #100]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004f42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f46:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8004f48:	e01e      	b.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f4e:	3308      	adds	r3, #8
 8004f50:	2100      	movs	r1, #0
 8004f52:	4618      	mov	r0, r3
 8004f54:	f002 f954 	bl	8007200 <RCCEx_PLL2_Config>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8004f5e:	e013      	b.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004f60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f64:	3328      	adds	r3, #40	@ 0x28
 8004f66:	2100      	movs	r1, #0
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f002 f9fb 	bl	8007364 <RCCEx_PLL3_Config>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8004f74:	e008      	b.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004f7c:	e004      	b.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8004f7e:	bf00      	nop
 8004f80:	e002      	b.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8004f82:	bf00      	nop
 8004f84:	e000      	b.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8004f86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f88:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d10d      	bne.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8004f90:	4b05      	ldr	r3, [pc, #20]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004f92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f94:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8004f98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f9e:	4a02      	ldr	r2, [pc, #8]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004fa0:	430b      	orrs	r3, r1
 8004fa2:	6513      	str	r3, [r2, #80]	@ 0x50
 8004fa4:	e006      	b.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8004fa6:	bf00      	nop
 8004fa8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fac:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004fb0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004fb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fbc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004fc0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004fca:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004fce:	460b      	mov	r3, r1
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	d03a      	beq.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8004fd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004fd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fda:	2b30      	cmp	r3, #48	@ 0x30
 8004fdc:	d01f      	beq.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8004fde:	2b30      	cmp	r3, #48	@ 0x30
 8004fe0:	d819      	bhi.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8004fe2:	2b20      	cmp	r3, #32
 8004fe4:	d00c      	beq.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8004fe6:	2b20      	cmp	r3, #32
 8004fe8:	d815      	bhi.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d019      	beq.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8004fee:	2b10      	cmp	r3, #16
 8004ff0:	d111      	bne.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ff2:	4bae      	ldr	r3, [pc, #696]	@ (80052ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ff6:	4aad      	ldr	r2, [pc, #692]	@ (80052ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004ff8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ffc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004ffe:	e011      	b.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005000:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005004:	3308      	adds	r3, #8
 8005006:	2102      	movs	r1, #2
 8005008:	4618      	mov	r0, r3
 800500a:	f002 f8f9 	bl	8007200 <RCCEx_PLL2_Config>
 800500e:	4603      	mov	r3, r0
 8005010:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005014:	e006      	b.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800501c:	e002      	b.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800501e:	bf00      	nop
 8005020:	e000      	b.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8005022:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005024:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005028:	2b00      	cmp	r3, #0
 800502a:	d10a      	bne.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800502c:	4b9f      	ldr	r3, [pc, #636]	@ (80052ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800502e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005030:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005034:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005038:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800503a:	4a9c      	ldr	r2, [pc, #624]	@ (80052ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800503c:	430b      	orrs	r3, r1
 800503e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005040:	e003      	b.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005042:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005046:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800504a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800504e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005052:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005056:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800505a:	2300      	movs	r3, #0
 800505c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005060:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005064:	460b      	mov	r3, r1
 8005066:	4313      	orrs	r3, r2
 8005068:	d051      	beq.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800506a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800506e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005070:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005074:	d035      	beq.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8005076:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800507a:	d82e      	bhi.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x426>
 800507c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005080:	d031      	beq.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8005082:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005086:	d828      	bhi.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x426>
 8005088:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800508c:	d01a      	beq.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800508e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005092:	d822      	bhi.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x426>
 8005094:	2b00      	cmp	r3, #0
 8005096:	d003      	beq.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8005098:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800509c:	d007      	beq.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800509e:	e01c      	b.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050a0:	4b82      	ldr	r3, [pc, #520]	@ (80052ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80050a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050a4:	4a81      	ldr	r2, [pc, #516]	@ (80052ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80050a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80050ac:	e01c      	b.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80050ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80050b2:	3308      	adds	r3, #8
 80050b4:	2100      	movs	r1, #0
 80050b6:	4618      	mov	r0, r3
 80050b8:	f002 f8a2 	bl	8007200 <RCCEx_PLL2_Config>
 80050bc:	4603      	mov	r3, r0
 80050be:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80050c2:	e011      	b.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80050c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80050c8:	3328      	adds	r3, #40	@ 0x28
 80050ca:	2100      	movs	r1, #0
 80050cc:	4618      	mov	r0, r3
 80050ce:	f002 f949 	bl	8007364 <RCCEx_PLL3_Config>
 80050d2:	4603      	mov	r3, r0
 80050d4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80050d8:	e006      	b.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80050e0:	e002      	b.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80050e2:	bf00      	nop
 80050e4:	e000      	b.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80050e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050e8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d10a      	bne.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80050f0:	4b6e      	ldr	r3, [pc, #440]	@ (80052ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80050f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050f4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80050f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80050fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80050fe:	4a6b      	ldr	r2, [pc, #428]	@ (80052ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005100:	430b      	orrs	r3, r1
 8005102:	6513      	str	r3, [r2, #80]	@ 0x50
 8005104:	e003      	b.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005106:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800510a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800510e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005116:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800511a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800511e:	2300      	movs	r3, #0
 8005120:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005124:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005128:	460b      	mov	r3, r1
 800512a:	4313      	orrs	r3, r2
 800512c:	d053      	beq.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800512e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005132:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005134:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005138:	d033      	beq.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800513a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800513e:	d82c      	bhi.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005140:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005144:	d02f      	beq.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8005146:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800514a:	d826      	bhi.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800514c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005150:	d02b      	beq.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005152:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005156:	d820      	bhi.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005158:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800515c:	d012      	beq.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800515e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005162:	d81a      	bhi.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005164:	2b00      	cmp	r3, #0
 8005166:	d022      	beq.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8005168:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800516c:	d115      	bne.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800516e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005172:	3308      	adds	r3, #8
 8005174:	2101      	movs	r1, #1
 8005176:	4618      	mov	r0, r3
 8005178:	f002 f842 	bl	8007200 <RCCEx_PLL2_Config>
 800517c:	4603      	mov	r3, r0
 800517e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005182:	e015      	b.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005184:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005188:	3328      	adds	r3, #40	@ 0x28
 800518a:	2101      	movs	r1, #1
 800518c:	4618      	mov	r0, r3
 800518e:	f002 f8e9 	bl	8007364 <RCCEx_PLL3_Config>
 8005192:	4603      	mov	r3, r0
 8005194:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005198:	e00a      	b.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80051a0:	e006      	b.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80051a2:	bf00      	nop
 80051a4:	e004      	b.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80051a6:	bf00      	nop
 80051a8:	e002      	b.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80051aa:	bf00      	nop
 80051ac:	e000      	b.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80051ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051b0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d10a      	bne.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80051b8:	4b3c      	ldr	r3, [pc, #240]	@ (80052ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80051ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051bc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80051c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80051c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80051c6:	4a39      	ldr	r2, [pc, #228]	@ (80052ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80051c8:	430b      	orrs	r3, r1
 80051ca:	6513      	str	r3, [r2, #80]	@ 0x50
 80051cc:	e003      	b.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051ce:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80051d2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80051d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80051da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051de:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80051e2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80051e6:	2300      	movs	r3, #0
 80051e8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80051ec:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80051f0:	460b      	mov	r3, r1
 80051f2:	4313      	orrs	r3, r2
 80051f4:	d060      	beq.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80051f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80051fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80051fe:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8005202:	d039      	beq.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8005204:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8005208:	d832      	bhi.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800520a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800520e:	d035      	beq.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8005210:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005214:	d82c      	bhi.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005216:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800521a:	d031      	beq.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800521c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005220:	d826      	bhi.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005222:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005226:	d02d      	beq.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8005228:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800522c:	d820      	bhi.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800522e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005232:	d012      	beq.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005234:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005238:	d81a      	bhi.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800523a:	2b00      	cmp	r3, #0
 800523c:	d024      	beq.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800523e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005242:	d115      	bne.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005244:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005248:	3308      	adds	r3, #8
 800524a:	2101      	movs	r1, #1
 800524c:	4618      	mov	r0, r3
 800524e:	f001 ffd7 	bl	8007200 <RCCEx_PLL2_Config>
 8005252:	4603      	mov	r3, r0
 8005254:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005258:	e017      	b.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800525a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800525e:	3328      	adds	r3, #40	@ 0x28
 8005260:	2101      	movs	r1, #1
 8005262:	4618      	mov	r0, r3
 8005264:	f002 f87e 	bl	8007364 <RCCEx_PLL3_Config>
 8005268:	4603      	mov	r3, r0
 800526a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800526e:	e00c      	b.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005276:	e008      	b.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005278:	bf00      	nop
 800527a:	e006      	b.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800527c:	bf00      	nop
 800527e:	e004      	b.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005280:	bf00      	nop
 8005282:	e002      	b.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005284:	bf00      	nop
 8005286:	e000      	b.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005288:	bf00      	nop
    }

    if (ret == HAL_OK)
 800528a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800528e:	2b00      	cmp	r3, #0
 8005290:	d10e      	bne.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005292:	4b06      	ldr	r3, [pc, #24]	@ (80052ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005294:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005296:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800529a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800529e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80052a2:	4a02      	ldr	r2, [pc, #8]	@ (80052ac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80052a4:	430b      	orrs	r3, r1
 80052a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80052a8:	e006      	b.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80052aa:	bf00      	nop
 80052ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052b0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80052b4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80052b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80052bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052c0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80052c4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80052c8:	2300      	movs	r3, #0
 80052ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80052ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80052d2:	460b      	mov	r3, r1
 80052d4:	4313      	orrs	r3, r2
 80052d6:	d037      	beq.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80052d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80052dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80052de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80052e2:	d00e      	beq.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80052e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80052e8:	d816      	bhi.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d018      	beq.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80052ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80052f2:	d111      	bne.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052f4:	4bc4      	ldr	r3, [pc, #784]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80052f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052f8:	4ac3      	ldr	r2, [pc, #780]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80052fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005300:	e00f      	b.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005302:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005306:	3308      	adds	r3, #8
 8005308:	2101      	movs	r1, #1
 800530a:	4618      	mov	r0, r3
 800530c:	f001 ff78 	bl	8007200 <RCCEx_PLL2_Config>
 8005310:	4603      	mov	r3, r0
 8005312:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005316:	e004      	b.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800531e:	e000      	b.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8005320:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005322:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005326:	2b00      	cmp	r3, #0
 8005328:	d10a      	bne.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800532a:	4bb7      	ldr	r3, [pc, #732]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800532c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800532e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005332:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005336:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005338:	4ab3      	ldr	r2, [pc, #716]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800533a:	430b      	orrs	r3, r1
 800533c:	6513      	str	r3, [r2, #80]	@ 0x50
 800533e:	e003      	b.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005340:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005344:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005348:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800534c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005350:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005354:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005358:	2300      	movs	r3, #0
 800535a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800535e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005362:	460b      	mov	r3, r1
 8005364:	4313      	orrs	r3, r2
 8005366:	d039      	beq.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005368:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800536c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800536e:	2b03      	cmp	r3, #3
 8005370:	d81c      	bhi.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8005372:	a201      	add	r2, pc, #4	@ (adr r2, 8005378 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8005374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005378:	080053b5 	.word	0x080053b5
 800537c:	08005389 	.word	0x08005389
 8005380:	08005397 	.word	0x08005397
 8005384:	080053b5 	.word	0x080053b5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005388:	4b9f      	ldr	r3, [pc, #636]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800538a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800538c:	4a9e      	ldr	r2, [pc, #632]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800538e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005392:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005394:	e00f      	b.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005396:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800539a:	3308      	adds	r3, #8
 800539c:	2102      	movs	r1, #2
 800539e:	4618      	mov	r0, r3
 80053a0:	f001 ff2e 	bl	8007200 <RCCEx_PLL2_Config>
 80053a4:	4603      	mov	r3, r0
 80053a6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 80053aa:	e004      	b.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80053b2:	e000      	b.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80053b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053b6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d10a      	bne.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80053be:	4b92      	ldr	r3, [pc, #584]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80053c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053c2:	f023 0103 	bic.w	r1, r3, #3
 80053c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80053ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053cc:	4a8e      	ldr	r2, [pc, #568]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80053ce:	430b      	orrs	r3, r1
 80053d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80053d2:	e003      	b.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053d4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80053d8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80053dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80053e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053e4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80053e8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80053ec:	2300      	movs	r3, #0
 80053ee:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80053f2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80053f6:	460b      	mov	r3, r1
 80053f8:	4313      	orrs	r3, r2
 80053fa:	f000 8099 	beq.w	8005530 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80053fe:	4b83      	ldr	r3, [pc, #524]	@ (800560c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a82      	ldr	r2, [pc, #520]	@ (800560c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005404:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005408:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800540a:	f7fc fdbd 	bl	8001f88 <HAL_GetTick>
 800540e:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005412:	e00b      	b.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005414:	f7fc fdb8 	bl	8001f88 <HAL_GetTick>
 8005418:	4602      	mov	r2, r0
 800541a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800541e:	1ad3      	subs	r3, r2, r3
 8005420:	2b64      	cmp	r3, #100	@ 0x64
 8005422:	d903      	bls.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8005424:	2303      	movs	r3, #3
 8005426:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800542a:	e005      	b.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800542c:	4b77      	ldr	r3, [pc, #476]	@ (800560c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005434:	2b00      	cmp	r3, #0
 8005436:	d0ed      	beq.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8005438:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800543c:	2b00      	cmp	r3, #0
 800543e:	d173      	bne.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005440:	4b71      	ldr	r3, [pc, #452]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005442:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005444:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005448:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800544c:	4053      	eors	r3, r2
 800544e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005452:	2b00      	cmp	r3, #0
 8005454:	d015      	beq.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005456:	4b6c      	ldr	r3, [pc, #432]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005458:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800545a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800545e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005462:	4b69      	ldr	r3, [pc, #420]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005464:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005466:	4a68      	ldr	r2, [pc, #416]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005468:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800546c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800546e:	4b66      	ldr	r3, [pc, #408]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005470:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005472:	4a65      	ldr	r2, [pc, #404]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005474:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005478:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800547a:	4a63      	ldr	r2, [pc, #396]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800547c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005480:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005482:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005486:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800548a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800548e:	d118      	bne.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005490:	f7fc fd7a 	bl	8001f88 <HAL_GetTick>
 8005494:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005498:	e00d      	b.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800549a:	f7fc fd75 	bl	8001f88 <HAL_GetTick>
 800549e:	4602      	mov	r2, r0
 80054a0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80054a4:	1ad2      	subs	r2, r2, r3
 80054a6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d903      	bls.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80054ae:	2303      	movs	r3, #3
 80054b0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 80054b4:	e005      	b.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80054b6:	4b54      	ldr	r3, [pc, #336]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80054b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054ba:	f003 0302 	and.w	r3, r3, #2
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d0eb      	beq.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80054c2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d129      	bne.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80054ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80054ce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80054d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80054da:	d10e      	bne.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x846>
 80054dc:	4b4a      	ldr	r3, [pc, #296]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80054de:	691b      	ldr	r3, [r3, #16]
 80054e0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80054e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80054e8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80054ec:	091a      	lsrs	r2, r3, #4
 80054ee:	4b48      	ldr	r3, [pc, #288]	@ (8005610 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80054f0:	4013      	ands	r3, r2
 80054f2:	4a45      	ldr	r2, [pc, #276]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80054f4:	430b      	orrs	r3, r1
 80054f6:	6113      	str	r3, [r2, #16]
 80054f8:	e005      	b.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x852>
 80054fa:	4b43      	ldr	r3, [pc, #268]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80054fc:	691b      	ldr	r3, [r3, #16]
 80054fe:	4a42      	ldr	r2, [pc, #264]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005500:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005504:	6113      	str	r3, [r2, #16]
 8005506:	4b40      	ldr	r3, [pc, #256]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005508:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800550a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800550e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005512:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005516:	4a3c      	ldr	r2, [pc, #240]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005518:	430b      	orrs	r3, r1
 800551a:	6713      	str	r3, [r2, #112]	@ 0x70
 800551c:	e008      	b.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800551e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005522:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8005526:	e003      	b.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005528:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800552c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005530:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005538:	f002 0301 	and.w	r3, r2, #1
 800553c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005540:	2300      	movs	r3, #0
 8005542:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005546:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800554a:	460b      	mov	r3, r1
 800554c:	4313      	orrs	r3, r2
 800554e:	f000 8090 	beq.w	8005672 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005552:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005556:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800555a:	2b28      	cmp	r3, #40	@ 0x28
 800555c:	d870      	bhi.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800555e:	a201      	add	r2, pc, #4	@ (adr r2, 8005564 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8005560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005564:	08005649 	.word	0x08005649
 8005568:	08005641 	.word	0x08005641
 800556c:	08005641 	.word	0x08005641
 8005570:	08005641 	.word	0x08005641
 8005574:	08005641 	.word	0x08005641
 8005578:	08005641 	.word	0x08005641
 800557c:	08005641 	.word	0x08005641
 8005580:	08005641 	.word	0x08005641
 8005584:	08005615 	.word	0x08005615
 8005588:	08005641 	.word	0x08005641
 800558c:	08005641 	.word	0x08005641
 8005590:	08005641 	.word	0x08005641
 8005594:	08005641 	.word	0x08005641
 8005598:	08005641 	.word	0x08005641
 800559c:	08005641 	.word	0x08005641
 80055a0:	08005641 	.word	0x08005641
 80055a4:	0800562b 	.word	0x0800562b
 80055a8:	08005641 	.word	0x08005641
 80055ac:	08005641 	.word	0x08005641
 80055b0:	08005641 	.word	0x08005641
 80055b4:	08005641 	.word	0x08005641
 80055b8:	08005641 	.word	0x08005641
 80055bc:	08005641 	.word	0x08005641
 80055c0:	08005641 	.word	0x08005641
 80055c4:	08005649 	.word	0x08005649
 80055c8:	08005641 	.word	0x08005641
 80055cc:	08005641 	.word	0x08005641
 80055d0:	08005641 	.word	0x08005641
 80055d4:	08005641 	.word	0x08005641
 80055d8:	08005641 	.word	0x08005641
 80055dc:	08005641 	.word	0x08005641
 80055e0:	08005641 	.word	0x08005641
 80055e4:	08005649 	.word	0x08005649
 80055e8:	08005641 	.word	0x08005641
 80055ec:	08005641 	.word	0x08005641
 80055f0:	08005641 	.word	0x08005641
 80055f4:	08005641 	.word	0x08005641
 80055f8:	08005641 	.word	0x08005641
 80055fc:	08005641 	.word	0x08005641
 8005600:	08005641 	.word	0x08005641
 8005604:	08005649 	.word	0x08005649
 8005608:	58024400 	.word	0x58024400
 800560c:	58024800 	.word	0x58024800
 8005610:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005614:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005618:	3308      	adds	r3, #8
 800561a:	2101      	movs	r1, #1
 800561c:	4618      	mov	r0, r3
 800561e:	f001 fdef 	bl	8007200 <RCCEx_PLL2_Config>
 8005622:	4603      	mov	r3, r0
 8005624:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005628:	e00f      	b.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800562a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800562e:	3328      	adds	r3, #40	@ 0x28
 8005630:	2101      	movs	r1, #1
 8005632:	4618      	mov	r0, r3
 8005634:	f001 fe96 	bl	8007364 <RCCEx_PLL3_Config>
 8005638:	4603      	mov	r3, r0
 800563a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800563e:	e004      	b.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005646:	e000      	b.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8005648:	bf00      	nop
    }

    if (ret == HAL_OK)
 800564a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800564e:	2b00      	cmp	r3, #0
 8005650:	d10b      	bne.n	800566a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005652:	4bc0      	ldr	r3, [pc, #768]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005654:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005656:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800565a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800565e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005662:	4abc      	ldr	r2, [pc, #752]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005664:	430b      	orrs	r3, r1
 8005666:	6553      	str	r3, [r2, #84]	@ 0x54
 8005668:	e003      	b.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800566a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800566e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005672:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800567a:	f002 0302 	and.w	r3, r2, #2
 800567e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005682:	2300      	movs	r3, #0
 8005684:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005688:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800568c:	460b      	mov	r3, r1
 800568e:	4313      	orrs	r3, r2
 8005690:	d043      	beq.n	800571a <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005692:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005696:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800569a:	2b05      	cmp	r3, #5
 800569c:	d824      	bhi.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800569e:	a201      	add	r2, pc, #4	@ (adr r2, 80056a4 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 80056a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056a4:	080056f1 	.word	0x080056f1
 80056a8:	080056bd 	.word	0x080056bd
 80056ac:	080056d3 	.word	0x080056d3
 80056b0:	080056f1 	.word	0x080056f1
 80056b4:	080056f1 	.word	0x080056f1
 80056b8:	080056f1 	.word	0x080056f1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80056bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80056c0:	3308      	adds	r3, #8
 80056c2:	2101      	movs	r1, #1
 80056c4:	4618      	mov	r0, r3
 80056c6:	f001 fd9b 	bl	8007200 <RCCEx_PLL2_Config>
 80056ca:	4603      	mov	r3, r0
 80056cc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80056d0:	e00f      	b.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80056d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80056d6:	3328      	adds	r3, #40	@ 0x28
 80056d8:	2101      	movs	r1, #1
 80056da:	4618      	mov	r0, r3
 80056dc:	f001 fe42 	bl	8007364 <RCCEx_PLL3_Config>
 80056e0:	4603      	mov	r3, r0
 80056e2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80056e6:	e004      	b.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80056ee:	e000      	b.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 80056f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056f2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d10b      	bne.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80056fa:	4b96      	ldr	r3, [pc, #600]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80056fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056fe:	f023 0107 	bic.w	r1, r3, #7
 8005702:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005706:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800570a:	4a92      	ldr	r2, [pc, #584]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800570c:	430b      	orrs	r3, r1
 800570e:	6553      	str	r3, [r2, #84]	@ 0x54
 8005710:	e003      	b.n	800571a <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005712:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005716:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800571a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800571e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005722:	f002 0304 	and.w	r3, r2, #4
 8005726:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800572a:	2300      	movs	r3, #0
 800572c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005730:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005734:	460b      	mov	r3, r1
 8005736:	4313      	orrs	r3, r2
 8005738:	d043      	beq.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800573a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800573e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005742:	2b05      	cmp	r3, #5
 8005744:	d824      	bhi.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8005746:	a201      	add	r2, pc, #4	@ (adr r2, 800574c <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8005748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800574c:	08005799 	.word	0x08005799
 8005750:	08005765 	.word	0x08005765
 8005754:	0800577b 	.word	0x0800577b
 8005758:	08005799 	.word	0x08005799
 800575c:	08005799 	.word	0x08005799
 8005760:	08005799 	.word	0x08005799
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005764:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005768:	3308      	adds	r3, #8
 800576a:	2101      	movs	r1, #1
 800576c:	4618      	mov	r0, r3
 800576e:	f001 fd47 	bl	8007200 <RCCEx_PLL2_Config>
 8005772:	4603      	mov	r3, r0
 8005774:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005778:	e00f      	b.n	800579a <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800577a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800577e:	3328      	adds	r3, #40	@ 0x28
 8005780:	2101      	movs	r1, #1
 8005782:	4618      	mov	r0, r3
 8005784:	f001 fdee 	bl	8007364 <RCCEx_PLL3_Config>
 8005788:	4603      	mov	r3, r0
 800578a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800578e:	e004      	b.n	800579a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005796:	e000      	b.n	800579a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8005798:	bf00      	nop
    }

    if (ret == HAL_OK)
 800579a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d10b      	bne.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80057a2:	4b6c      	ldr	r3, [pc, #432]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80057a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057a6:	f023 0107 	bic.w	r1, r3, #7
 80057aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80057ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80057b2:	4a68      	ldr	r2, [pc, #416]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80057b4:	430b      	orrs	r3, r1
 80057b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80057b8:	e003      	b.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057ba:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80057be:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80057c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80057c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ca:	f002 0320 	and.w	r3, r2, #32
 80057ce:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80057d2:	2300      	movs	r3, #0
 80057d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80057d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80057dc:	460b      	mov	r3, r1
 80057de:	4313      	orrs	r3, r2
 80057e0:	d055      	beq.n	800588e <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80057e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80057e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80057ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80057ee:	d033      	beq.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80057f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80057f4:	d82c      	bhi.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80057f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057fa:	d02f      	beq.n	800585c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80057fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005800:	d826      	bhi.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8005802:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005806:	d02b      	beq.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8005808:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800580c:	d820      	bhi.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800580e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005812:	d012      	beq.n	800583a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8005814:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005818:	d81a      	bhi.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800581a:	2b00      	cmp	r3, #0
 800581c:	d022      	beq.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800581e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005822:	d115      	bne.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005824:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005828:	3308      	adds	r3, #8
 800582a:	2100      	movs	r1, #0
 800582c:	4618      	mov	r0, r3
 800582e:	f001 fce7 	bl	8007200 <RCCEx_PLL2_Config>
 8005832:	4603      	mov	r3, r0
 8005834:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005838:	e015      	b.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800583a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800583e:	3328      	adds	r3, #40	@ 0x28
 8005840:	2102      	movs	r1, #2
 8005842:	4618      	mov	r0, r3
 8005844:	f001 fd8e 	bl	8007364 <RCCEx_PLL3_Config>
 8005848:	4603      	mov	r3, r0
 800584a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800584e:	e00a      	b.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005856:	e006      	b.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8005858:	bf00      	nop
 800585a:	e004      	b.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800585c:	bf00      	nop
 800585e:	e002      	b.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8005860:	bf00      	nop
 8005862:	e000      	b.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8005864:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005866:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800586a:	2b00      	cmp	r3, #0
 800586c:	d10b      	bne.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800586e:	4b39      	ldr	r3, [pc, #228]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005870:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005872:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005876:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800587a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800587e:	4a35      	ldr	r2, [pc, #212]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005880:	430b      	orrs	r3, r1
 8005882:	6553      	str	r3, [r2, #84]	@ 0x54
 8005884:	e003      	b.n	800588e <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005886:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800588a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800588e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005896:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800589a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800589e:	2300      	movs	r3, #0
 80058a0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80058a4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80058a8:	460b      	mov	r3, r1
 80058aa:	4313      	orrs	r3, r2
 80058ac:	d058      	beq.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80058ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80058b2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80058b6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80058ba:	d033      	beq.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80058bc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80058c0:	d82c      	bhi.n	800591c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80058c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058c6:	d02f      	beq.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80058c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058cc:	d826      	bhi.n	800591c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80058ce:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80058d2:	d02b      	beq.n	800592c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80058d4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80058d8:	d820      	bhi.n	800591c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80058da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80058de:	d012      	beq.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 80058e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80058e4:	d81a      	bhi.n	800591c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d022      	beq.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 80058ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058ee:	d115      	bne.n	800591c <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80058f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80058f4:	3308      	adds	r3, #8
 80058f6:	2100      	movs	r1, #0
 80058f8:	4618      	mov	r0, r3
 80058fa:	f001 fc81 	bl	8007200 <RCCEx_PLL2_Config>
 80058fe:	4603      	mov	r3, r0
 8005900:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005904:	e015      	b.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005906:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800590a:	3328      	adds	r3, #40	@ 0x28
 800590c:	2102      	movs	r1, #2
 800590e:	4618      	mov	r0, r3
 8005910:	f001 fd28 	bl	8007364 <RCCEx_PLL3_Config>
 8005914:	4603      	mov	r3, r0
 8005916:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800591a:	e00a      	b.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005922:	e006      	b.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8005924:	bf00      	nop
 8005926:	e004      	b.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8005928:	bf00      	nop
 800592a:	e002      	b.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800592c:	bf00      	nop
 800592e:	e000      	b.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8005930:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005932:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005936:	2b00      	cmp	r3, #0
 8005938:	d10e      	bne.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800593a:	4b06      	ldr	r3, [pc, #24]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800593c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800593e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8005942:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005946:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800594a:	4a02      	ldr	r2, [pc, #8]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800594c:	430b      	orrs	r3, r1
 800594e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005950:	e006      	b.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8005952:	bf00      	nop
 8005954:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005958:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800595c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005960:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005968:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800596c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005970:	2300      	movs	r3, #0
 8005972:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005976:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800597a:	460b      	mov	r3, r1
 800597c:	4313      	orrs	r3, r2
 800597e:	d055      	beq.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005980:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005984:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005988:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800598c:	d033      	beq.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800598e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005992:	d82c      	bhi.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8005994:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005998:	d02f      	beq.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800599a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800599e:	d826      	bhi.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80059a0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80059a4:	d02b      	beq.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80059a6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80059aa:	d820      	bhi.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80059ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80059b0:	d012      	beq.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 80059b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80059b6:	d81a      	bhi.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d022      	beq.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 80059bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80059c0:	d115      	bne.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80059c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80059c6:	3308      	adds	r3, #8
 80059c8:	2100      	movs	r1, #0
 80059ca:	4618      	mov	r0, r3
 80059cc:	f001 fc18 	bl	8007200 <RCCEx_PLL2_Config>
 80059d0:	4603      	mov	r3, r0
 80059d2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80059d6:	e015      	b.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80059d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80059dc:	3328      	adds	r3, #40	@ 0x28
 80059de:	2102      	movs	r1, #2
 80059e0:	4618      	mov	r0, r3
 80059e2:	f001 fcbf 	bl	8007364 <RCCEx_PLL3_Config>
 80059e6:	4603      	mov	r3, r0
 80059e8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80059ec:	e00a      	b.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80059f4:	e006      	b.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80059f6:	bf00      	nop
 80059f8:	e004      	b.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80059fa:	bf00      	nop
 80059fc:	e002      	b.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80059fe:	bf00      	nop
 8005a00:	e000      	b.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8005a02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a04:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d10b      	bne.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005a0c:	4ba1      	ldr	r3, [pc, #644]	@ (8005c94 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005a0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a10:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005a14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a18:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005a1c:	4a9d      	ldr	r2, [pc, #628]	@ (8005c94 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005a1e:	430b      	orrs	r3, r1
 8005a20:	6593      	str	r3, [r2, #88]	@ 0x58
 8005a22:	e003      	b.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a24:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005a28:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005a2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a34:	f002 0308 	and.w	r3, r2, #8
 8005a38:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005a42:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005a46:	460b      	mov	r3, r1
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	d01e      	beq.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005a4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a58:	d10c      	bne.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005a5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a5e:	3328      	adds	r3, #40	@ 0x28
 8005a60:	2102      	movs	r1, #2
 8005a62:	4618      	mov	r0, r3
 8005a64:	f001 fc7e 	bl	8007364 <RCCEx_PLL3_Config>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d002      	beq.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005a74:	4b87      	ldr	r3, [pc, #540]	@ (8005c94 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005a76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a78:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005a7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a84:	4a83      	ldr	r2, [pc, #524]	@ (8005c94 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005a86:	430b      	orrs	r3, r1
 8005a88:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005a8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a92:	f002 0310 	and.w	r3, r2, #16
 8005a96:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005aa0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005aa4:	460b      	mov	r3, r1
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	d01e      	beq.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005aaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005aae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005ab2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ab6:	d10c      	bne.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005ab8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005abc:	3328      	adds	r3, #40	@ 0x28
 8005abe:	2102      	movs	r1, #2
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f001 fc4f 	bl	8007364 <RCCEx_PLL3_Config>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d002      	beq.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005ad2:	4b70      	ldr	r3, [pc, #448]	@ (8005c94 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005ad4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ad6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005ada:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ade:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005ae2:	4a6c      	ldr	r2, [pc, #432]	@ (8005c94 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005ae4:	430b      	orrs	r3, r1
 8005ae6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005ae8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005af0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005af4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005af8:	2300      	movs	r3, #0
 8005afa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005afe:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005b02:	460b      	mov	r3, r1
 8005b04:	4313      	orrs	r3, r2
 8005b06:	d03e      	beq.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005b08:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b0c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005b10:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005b14:	d022      	beq.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8005b16:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005b1a:	d81b      	bhi.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d003      	beq.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8005b20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b24:	d00b      	beq.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8005b26:	e015      	b.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005b28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b2c:	3308      	adds	r3, #8
 8005b2e:	2100      	movs	r1, #0
 8005b30:	4618      	mov	r0, r3
 8005b32:	f001 fb65 	bl	8007200 <RCCEx_PLL2_Config>
 8005b36:	4603      	mov	r3, r0
 8005b38:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005b3c:	e00f      	b.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005b3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b42:	3328      	adds	r3, #40	@ 0x28
 8005b44:	2102      	movs	r1, #2
 8005b46:	4618      	mov	r0, r3
 8005b48:	f001 fc0c 	bl	8007364 <RCCEx_PLL3_Config>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005b52:	e004      	b.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005b5a:	e000      	b.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8005b5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b5e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d10b      	bne.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005b66:	4b4b      	ldr	r3, [pc, #300]	@ (8005c94 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005b68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b6a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005b6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b72:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005b76:	4a47      	ldr	r2, [pc, #284]	@ (8005c94 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005b78:	430b      	orrs	r3, r1
 8005b7a:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b7c:	e003      	b.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b7e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005b82:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005b86:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b8e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005b92:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005b94:	2300      	movs	r3, #0
 8005b96:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005b98:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005b9c:	460b      	mov	r3, r1
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	d03b      	beq.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005ba2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005baa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005bae:	d01f      	beq.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8005bb0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005bb4:	d818      	bhi.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8005bb6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005bba:	d003      	beq.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8005bbc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005bc0:	d007      	beq.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8005bc2:	e011      	b.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bc4:	4b33      	ldr	r3, [pc, #204]	@ (8005c94 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bc8:	4a32      	ldr	r2, [pc, #200]	@ (8005c94 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005bca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005bce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005bd0:	e00f      	b.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005bd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005bd6:	3328      	adds	r3, #40	@ 0x28
 8005bd8:	2101      	movs	r1, #1
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f001 fbc2 	bl	8007364 <RCCEx_PLL3_Config>
 8005be0:	4603      	mov	r3, r0
 8005be2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8005be6:	e004      	b.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005bee:	e000      	b.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8005bf0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bf2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d10b      	bne.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005bfa:	4b26      	ldr	r3, [pc, #152]	@ (8005c94 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005bfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bfe:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005c02:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c0a:	4a22      	ldr	r2, [pc, #136]	@ (8005c94 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005c0c:	430b      	orrs	r3, r1
 8005c0e:	6553      	str	r3, [r2, #84]	@ 0x54
 8005c10:	e003      	b.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c12:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005c16:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005c1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c22:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005c26:	673b      	str	r3, [r7, #112]	@ 0x70
 8005c28:	2300      	movs	r3, #0
 8005c2a:	677b      	str	r3, [r7, #116]	@ 0x74
 8005c2c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005c30:	460b      	mov	r3, r1
 8005c32:	4313      	orrs	r3, r2
 8005c34:	d034      	beq.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005c36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d003      	beq.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8005c40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c44:	d007      	beq.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8005c46:	e011      	b.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c48:	4b12      	ldr	r3, [pc, #72]	@ (8005c94 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005c4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c4c:	4a11      	ldr	r2, [pc, #68]	@ (8005c94 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005c4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c52:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005c54:	e00e      	b.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005c56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c5a:	3308      	adds	r3, #8
 8005c5c:	2102      	movs	r1, #2
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f001 face 	bl	8007200 <RCCEx_PLL2_Config>
 8005c64:	4603      	mov	r3, r0
 8005c66:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005c6a:	e003      	b.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005c72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c74:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d10d      	bne.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005c7c:	4b05      	ldr	r3, [pc, #20]	@ (8005c94 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005c7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c80:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005c84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c8a:	4a02      	ldr	r2, [pc, #8]	@ (8005c94 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005c8c:	430b      	orrs	r3, r1
 8005c8e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005c90:	e006      	b.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8005c92:	bf00      	nop
 8005c94:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c98:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005c9c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005ca0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ca8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005cac:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005cae:	2300      	movs	r3, #0
 8005cb0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005cb2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005cb6:	460b      	mov	r3, r1
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	d00c      	beq.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005cbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005cc0:	3328      	adds	r3, #40	@ 0x28
 8005cc2:	2102      	movs	r1, #2
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f001 fb4d 	bl	8007364 <RCCEx_PLL3_Config>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d002      	beq.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005cd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cde:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005ce2:	663b      	str	r3, [r7, #96]	@ 0x60
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	667b      	str	r3, [r7, #100]	@ 0x64
 8005ce8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005cec:	460b      	mov	r3, r1
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	d038      	beq.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005cf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cfa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005cfe:	d018      	beq.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8005d00:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d04:	d811      	bhi.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8005d06:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d0a:	d014      	beq.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8005d0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d10:	d80b      	bhi.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d011      	beq.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8005d16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d1a:	d106      	bne.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d1c:	4bc3      	ldr	r3, [pc, #780]	@ (800602c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d20:	4ac2      	ldr	r2, [pc, #776]	@ (800602c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005d22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005d28:	e008      	b.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005d30:	e004      	b.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8005d32:	bf00      	nop
 8005d34:	e002      	b.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8005d36:	bf00      	nop
 8005d38:	e000      	b.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8005d3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d3c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d10b      	bne.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005d44:	4bb9      	ldr	r3, [pc, #740]	@ (800602c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005d46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d48:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005d4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d54:	4ab5      	ldr	r2, [pc, #724]	@ (800602c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005d56:	430b      	orrs	r3, r1
 8005d58:	6553      	str	r3, [r2, #84]	@ 0x54
 8005d5a:	e003      	b.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d5c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005d60:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005d64:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d6c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005d70:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005d72:	2300      	movs	r3, #0
 8005d74:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005d76:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005d7a:	460b      	mov	r3, r1
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	d009      	beq.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005d80:	4baa      	ldr	r3, [pc, #680]	@ (800602c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005d82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d84:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005d88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005d8c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005d8e:	4aa7      	ldr	r2, [pc, #668]	@ (800602c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005d90:	430b      	orrs	r3, r1
 8005d92:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005d94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d9c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005da0:	653b      	str	r3, [r7, #80]	@ 0x50
 8005da2:	2300      	movs	r3, #0
 8005da4:	657b      	str	r3, [r7, #84]	@ 0x54
 8005da6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005daa:	460b      	mov	r3, r1
 8005dac:	4313      	orrs	r3, r2
 8005dae:	d009      	beq.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005db0:	4b9e      	ldr	r3, [pc, #632]	@ (800602c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005db2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005db4:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005db8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005dbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dbe:	4a9b      	ldr	r2, [pc, #620]	@ (800602c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005dc0:	430b      	orrs	r3, r1
 8005dc2:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8005dc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dcc:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005dd0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005dd6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005dda:	460b      	mov	r3, r1
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	d009      	beq.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8005de0:	4b92      	ldr	r3, [pc, #584]	@ (800602c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005de2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005de4:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 8005de8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005dec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005dee:	4a8f      	ldr	r2, [pc, #572]	@ (800602c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005df0:	430b      	orrs	r3, r1
 8005df2:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005df4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dfc:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005e00:	643b      	str	r3, [r7, #64]	@ 0x40
 8005e02:	2300      	movs	r3, #0
 8005e04:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e06:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005e0a:	460b      	mov	r3, r1
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	d00e      	beq.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005e10:	4b86      	ldr	r3, [pc, #536]	@ (800602c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005e12:	691b      	ldr	r3, [r3, #16]
 8005e14:	4a85      	ldr	r2, [pc, #532]	@ (800602c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005e16:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005e1a:	6113      	str	r3, [r2, #16]
 8005e1c:	4b83      	ldr	r3, [pc, #524]	@ (800602c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005e1e:	6919      	ldr	r1, [r3, #16]
 8005e20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005e24:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005e28:	4a80      	ldr	r2, [pc, #512]	@ (800602c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005e2a:	430b      	orrs	r3, r1
 8005e2c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005e2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e36:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005e3a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e40:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005e44:	460b      	mov	r3, r1
 8005e46:	4313      	orrs	r3, r2
 8005e48:	d009      	beq.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005e4a:	4b78      	ldr	r3, [pc, #480]	@ (800602c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005e4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e4e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005e52:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005e56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e58:	4a74      	ldr	r2, [pc, #464]	@ (800602c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005e5a:	430b      	orrs	r3, r1
 8005e5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005e5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e66:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005e6a:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e70:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005e74:	460b      	mov	r3, r1
 8005e76:	4313      	orrs	r3, r2
 8005e78:	d00a      	beq.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005e7a:	4b6c      	ldr	r3, [pc, #432]	@ (800602c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005e7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e7e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005e82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005e86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e8a:	4a68      	ldr	r2, [pc, #416]	@ (800602c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005e8c:	430b      	orrs	r3, r1
 8005e8e:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005e90:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e98:	2100      	movs	r1, #0
 8005e9a:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005e9c:	f003 0301 	and.w	r3, r3, #1
 8005ea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ea2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005ea6:	460b      	mov	r3, r1
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	d011      	beq.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005eac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005eb0:	3308      	adds	r3, #8
 8005eb2:	2100      	movs	r1, #0
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f001 f9a3 	bl	8007200 <RCCEx_PLL2_Config>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8005ec0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d003      	beq.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ec8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005ecc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005ed0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed8:	2100      	movs	r1, #0
 8005eda:	6239      	str	r1, [r7, #32]
 8005edc:	f003 0302 	and.w	r3, r3, #2
 8005ee0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ee2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005ee6:	460b      	mov	r3, r1
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	d011      	beq.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005eec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ef0:	3308      	adds	r3, #8
 8005ef2:	2101      	movs	r1, #1
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f001 f983 	bl	8007200 <RCCEx_PLL2_Config>
 8005efa:	4603      	mov	r3, r0
 8005efc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8005f00:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d003      	beq.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f08:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005f0c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005f10:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f18:	2100      	movs	r1, #0
 8005f1a:	61b9      	str	r1, [r7, #24]
 8005f1c:	f003 0304 	and.w	r3, r3, #4
 8005f20:	61fb      	str	r3, [r7, #28]
 8005f22:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005f26:	460b      	mov	r3, r1
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	d011      	beq.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005f2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005f30:	3308      	adds	r3, #8
 8005f32:	2102      	movs	r1, #2
 8005f34:	4618      	mov	r0, r3
 8005f36:	f001 f963 	bl	8007200 <RCCEx_PLL2_Config>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8005f40:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d003      	beq.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f48:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005f4c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005f50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f58:	2100      	movs	r1, #0
 8005f5a:	6139      	str	r1, [r7, #16]
 8005f5c:	f003 0308 	and.w	r3, r3, #8
 8005f60:	617b      	str	r3, [r7, #20]
 8005f62:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005f66:	460b      	mov	r3, r1
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	d011      	beq.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005f6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005f70:	3328      	adds	r3, #40	@ 0x28
 8005f72:	2100      	movs	r1, #0
 8005f74:	4618      	mov	r0, r3
 8005f76:	f001 f9f5 	bl	8007364 <RCCEx_PLL3_Config>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 8005f80:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d003      	beq.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f88:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005f8c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005f90:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f98:	2100      	movs	r1, #0
 8005f9a:	60b9      	str	r1, [r7, #8]
 8005f9c:	f003 0310 	and.w	r3, r3, #16
 8005fa0:	60fb      	str	r3, [r7, #12]
 8005fa2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005fa6:	460b      	mov	r3, r1
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	d011      	beq.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005fac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005fb0:	3328      	adds	r3, #40	@ 0x28
 8005fb2:	2101      	movs	r1, #1
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f001 f9d5 	bl	8007364 <RCCEx_PLL3_Config>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8005fc0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d003      	beq.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fc8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005fcc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005fd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd8:	2100      	movs	r1, #0
 8005fda:	6039      	str	r1, [r7, #0]
 8005fdc:	f003 0320 	and.w	r3, r3, #32
 8005fe0:	607b      	str	r3, [r7, #4]
 8005fe2:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005fe6:	460b      	mov	r3, r1
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	d011      	beq.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005fec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ff0:	3328      	adds	r3, #40	@ 0x28
 8005ff2:	2102      	movs	r1, #2
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f001 f9b5 	bl	8007364 <RCCEx_PLL3_Config>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8006000:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8006004:	2b00      	cmp	r3, #0
 8006006:	d003      	beq.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006008:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800600c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 8006010:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8006014:	2b00      	cmp	r3, #0
 8006016:	d101      	bne.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8006018:	2300      	movs	r3, #0
 800601a:	e000      	b.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 800601c:	2301      	movs	r3, #1
}
 800601e:	4618      	mov	r0, r3
 8006020:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8006024:	46bd      	mov	sp, r7
 8006026:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800602a:	bf00      	nop
 800602c:	58024400 	.word	0x58024400

08006030 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b090      	sub	sp, #64	@ 0x40
 8006034:	af00      	add	r7, sp, #0
 8006036:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800603a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800603e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8006042:	430b      	orrs	r3, r1
 8006044:	f040 8094 	bne.w	8006170 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8006048:	4b97      	ldr	r3, [pc, #604]	@ (80062a8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800604a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800604c:	f003 0307 	and.w	r3, r3, #7
 8006050:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006054:	2b04      	cmp	r3, #4
 8006056:	f200 8087 	bhi.w	8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800605a:	a201      	add	r2, pc, #4	@ (adr r2, 8006060 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800605c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006060:	08006075 	.word	0x08006075
 8006064:	0800609d 	.word	0x0800609d
 8006068:	080060c5 	.word	0x080060c5
 800606c:	08006161 	.word	0x08006161
 8006070:	080060ed 	.word	0x080060ed
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006074:	4b8c      	ldr	r3, [pc, #560]	@ (80062a8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800607c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006080:	d108      	bne.n	8006094 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006082:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006086:	4618      	mov	r0, r3
 8006088:	f000 ff68 	bl	8006f5c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800608c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800608e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006090:	f000 bc97 	b.w	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006094:	2300      	movs	r3, #0
 8006096:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006098:	f000 bc93 	b.w	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800609c:	4b82      	ldr	r3, [pc, #520]	@ (80062a8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80060a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80060a8:	d108      	bne.n	80060bc <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80060aa:	f107 0318 	add.w	r3, r7, #24
 80060ae:	4618      	mov	r0, r3
 80060b0:	f000 fcac 	bl	8006a0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80060b4:	69bb      	ldr	r3, [r7, #24]
 80060b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80060b8:	f000 bc83 	b.w	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80060bc:	2300      	movs	r3, #0
 80060be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80060c0:	f000 bc7f 	b.w	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80060c4:	4b78      	ldr	r3, [pc, #480]	@ (80062a8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80060cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060d0:	d108      	bne.n	80060e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80060d2:	f107 030c 	add.w	r3, r7, #12
 80060d6:	4618      	mov	r0, r3
 80060d8:	f000 fdec 	bl	8006cb4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80060e0:	f000 bc6f 	b.w	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80060e4:	2300      	movs	r3, #0
 80060e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80060e8:	f000 bc6b 	b.w	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80060ec:	4b6e      	ldr	r3, [pc, #440]	@ (80062a8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80060ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060f0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80060f4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80060f6:	4b6c      	ldr	r3, [pc, #432]	@ (80062a8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f003 0304 	and.w	r3, r3, #4
 80060fe:	2b04      	cmp	r3, #4
 8006100:	d10c      	bne.n	800611c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006102:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006104:	2b00      	cmp	r3, #0
 8006106:	d109      	bne.n	800611c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006108:	4b67      	ldr	r3, [pc, #412]	@ (80062a8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	08db      	lsrs	r3, r3, #3
 800610e:	f003 0303 	and.w	r3, r3, #3
 8006112:	4a66      	ldr	r2, [pc, #408]	@ (80062ac <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8006114:	fa22 f303 	lsr.w	r3, r2, r3
 8006118:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800611a:	e01f      	b.n	800615c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800611c:	4b62      	ldr	r3, [pc, #392]	@ (80062a8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006124:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006128:	d106      	bne.n	8006138 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800612a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800612c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006130:	d102      	bne.n	8006138 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006132:	4b5f      	ldr	r3, [pc, #380]	@ (80062b0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8006134:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006136:	e011      	b.n	800615c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006138:	4b5b      	ldr	r3, [pc, #364]	@ (80062a8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006140:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006144:	d106      	bne.n	8006154 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8006146:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006148:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800614c:	d102      	bne.n	8006154 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800614e:	4b59      	ldr	r3, [pc, #356]	@ (80062b4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8006150:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006152:	e003      	b.n	800615c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006154:	2300      	movs	r3, #0
 8006156:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006158:	f000 bc33 	b.w	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800615c:	f000 bc31 	b.w	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006160:	4b55      	ldr	r3, [pc, #340]	@ (80062b8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006162:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006164:	f000 bc2d 	b.w	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8006168:	2300      	movs	r3, #0
 800616a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800616c:	f000 bc29 	b.w	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 8006170:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006174:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8006178:	430b      	orrs	r3, r1
 800617a:	f040 809f 	bne.w	80062bc <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 800617e:	4b4a      	ldr	r3, [pc, #296]	@ (80062a8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006180:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006182:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8006186:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800618a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800618e:	d04d      	beq.n	800622c <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8006190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006192:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006196:	f200 8084 	bhi.w	80062a2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800619a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800619c:	2bc0      	cmp	r3, #192	@ 0xc0
 800619e:	d07d      	beq.n	800629c <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 80061a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061a2:	2bc0      	cmp	r3, #192	@ 0xc0
 80061a4:	d87d      	bhi.n	80062a2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80061a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061a8:	2b80      	cmp	r3, #128	@ 0x80
 80061aa:	d02d      	beq.n	8006208 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 80061ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ae:	2b80      	cmp	r3, #128	@ 0x80
 80061b0:	d877      	bhi.n	80062a2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80061b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d003      	beq.n	80061c0 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 80061b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ba:	2b40      	cmp	r3, #64	@ 0x40
 80061bc:	d012      	beq.n	80061e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 80061be:	e070      	b.n	80062a2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80061c0:	4b39      	ldr	r3, [pc, #228]	@ (80062a8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061c8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80061cc:	d107      	bne.n	80061de <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80061ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80061d2:	4618      	mov	r0, r3
 80061d4:	f000 fec2 	bl	8006f5c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80061d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80061dc:	e3f1      	b.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80061de:	2300      	movs	r3, #0
 80061e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061e2:	e3ee      	b.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80061e4:	4b30      	ldr	r3, [pc, #192]	@ (80062a8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80061ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80061f0:	d107      	bne.n	8006202 <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80061f2:	f107 0318 	add.w	r3, r7, #24
 80061f6:	4618      	mov	r0, r3
 80061f8:	f000 fc08 	bl	8006a0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80061fc:	69bb      	ldr	r3, [r7, #24]
 80061fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006200:	e3df      	b.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006202:	2300      	movs	r3, #0
 8006204:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006206:	e3dc      	b.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006208:	4b27      	ldr	r3, [pc, #156]	@ (80062a8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006210:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006214:	d107      	bne.n	8006226 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006216:	f107 030c 	add.w	r3, r7, #12
 800621a:	4618      	mov	r0, r3
 800621c:	f000 fd4a 	bl	8006cb4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006224:	e3cd      	b.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006226:	2300      	movs	r3, #0
 8006228:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800622a:	e3ca      	b.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800622c:	4b1e      	ldr	r3, [pc, #120]	@ (80062a8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800622e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006230:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006234:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006236:	4b1c      	ldr	r3, [pc, #112]	@ (80062a8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f003 0304 	and.w	r3, r3, #4
 800623e:	2b04      	cmp	r3, #4
 8006240:	d10c      	bne.n	800625c <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 8006242:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006244:	2b00      	cmp	r3, #0
 8006246:	d109      	bne.n	800625c <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006248:	4b17      	ldr	r3, [pc, #92]	@ (80062a8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	08db      	lsrs	r3, r3, #3
 800624e:	f003 0303 	and.w	r3, r3, #3
 8006252:	4a16      	ldr	r2, [pc, #88]	@ (80062ac <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8006254:	fa22 f303 	lsr.w	r3, r2, r3
 8006258:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800625a:	e01e      	b.n	800629a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800625c:	4b12      	ldr	r3, [pc, #72]	@ (80062a8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006264:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006268:	d106      	bne.n	8006278 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 800626a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800626c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006270:	d102      	bne.n	8006278 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006272:	4b0f      	ldr	r3, [pc, #60]	@ (80062b0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8006274:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006276:	e010      	b.n	800629a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006278:	4b0b      	ldr	r3, [pc, #44]	@ (80062a8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006280:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006284:	d106      	bne.n	8006294 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8006286:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006288:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800628c:	d102      	bne.n	8006294 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800628e:	4b09      	ldr	r3, [pc, #36]	@ (80062b4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8006290:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006292:	e002      	b.n	800629a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006294:	2300      	movs	r3, #0
 8006296:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006298:	e393      	b.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800629a:	e392      	b.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800629c:	4b06      	ldr	r3, [pc, #24]	@ (80062b8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800629e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80062a0:	e38f      	b.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 80062a2:	2300      	movs	r3, #0
 80062a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80062a6:	e38c      	b.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80062a8:	58024400 	.word	0x58024400
 80062ac:	03d09000 	.word	0x03d09000
 80062b0:	003d0900 	.word	0x003d0900
 80062b4:	007a1200 	.word	0x007a1200
 80062b8:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 80062bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062c0:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80062c4:	430b      	orrs	r3, r1
 80062c6:	f040 809c 	bne.w	8006402 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 80062ca:	4b9e      	ldr	r3, [pc, #632]	@ (8006544 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80062cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062ce:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 80062d2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80062d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80062da:	d054      	beq.n	8006386 <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 80062dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80062e2:	f200 808b 	bhi.w	80063fc <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 80062e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062e8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80062ec:	f000 8083 	beq.w	80063f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 80062f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062f2:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80062f6:	f200 8081 	bhi.w	80063fc <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 80062fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006300:	d02f      	beq.n	8006362 <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 8006302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006304:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006308:	d878      	bhi.n	80063fc <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800630a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800630c:	2b00      	cmp	r3, #0
 800630e:	d004      	beq.n	800631a <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 8006310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006312:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006316:	d012      	beq.n	800633e <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 8006318:	e070      	b.n	80063fc <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800631a:	4b8a      	ldr	r3, [pc, #552]	@ (8006544 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006322:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006326:	d107      	bne.n	8006338 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006328:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800632c:	4618      	mov	r0, r3
 800632e:	f000 fe15 	bl	8006f5c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006334:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006336:	e344      	b.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006338:	2300      	movs	r3, #0
 800633a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800633c:	e341      	b.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800633e:	4b81      	ldr	r3, [pc, #516]	@ (8006544 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006346:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800634a:	d107      	bne.n	800635c <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800634c:	f107 0318 	add.w	r3, r7, #24
 8006350:	4618      	mov	r0, r3
 8006352:	f000 fb5b 	bl	8006a0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006356:	69bb      	ldr	r3, [r7, #24]
 8006358:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800635a:	e332      	b.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800635c:	2300      	movs	r3, #0
 800635e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006360:	e32f      	b.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006362:	4b78      	ldr	r3, [pc, #480]	@ (8006544 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800636a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800636e:	d107      	bne.n	8006380 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006370:	f107 030c 	add.w	r3, r7, #12
 8006374:	4618      	mov	r0, r3
 8006376:	f000 fc9d 	bl	8006cb4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800637e:	e320      	b.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006380:	2300      	movs	r3, #0
 8006382:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006384:	e31d      	b.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006386:	4b6f      	ldr	r3, [pc, #444]	@ (8006544 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006388:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800638a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800638e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006390:	4b6c      	ldr	r3, [pc, #432]	@ (8006544 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f003 0304 	and.w	r3, r3, #4
 8006398:	2b04      	cmp	r3, #4
 800639a:	d10c      	bne.n	80063b6 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 800639c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d109      	bne.n	80063b6 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80063a2:	4b68      	ldr	r3, [pc, #416]	@ (8006544 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	08db      	lsrs	r3, r3, #3
 80063a8:	f003 0303 	and.w	r3, r3, #3
 80063ac:	4a66      	ldr	r2, [pc, #408]	@ (8006548 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 80063ae:	fa22 f303 	lsr.w	r3, r2, r3
 80063b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80063b4:	e01e      	b.n	80063f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80063b6:	4b63      	ldr	r3, [pc, #396]	@ (8006544 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063c2:	d106      	bne.n	80063d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80063c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80063ca:	d102      	bne.n	80063d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80063cc:	4b5f      	ldr	r3, [pc, #380]	@ (800654c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 80063ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80063d0:	e010      	b.n	80063f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80063d2:	4b5c      	ldr	r3, [pc, #368]	@ (8006544 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80063de:	d106      	bne.n	80063ee <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80063e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80063e6:	d102      	bne.n	80063ee <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80063e8:	4b59      	ldr	r3, [pc, #356]	@ (8006550 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 80063ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80063ec:	e002      	b.n	80063f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80063ee:	2300      	movs	r3, #0
 80063f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        break;
 80063f2:	e2e6      	b.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80063f4:	e2e5      	b.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80063f6:	4b57      	ldr	r3, [pc, #348]	@ (8006554 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80063f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063fa:	e2e2      	b.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 80063fc:	2300      	movs	r3, #0
 80063fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006400:	e2df      	b.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006402:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006406:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800640a:	430b      	orrs	r3, r1
 800640c:	f040 80a7 	bne.w	800655e <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8006410:	4b4c      	ldr	r3, [pc, #304]	@ (8006544 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006412:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006414:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8006418:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800641a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800641c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006420:	d055      	beq.n	80064ce <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 8006422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006424:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006428:	f200 8096 	bhi.w	8006558 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 800642c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800642e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006432:	f000 8084 	beq.w	800653e <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 8006436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006438:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800643c:	f200 808c 	bhi.w	8006558 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8006440:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006442:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006446:	d030      	beq.n	80064aa <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 8006448:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800644a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800644e:	f200 8083 	bhi.w	8006558 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8006452:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006454:	2b00      	cmp	r3, #0
 8006456:	d004      	beq.n	8006462 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8006458:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800645a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800645e:	d012      	beq.n	8006486 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 8006460:	e07a      	b.n	8006558 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006462:	4b38      	ldr	r3, [pc, #224]	@ (8006544 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800646a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800646e:	d107      	bne.n	8006480 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006470:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006474:	4618      	mov	r0, r3
 8006476:	f000 fd71 	bl	8006f5c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800647a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800647c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800647e:	e2a0      	b.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006480:	2300      	movs	r3, #0
 8006482:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006484:	e29d      	b.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006486:	4b2f      	ldr	r3, [pc, #188]	@ (8006544 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800648e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006492:	d107      	bne.n	80064a4 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006494:	f107 0318 	add.w	r3, r7, #24
 8006498:	4618      	mov	r0, r3
 800649a:	f000 fab7 	bl	8006a0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800649e:	69bb      	ldr	r3, [r7, #24]
 80064a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80064a2:	e28e      	b.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80064a4:	2300      	movs	r3, #0
 80064a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064a8:	e28b      	b.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80064aa:	4b26      	ldr	r3, [pc, #152]	@ (8006544 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80064b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80064b6:	d107      	bne.n	80064c8 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80064b8:	f107 030c 	add.w	r3, r7, #12
 80064bc:	4618      	mov	r0, r3
 80064be:	f000 fbf9 	bl	8006cb4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80064c6:	e27c      	b.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80064c8:	2300      	movs	r3, #0
 80064ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064cc:	e279      	b.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80064ce:	4b1d      	ldr	r3, [pc, #116]	@ (8006544 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80064d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064d2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80064d6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80064d8:	4b1a      	ldr	r3, [pc, #104]	@ (8006544 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f003 0304 	and.w	r3, r3, #4
 80064e0:	2b04      	cmp	r3, #4
 80064e2:	d10c      	bne.n	80064fe <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 80064e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d109      	bne.n	80064fe <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80064ea:	4b16      	ldr	r3, [pc, #88]	@ (8006544 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	08db      	lsrs	r3, r3, #3
 80064f0:	f003 0303 	and.w	r3, r3, #3
 80064f4:	4a14      	ldr	r2, [pc, #80]	@ (8006548 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 80064f6:	fa22 f303 	lsr.w	r3, r2, r3
 80064fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80064fc:	e01e      	b.n	800653c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80064fe:	4b11      	ldr	r3, [pc, #68]	@ (8006544 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006506:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800650a:	d106      	bne.n	800651a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800650c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800650e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006512:	d102      	bne.n	800651a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006514:	4b0d      	ldr	r3, [pc, #52]	@ (800654c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8006516:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006518:	e010      	b.n	800653c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800651a:	4b0a      	ldr	r3, [pc, #40]	@ (8006544 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006522:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006526:	d106      	bne.n	8006536 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8006528:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800652a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800652e:	d102      	bne.n	8006536 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006530:	4b07      	ldr	r3, [pc, #28]	@ (8006550 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8006532:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006534:	e002      	b.n	800653c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006536:	2300      	movs	r3, #0
 8006538:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800653a:	e242      	b.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800653c:	e241      	b.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800653e:	4b05      	ldr	r3, [pc, #20]	@ (8006554 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006540:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006542:	e23e      	b.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8006544:	58024400 	.word	0x58024400
 8006548:	03d09000 	.word	0x03d09000
 800654c:	003d0900 	.word	0x003d0900
 8006550:	007a1200 	.word	0x007a1200
 8006554:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8006558:	2300      	movs	r3, #0
 800655a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800655c:	e231      	b.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800655e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006562:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8006566:	430b      	orrs	r3, r1
 8006568:	f040 8085 	bne.w	8006676 <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800656c:	4b9c      	ldr	r3, [pc, #624]	@ (80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800656e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006570:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8006574:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8006576:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006578:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800657c:	d06b      	beq.n	8006656 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 800657e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006580:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006584:	d874      	bhi.n	8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8006586:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006588:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800658c:	d056      	beq.n	800663c <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 800658e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006590:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006594:	d86c      	bhi.n	8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8006596:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006598:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800659c:	d03b      	beq.n	8006616 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 800659e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065a0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80065a4:	d864      	bhi.n	8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 80065a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80065ac:	d021      	beq.n	80065f2 <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 80065ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80065b4:	d85c      	bhi.n	8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 80065b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d004      	beq.n	80065c6 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 80065bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065c2:	d004      	beq.n	80065ce <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 80065c4:	e054      	b.n	8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80065c6:	f7fe fb49 	bl	8004c5c <HAL_RCC_GetPCLK1Freq>
 80065ca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80065cc:	e1f9      	b.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80065ce:	4b84      	ldr	r3, [pc, #528]	@ (80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80065d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80065da:	d107      	bne.n	80065ec <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065dc:	f107 0318 	add.w	r3, r7, #24
 80065e0:	4618      	mov	r0, r3
 80065e2:	f000 fa13 	bl	8006a0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80065e6:	69fb      	ldr	r3, [r7, #28]
 80065e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80065ea:	e1ea      	b.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80065ec:	2300      	movs	r3, #0
 80065ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065f0:	e1e7      	b.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80065f2:	4b7b      	ldr	r3, [pc, #492]	@ (80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80065fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80065fe:	d107      	bne.n	8006610 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006600:	f107 030c 	add.w	r3, r7, #12
 8006604:	4618      	mov	r0, r3
 8006606:	f000 fb55 	bl	8006cb4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800660e:	e1d8      	b.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006610:	2300      	movs	r3, #0
 8006612:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006614:	e1d5      	b.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006616:	4b72      	ldr	r3, [pc, #456]	@ (80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f003 0304 	and.w	r3, r3, #4
 800661e:	2b04      	cmp	r3, #4
 8006620:	d109      	bne.n	8006636 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006622:	4b6f      	ldr	r3, [pc, #444]	@ (80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	08db      	lsrs	r3, r3, #3
 8006628:	f003 0303 	and.w	r3, r3, #3
 800662c:	4a6d      	ldr	r2, [pc, #436]	@ (80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800662e:	fa22 f303 	lsr.w	r3, r2, r3
 8006632:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006634:	e1c5      	b.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006636:	2300      	movs	r3, #0
 8006638:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800663a:	e1c2      	b.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800663c:	4b68      	ldr	r3, [pc, #416]	@ (80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006644:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006648:	d102      	bne.n	8006650 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 800664a:	4b67      	ldr	r3, [pc, #412]	@ (80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800664c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800664e:	e1b8      	b.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006650:	2300      	movs	r3, #0
 8006652:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006654:	e1b5      	b.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006656:	4b62      	ldr	r3, [pc, #392]	@ (80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800665e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006662:	d102      	bne.n	800666a <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 8006664:	4b61      	ldr	r3, [pc, #388]	@ (80067ec <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8006666:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006668:	e1ab      	b.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800666a:	2300      	movs	r3, #0
 800666c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800666e:	e1a8      	b.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8006670:	2300      	movs	r3, #0
 8006672:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006674:	e1a5      	b.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006676:	e9d7 2300 	ldrd	r2, r3, [r7]
 800667a:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800667e:	430b      	orrs	r3, r1
 8006680:	d173      	bne.n	800676a <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006682:	4b57      	ldr	r3, [pc, #348]	@ (80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006684:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006686:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800668a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800668c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800668e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006692:	d02f      	beq.n	80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 8006694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006696:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800669a:	d863      	bhi.n	8006764 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 800669c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d004      	beq.n	80066ac <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80066a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066a8:	d012      	beq.n	80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 80066aa:	e05b      	b.n	8006764 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80066ac:	4b4c      	ldr	r3, [pc, #304]	@ (80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80066b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80066b8:	d107      	bne.n	80066ca <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80066ba:	f107 0318 	add.w	r3, r7, #24
 80066be:	4618      	mov	r0, r3
 80066c0:	f000 f9a4 	bl	8006a0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80066c4:	69bb      	ldr	r3, [r7, #24]
 80066c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80066c8:	e17b      	b.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80066ca:	2300      	movs	r3, #0
 80066cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80066ce:	e178      	b.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80066d0:	4b43      	ldr	r3, [pc, #268]	@ (80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80066d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80066dc:	d107      	bne.n	80066ee <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80066de:	f107 030c 	add.w	r3, r7, #12
 80066e2:	4618      	mov	r0, r3
 80066e4:	f000 fae6 	bl	8006cb4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80066ec:	e169      	b.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80066ee:	2300      	movs	r3, #0
 80066f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80066f2:	e166      	b.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80066f4:	4b3a      	ldr	r3, [pc, #232]	@ (80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80066f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066f8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80066fc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80066fe:	4b38      	ldr	r3, [pc, #224]	@ (80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f003 0304 	and.w	r3, r3, #4
 8006706:	2b04      	cmp	r3, #4
 8006708:	d10c      	bne.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 800670a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800670c:	2b00      	cmp	r3, #0
 800670e:	d109      	bne.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006710:	4b33      	ldr	r3, [pc, #204]	@ (80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	08db      	lsrs	r3, r3, #3
 8006716:	f003 0303 	and.w	r3, r3, #3
 800671a:	4a32      	ldr	r2, [pc, #200]	@ (80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800671c:	fa22 f303 	lsr.w	r3, r2, r3
 8006720:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006722:	e01e      	b.n	8006762 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006724:	4b2e      	ldr	r3, [pc, #184]	@ (80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800672c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006730:	d106      	bne.n	8006740 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 8006732:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006734:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006738:	d102      	bne.n	8006740 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800673a:	4b2b      	ldr	r3, [pc, #172]	@ (80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800673c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800673e:	e010      	b.n	8006762 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006740:	4b27      	ldr	r3, [pc, #156]	@ (80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006748:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800674c:	d106      	bne.n	800675c <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800674e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006750:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006754:	d102      	bne.n	800675c <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006756:	4b25      	ldr	r3, [pc, #148]	@ (80067ec <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8006758:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800675a:	e002      	b.n	8006762 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800675c:	2300      	movs	r3, #0
 800675e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006760:	e12f      	b.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8006762:	e12e      	b.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8006764:	2300      	movs	r3, #0
 8006766:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006768:	e12b      	b.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800676a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800676e:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8006772:	430b      	orrs	r3, r1
 8006774:	d13c      	bne.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006776:	4b1a      	ldr	r3, [pc, #104]	@ (80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006778:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800677a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800677e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006780:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006782:	2b00      	cmp	r3, #0
 8006784:	d004      	beq.n	8006790 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 8006786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006788:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800678c:	d012      	beq.n	80067b4 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800678e:	e023      	b.n	80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006790:	4b13      	ldr	r3, [pc, #76]	@ (80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006798:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800679c:	d107      	bne.n	80067ae <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800679e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80067a2:	4618      	mov	r0, r3
 80067a4:	f000 fbda 	bl	8006f5c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80067a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80067ac:	e109      	b.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80067ae:	2300      	movs	r3, #0
 80067b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80067b2:	e106      	b.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80067b4:	4b0a      	ldr	r3, [pc, #40]	@ (80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80067bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80067c0:	d107      	bne.n	80067d2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80067c2:	f107 0318 	add.w	r3, r7, #24
 80067c6:	4618      	mov	r0, r3
 80067c8:	f000 f920 	bl	8006a0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80067cc:	6a3b      	ldr	r3, [r7, #32]
 80067ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80067d0:	e0f7      	b.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80067d2:	2300      	movs	r3, #0
 80067d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80067d6:	e0f4      	b.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 80067d8:	2300      	movs	r3, #0
 80067da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80067dc:	e0f1      	b.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80067de:	bf00      	nop
 80067e0:	58024400 	.word	0x58024400
 80067e4:	03d09000 	.word	0x03d09000
 80067e8:	003d0900 	.word	0x003d0900
 80067ec:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80067f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067f4:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80067f8:	430b      	orrs	r3, r1
 80067fa:	f040 8091 	bne.w	8006920 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80067fe:	4b73      	ldr	r3, [pc, #460]	@ (80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006800:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006802:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8006806:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006808:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800680a:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800680e:	f000 8081 	beq.w	8006914 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8006812:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006814:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8006818:	d87f      	bhi.n	800691a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800681a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800681c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006820:	d06b      	beq.n	80068fa <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 8006822:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006824:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006828:	d877      	bhi.n	800691a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800682a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800682c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006830:	d056      	beq.n	80068e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 8006832:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006834:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006838:	d86f      	bhi.n	800691a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800683a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800683c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006840:	d03b      	beq.n	80068ba <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8006842:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006844:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006848:	d867      	bhi.n	800691a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800684a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800684c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006850:	d021      	beq.n	8006896 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8006852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006854:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006858:	d85f      	bhi.n	800691a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800685a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800685c:	2b00      	cmp	r3, #0
 800685e:	d004      	beq.n	800686a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8006860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006862:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006866:	d004      	beq.n	8006872 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8006868:	e057      	b.n	800691a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800686a:	f000 f8b9 	bl	80069e0 <HAL_RCCEx_GetD3PCLK1Freq>
 800686e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006870:	e0a7      	b.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006872:	4b56      	ldr	r3, [pc, #344]	@ (80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800687a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800687e:	d107      	bne.n	8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006880:	f107 0318 	add.w	r3, r7, #24
 8006884:	4618      	mov	r0, r3
 8006886:	f000 f8c1 	bl	8006a0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800688a:	69fb      	ldr	r3, [r7, #28]
 800688c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800688e:	e098      	b.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006890:	2300      	movs	r3, #0
 8006892:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006894:	e095      	b.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006896:	4b4d      	ldr	r3, [pc, #308]	@ (80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800689e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80068a2:	d107      	bne.n	80068b4 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80068a4:	f107 030c 	add.w	r3, r7, #12
 80068a8:	4618      	mov	r0, r3
 80068aa:	f000 fa03 	bl	8006cb4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80068b2:	e086      	b.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80068b4:	2300      	movs	r3, #0
 80068b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80068b8:	e083      	b.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80068ba:	4b44      	ldr	r3, [pc, #272]	@ (80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f003 0304 	and.w	r3, r3, #4
 80068c2:	2b04      	cmp	r3, #4
 80068c4:	d109      	bne.n	80068da <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80068c6:	4b41      	ldr	r3, [pc, #260]	@ (80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	08db      	lsrs	r3, r3, #3
 80068cc:	f003 0303 	and.w	r3, r3, #3
 80068d0:	4a3f      	ldr	r2, [pc, #252]	@ (80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80068d2:	fa22 f303 	lsr.w	r3, r2, r3
 80068d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80068d8:	e073      	b.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80068da:	2300      	movs	r3, #0
 80068dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80068de:	e070      	b.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80068e0:	4b3a      	ldr	r3, [pc, #232]	@ (80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068ec:	d102      	bne.n	80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 80068ee:	4b39      	ldr	r3, [pc, #228]	@ (80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 80068f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80068f2:	e066      	b.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80068f4:	2300      	movs	r3, #0
 80068f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80068f8:	e063      	b.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80068fa:	4b34      	ldr	r3, [pc, #208]	@ (80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006902:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006906:	d102      	bne.n	800690e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 8006908:	4b33      	ldr	r3, [pc, #204]	@ (80069d8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 800690a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800690c:	e059      	b.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800690e:	2300      	movs	r3, #0
 8006910:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006912:	e056      	b.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006914:	4b31      	ldr	r3, [pc, #196]	@ (80069dc <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 8006916:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006918:	e053      	b.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800691a:	2300      	movs	r3, #0
 800691c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800691e:	e050      	b.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006920:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006924:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8006928:	430b      	orrs	r3, r1
 800692a:	d148      	bne.n	80069be <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800692c:	4b27      	ldr	r3, [pc, #156]	@ (80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800692e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006930:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006934:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006938:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800693c:	d02a      	beq.n	8006994 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 800693e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006940:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006944:	d838      	bhi.n	80069b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8006946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006948:	2b00      	cmp	r3, #0
 800694a:	d004      	beq.n	8006956 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 800694c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800694e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006952:	d00d      	beq.n	8006970 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 8006954:	e030      	b.n	80069b8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006956:	4b1d      	ldr	r3, [pc, #116]	@ (80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800695e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006962:	d102      	bne.n	800696a <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 8006964:	4b1c      	ldr	r3, [pc, #112]	@ (80069d8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8006966:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006968:	e02b      	b.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800696a:	2300      	movs	r3, #0
 800696c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800696e:	e028      	b.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006970:	4b16      	ldr	r3, [pc, #88]	@ (80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006978:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800697c:	d107      	bne.n	800698e <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800697e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006982:	4618      	mov	r0, r3
 8006984:	f000 faea 	bl	8006f5c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800698a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800698c:	e019      	b.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800698e:	2300      	movs	r3, #0
 8006990:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006992:	e016      	b.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006994:	4b0d      	ldr	r3, [pc, #52]	@ (80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800699c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80069a0:	d107      	bne.n	80069b2 <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069a2:	f107 0318 	add.w	r3, r7, #24
 80069a6:	4618      	mov	r0, r3
 80069a8:	f000 f830 	bl	8006a0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80069ac:	69fb      	ldr	r3, [r7, #28]
 80069ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80069b0:	e007      	b.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80069b2:	2300      	movs	r3, #0
 80069b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80069b6:	e004      	b.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 80069b8:	2300      	movs	r3, #0
 80069ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80069bc:	e001      	b.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 80069be:	2300      	movs	r3, #0
 80069c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 80069c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	3740      	adds	r7, #64	@ 0x40
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd80      	pop	{r7, pc}
 80069cc:	58024400 	.word	0x58024400
 80069d0:	03d09000 	.word	0x03d09000
 80069d4:	003d0900 	.word	0x003d0900
 80069d8:	007a1200 	.word	0x007a1200
 80069dc:	00bb8000 	.word	0x00bb8000

080069e0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 80069e4:	f7fe f90a 	bl	8004bfc <HAL_RCC_GetHCLKFreq>
 80069e8:	4602      	mov	r2, r0
 80069ea:	4b06      	ldr	r3, [pc, #24]	@ (8006a04 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80069ec:	6a1b      	ldr	r3, [r3, #32]
 80069ee:	091b      	lsrs	r3, r3, #4
 80069f0:	f003 0307 	and.w	r3, r3, #7
 80069f4:	4904      	ldr	r1, [pc, #16]	@ (8006a08 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80069f6:	5ccb      	ldrb	r3, [r1, r3]
 80069f8:	f003 031f 	and.w	r3, r3, #31
 80069fc:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	bd80      	pop	{r7, pc}
 8006a04:	58024400 	.word	0x58024400
 8006a08:	0800d434 	.word	0x0800d434

08006a0c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b089      	sub	sp, #36	@ 0x24
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006a14:	4ba1      	ldr	r3, [pc, #644]	@ (8006c9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a18:	f003 0303 	and.w	r3, r3, #3
 8006a1c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006a1e:	4b9f      	ldr	r3, [pc, #636]	@ (8006c9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a22:	0b1b      	lsrs	r3, r3, #12
 8006a24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006a28:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006a2a:	4b9c      	ldr	r3, [pc, #624]	@ (8006c9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a2e:	091b      	lsrs	r3, r3, #4
 8006a30:	f003 0301 	and.w	r3, r3, #1
 8006a34:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006a36:	4b99      	ldr	r3, [pc, #612]	@ (8006c9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a3a:	08db      	lsrs	r3, r3, #3
 8006a3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a40:	693a      	ldr	r2, [r7, #16]
 8006a42:	fb02 f303 	mul.w	r3, r2, r3
 8006a46:	ee07 3a90 	vmov	s15, r3
 8006a4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a4e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	f000 8111 	beq.w	8006c7c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006a5a:	69bb      	ldr	r3, [r7, #24]
 8006a5c:	2b02      	cmp	r3, #2
 8006a5e:	f000 8083 	beq.w	8006b68 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006a62:	69bb      	ldr	r3, [r7, #24]
 8006a64:	2b02      	cmp	r3, #2
 8006a66:	f200 80a1 	bhi.w	8006bac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006a6a:	69bb      	ldr	r3, [r7, #24]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d003      	beq.n	8006a78 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006a70:	69bb      	ldr	r3, [r7, #24]
 8006a72:	2b01      	cmp	r3, #1
 8006a74:	d056      	beq.n	8006b24 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006a76:	e099      	b.n	8006bac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a78:	4b88      	ldr	r3, [pc, #544]	@ (8006c9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f003 0320 	and.w	r3, r3, #32
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d02d      	beq.n	8006ae0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a84:	4b85      	ldr	r3, [pc, #532]	@ (8006c9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	08db      	lsrs	r3, r3, #3
 8006a8a:	f003 0303 	and.w	r3, r3, #3
 8006a8e:	4a84      	ldr	r2, [pc, #528]	@ (8006ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006a90:	fa22 f303 	lsr.w	r3, r2, r3
 8006a94:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	ee07 3a90 	vmov	s15, r3
 8006a9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	ee07 3a90 	vmov	s15, r3
 8006aa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006aae:	4b7b      	ldr	r3, [pc, #492]	@ (8006c9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ab0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ab2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ab6:	ee07 3a90 	vmov	s15, r3
 8006aba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006abe:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ac2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006ac6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006aca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ace:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ad2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ad6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ada:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006ade:	e087      	b.n	8006bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	ee07 3a90 	vmov	s15, r3
 8006ae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aea:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006ca8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006aee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006af2:	4b6a      	ldr	r3, [pc, #424]	@ (8006c9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006af4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006af6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006afa:	ee07 3a90 	vmov	s15, r3
 8006afe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b02:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b06:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006b0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b22:	e065      	b.n	8006bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	ee07 3a90 	vmov	s15, r3
 8006b2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b2e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006cac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006b32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b36:	4b59      	ldr	r3, [pc, #356]	@ (8006c9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b3e:	ee07 3a90 	vmov	s15, r3
 8006b42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b46:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b4a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006b4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b66:	e043      	b.n	8006bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	ee07 3a90 	vmov	s15, r3
 8006b6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b72:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006b76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b7a:	4b48      	ldr	r3, [pc, #288]	@ (8006c9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b82:	ee07 3a90 	vmov	s15, r3
 8006b86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b8e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006b92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ba2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ba6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006baa:	e021      	b.n	8006bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	ee07 3a90 	vmov	s15, r3
 8006bb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bb6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006cac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006bba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bbe:	4b37      	ldr	r3, [pc, #220]	@ (8006c9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bc6:	ee07 3a90 	vmov	s15, r3
 8006bca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bce:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bd2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006bd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006be2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006be6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006bee:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006bf0:	4b2a      	ldr	r3, [pc, #168]	@ (8006c9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bf4:	0a5b      	lsrs	r3, r3, #9
 8006bf6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006bfa:	ee07 3a90 	vmov	s15, r3
 8006bfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c02:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006c06:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c16:	ee17 2a90 	vmov	r2, s15
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006c1e:	4b1f      	ldr	r3, [pc, #124]	@ (8006c9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c22:	0c1b      	lsrs	r3, r3, #16
 8006c24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c28:	ee07 3a90 	vmov	s15, r3
 8006c2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c30:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006c34:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c38:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c44:	ee17 2a90 	vmov	r2, s15
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006c4c:	4b13      	ldr	r3, [pc, #76]	@ (8006c9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c50:	0e1b      	lsrs	r3, r3, #24
 8006c52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c56:	ee07 3a90 	vmov	s15, r3
 8006c5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c5e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006c62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c66:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c72:	ee17 2a90 	vmov	r2, s15
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006c7a:	e008      	b.n	8006c8e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2200      	movs	r2, #0
 8006c86:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	609a      	str	r2, [r3, #8]
}
 8006c8e:	bf00      	nop
 8006c90:	3724      	adds	r7, #36	@ 0x24
 8006c92:	46bd      	mov	sp, r7
 8006c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c98:	4770      	bx	lr
 8006c9a:	bf00      	nop
 8006c9c:	58024400 	.word	0x58024400
 8006ca0:	03d09000 	.word	0x03d09000
 8006ca4:	46000000 	.word	0x46000000
 8006ca8:	4c742400 	.word	0x4c742400
 8006cac:	4a742400 	.word	0x4a742400
 8006cb0:	4af42400 	.word	0x4af42400

08006cb4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b089      	sub	sp, #36	@ 0x24
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006cbc:	4ba1      	ldr	r3, [pc, #644]	@ (8006f44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cc0:	f003 0303 	and.w	r3, r3, #3
 8006cc4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006cc6:	4b9f      	ldr	r3, [pc, #636]	@ (8006f44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cca:	0d1b      	lsrs	r3, r3, #20
 8006ccc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006cd0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006cd2:	4b9c      	ldr	r3, [pc, #624]	@ (8006f44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cd6:	0a1b      	lsrs	r3, r3, #8
 8006cd8:	f003 0301 	and.w	r3, r3, #1
 8006cdc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006cde:	4b99      	ldr	r3, [pc, #612]	@ (8006f44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ce0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ce2:	08db      	lsrs	r3, r3, #3
 8006ce4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006ce8:	693a      	ldr	r2, [r7, #16]
 8006cea:	fb02 f303 	mul.w	r3, r2, r3
 8006cee:	ee07 3a90 	vmov	s15, r3
 8006cf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cf6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	f000 8111 	beq.w	8006f24 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006d02:	69bb      	ldr	r3, [r7, #24]
 8006d04:	2b02      	cmp	r3, #2
 8006d06:	f000 8083 	beq.w	8006e10 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006d0a:	69bb      	ldr	r3, [r7, #24]
 8006d0c:	2b02      	cmp	r3, #2
 8006d0e:	f200 80a1 	bhi.w	8006e54 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006d12:	69bb      	ldr	r3, [r7, #24]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d003      	beq.n	8006d20 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006d18:	69bb      	ldr	r3, [r7, #24]
 8006d1a:	2b01      	cmp	r3, #1
 8006d1c:	d056      	beq.n	8006dcc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006d1e:	e099      	b.n	8006e54 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d20:	4b88      	ldr	r3, [pc, #544]	@ (8006f44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f003 0320 	and.w	r3, r3, #32
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d02d      	beq.n	8006d88 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006d2c:	4b85      	ldr	r3, [pc, #532]	@ (8006f44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	08db      	lsrs	r3, r3, #3
 8006d32:	f003 0303 	and.w	r3, r3, #3
 8006d36:	4a84      	ldr	r2, [pc, #528]	@ (8006f48 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006d38:	fa22 f303 	lsr.w	r3, r2, r3
 8006d3c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	ee07 3a90 	vmov	s15, r3
 8006d44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	ee07 3a90 	vmov	s15, r3
 8006d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d56:	4b7b      	ldr	r3, [pc, #492]	@ (8006f44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d5e:	ee07 3a90 	vmov	s15, r3
 8006d62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d66:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d6a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006f4c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006d6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d82:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006d86:	e087      	b.n	8006e98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	ee07 3a90 	vmov	s15, r3
 8006d8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d92:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006f50 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006d96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d9a:	4b6a      	ldr	r3, [pc, #424]	@ (8006f44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006da2:	ee07 3a90 	vmov	s15, r3
 8006da6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006daa:	ed97 6a03 	vldr	s12, [r7, #12]
 8006dae:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006f4c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006db2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006db6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006dbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006dca:	e065      	b.n	8006e98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	ee07 3a90 	vmov	s15, r3
 8006dd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dd6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006f54 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006dda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dde:	4b59      	ldr	r3, [pc, #356]	@ (8006f44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006de2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006de6:	ee07 3a90 	vmov	s15, r3
 8006dea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dee:	ed97 6a03 	vldr	s12, [r7, #12]
 8006df2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006f4c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006df6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006dfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dfe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e0e:	e043      	b.n	8006e98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	ee07 3a90 	vmov	s15, r3
 8006e16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e1a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006f58 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006e1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e22:	4b48      	ldr	r3, [pc, #288]	@ (8006f44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e2a:	ee07 3a90 	vmov	s15, r3
 8006e2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e32:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e36:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006f4c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006e3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e52:	e021      	b.n	8006e98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	ee07 3a90 	vmov	s15, r3
 8006e5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e5e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006f54 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006e62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e66:	4b37      	ldr	r3, [pc, #220]	@ (8006f44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e6e:	ee07 3a90 	vmov	s15, r3
 8006e72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e76:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e7a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006f4c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006e7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e96:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006e98:	4b2a      	ldr	r3, [pc, #168]	@ (8006f44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e9c:	0a5b      	lsrs	r3, r3, #9
 8006e9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ea2:	ee07 3a90 	vmov	s15, r3
 8006ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eaa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006eae:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006eb2:	edd7 6a07 	vldr	s13, [r7, #28]
 8006eb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006eba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ebe:	ee17 2a90 	vmov	r2, s15
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006ec6:	4b1f      	ldr	r3, [pc, #124]	@ (8006f44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eca:	0c1b      	lsrs	r3, r3, #16
 8006ecc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ed0:	ee07 3a90 	vmov	s15, r3
 8006ed4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ed8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006edc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006ee0:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ee4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ee8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006eec:	ee17 2a90 	vmov	r2, s15
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006ef4:	4b13      	ldr	r3, [pc, #76]	@ (8006f44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ef8:	0e1b      	lsrs	r3, r3, #24
 8006efa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006efe:	ee07 3a90 	vmov	s15, r3
 8006f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f06:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006f0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f1a:	ee17 2a90 	vmov	r2, s15
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006f22:	e008      	b.n	8006f36 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2200      	movs	r2, #0
 8006f28:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2200      	movs	r2, #0
 8006f34:	609a      	str	r2, [r3, #8]
}
 8006f36:	bf00      	nop
 8006f38:	3724      	adds	r7, #36	@ 0x24
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f40:	4770      	bx	lr
 8006f42:	bf00      	nop
 8006f44:	58024400 	.word	0x58024400
 8006f48:	03d09000 	.word	0x03d09000
 8006f4c:	46000000 	.word	0x46000000
 8006f50:	4c742400 	.word	0x4c742400
 8006f54:	4a742400 	.word	0x4a742400
 8006f58:	4af42400 	.word	0x4af42400

08006f5c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b089      	sub	sp, #36	@ 0x24
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006f64:	4ba0      	ldr	r3, [pc, #640]	@ (80071e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006f66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f68:	f003 0303 	and.w	r3, r3, #3
 8006f6c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8006f6e:	4b9e      	ldr	r3, [pc, #632]	@ (80071e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006f70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f72:	091b      	lsrs	r3, r3, #4
 8006f74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006f78:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8006f7a:	4b9b      	ldr	r3, [pc, #620]	@ (80071e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006f7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f7e:	f003 0301 	and.w	r3, r3, #1
 8006f82:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006f84:	4b98      	ldr	r3, [pc, #608]	@ (80071e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006f86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f88:	08db      	lsrs	r3, r3, #3
 8006f8a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006f8e:	693a      	ldr	r2, [r7, #16]
 8006f90:	fb02 f303 	mul.w	r3, r2, r3
 8006f94:	ee07 3a90 	vmov	s15, r3
 8006f98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f9c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	f000 8111 	beq.w	80071ca <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8006fa8:	69bb      	ldr	r3, [r7, #24]
 8006faa:	2b02      	cmp	r3, #2
 8006fac:	f000 8083 	beq.w	80070b6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8006fb0:	69bb      	ldr	r3, [r7, #24]
 8006fb2:	2b02      	cmp	r3, #2
 8006fb4:	f200 80a1 	bhi.w	80070fa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8006fb8:	69bb      	ldr	r3, [r7, #24]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d003      	beq.n	8006fc6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8006fbe:	69bb      	ldr	r3, [r7, #24]
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d056      	beq.n	8007072 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8006fc4:	e099      	b.n	80070fa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006fc6:	4b88      	ldr	r3, [pc, #544]	@ (80071e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f003 0320 	and.w	r3, r3, #32
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d02d      	beq.n	800702e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006fd2:	4b85      	ldr	r3, [pc, #532]	@ (80071e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	08db      	lsrs	r3, r3, #3
 8006fd8:	f003 0303 	and.w	r3, r3, #3
 8006fdc:	4a83      	ldr	r2, [pc, #524]	@ (80071ec <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8006fde:	fa22 f303 	lsr.w	r3, r2, r3
 8006fe2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	ee07 3a90 	vmov	s15, r3
 8006fea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	ee07 3a90 	vmov	s15, r3
 8006ff4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ff8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ffc:	4b7a      	ldr	r3, [pc, #488]	@ (80071e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006ffe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007000:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007004:	ee07 3a90 	vmov	s15, r3
 8007008:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800700c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007010:	eddf 5a77 	vldr	s11, [pc, #476]	@ 80071f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007014:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007018:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800701c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007020:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007024:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007028:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800702c:	e087      	b.n	800713e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	ee07 3a90 	vmov	s15, r3
 8007034:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007038:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80071f4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800703c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007040:	4b69      	ldr	r3, [pc, #420]	@ (80071e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007042:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007044:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007048:	ee07 3a90 	vmov	s15, r3
 800704c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007050:	ed97 6a03 	vldr	s12, [r7, #12]
 8007054:	eddf 5a66 	vldr	s11, [pc, #408]	@ 80071f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007058:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800705c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007060:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007064:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007068:	ee67 7a27 	vmul.f32	s15, s14, s15
 800706c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007070:	e065      	b.n	800713e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	ee07 3a90 	vmov	s15, r3
 8007078:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800707c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80071f8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007080:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007084:	4b58      	ldr	r3, [pc, #352]	@ (80071e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007086:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007088:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800708c:	ee07 3a90 	vmov	s15, r3
 8007090:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007094:	ed97 6a03 	vldr	s12, [r7, #12]
 8007098:	eddf 5a55 	vldr	s11, [pc, #340]	@ 80071f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800709c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070a4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070b0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80070b4:	e043      	b.n	800713e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	ee07 3a90 	vmov	s15, r3
 80070bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070c0:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80071fc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80070c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070c8:	4b47      	ldr	r3, [pc, #284]	@ (80071e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80070ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070d0:	ee07 3a90 	vmov	s15, r3
 80070d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070d8:	ed97 6a03 	vldr	s12, [r7, #12]
 80070dc:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80071f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80070e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070e8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070f4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80070f8:	e021      	b.n	800713e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	ee07 3a90 	vmov	s15, r3
 8007100:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007104:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80071f4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007108:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800710c:	4b36      	ldr	r3, [pc, #216]	@ (80071e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800710e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007110:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007114:	ee07 3a90 	vmov	s15, r3
 8007118:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800711c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007120:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80071f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007124:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007128:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800712c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007130:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007134:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007138:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800713c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800713e:	4b2a      	ldr	r3, [pc, #168]	@ (80071e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007142:	0a5b      	lsrs	r3, r3, #9
 8007144:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007148:	ee07 3a90 	vmov	s15, r3
 800714c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007150:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007154:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007158:	edd7 6a07 	vldr	s13, [r7, #28]
 800715c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007160:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007164:	ee17 2a90 	vmov	r2, s15
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800716c:	4b1e      	ldr	r3, [pc, #120]	@ (80071e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800716e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007170:	0c1b      	lsrs	r3, r3, #16
 8007172:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007176:	ee07 3a90 	vmov	s15, r3
 800717a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800717e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007182:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007186:	edd7 6a07 	vldr	s13, [r7, #28]
 800718a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800718e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007192:	ee17 2a90 	vmov	r2, s15
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800719a:	4b13      	ldr	r3, [pc, #76]	@ (80071e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800719c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800719e:	0e1b      	lsrs	r3, r3, #24
 80071a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80071a4:	ee07 3a90 	vmov	s15, r3
 80071a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071ac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80071b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80071b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80071b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071c0:	ee17 2a90 	vmov	r2, s15
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80071c8:	e008      	b.n	80071dc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2200      	movs	r2, #0
 80071ce:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2200      	movs	r2, #0
 80071d4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2200      	movs	r2, #0
 80071da:	609a      	str	r2, [r3, #8]
}
 80071dc:	bf00      	nop
 80071de:	3724      	adds	r7, #36	@ 0x24
 80071e0:	46bd      	mov	sp, r7
 80071e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e6:	4770      	bx	lr
 80071e8:	58024400 	.word	0x58024400
 80071ec:	03d09000 	.word	0x03d09000
 80071f0:	46000000 	.word	0x46000000
 80071f4:	4c742400 	.word	0x4c742400
 80071f8:	4a742400 	.word	0x4a742400
 80071fc:	4af42400 	.word	0x4af42400

08007200 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b084      	sub	sp, #16
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800720a:	2300      	movs	r3, #0
 800720c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800720e:	4b53      	ldr	r3, [pc, #332]	@ (800735c <RCCEx_PLL2_Config+0x15c>)
 8007210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007212:	f003 0303 	and.w	r3, r3, #3
 8007216:	2b03      	cmp	r3, #3
 8007218:	d101      	bne.n	800721e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800721a:	2301      	movs	r3, #1
 800721c:	e099      	b.n	8007352 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800721e:	4b4f      	ldr	r3, [pc, #316]	@ (800735c <RCCEx_PLL2_Config+0x15c>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a4e      	ldr	r2, [pc, #312]	@ (800735c <RCCEx_PLL2_Config+0x15c>)
 8007224:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007228:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800722a:	f7fa fead 	bl	8001f88 <HAL_GetTick>
 800722e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007230:	e008      	b.n	8007244 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007232:	f7fa fea9 	bl	8001f88 <HAL_GetTick>
 8007236:	4602      	mov	r2, r0
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	1ad3      	subs	r3, r2, r3
 800723c:	2b02      	cmp	r3, #2
 800723e:	d901      	bls.n	8007244 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007240:	2303      	movs	r3, #3
 8007242:	e086      	b.n	8007352 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007244:	4b45      	ldr	r3, [pc, #276]	@ (800735c <RCCEx_PLL2_Config+0x15c>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800724c:	2b00      	cmp	r3, #0
 800724e:	d1f0      	bne.n	8007232 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007250:	4b42      	ldr	r3, [pc, #264]	@ (800735c <RCCEx_PLL2_Config+0x15c>)
 8007252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007254:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	031b      	lsls	r3, r3, #12
 800725e:	493f      	ldr	r1, [pc, #252]	@ (800735c <RCCEx_PLL2_Config+0x15c>)
 8007260:	4313      	orrs	r3, r2
 8007262:	628b      	str	r3, [r1, #40]	@ 0x28
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	3b01      	subs	r3, #1
 800726a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	689b      	ldr	r3, [r3, #8]
 8007272:	3b01      	subs	r3, #1
 8007274:	025b      	lsls	r3, r3, #9
 8007276:	b29b      	uxth	r3, r3
 8007278:	431a      	orrs	r2, r3
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	68db      	ldr	r3, [r3, #12]
 800727e:	3b01      	subs	r3, #1
 8007280:	041b      	lsls	r3, r3, #16
 8007282:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007286:	431a      	orrs	r2, r3
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	691b      	ldr	r3, [r3, #16]
 800728c:	3b01      	subs	r3, #1
 800728e:	061b      	lsls	r3, r3, #24
 8007290:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007294:	4931      	ldr	r1, [pc, #196]	@ (800735c <RCCEx_PLL2_Config+0x15c>)
 8007296:	4313      	orrs	r3, r2
 8007298:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800729a:	4b30      	ldr	r3, [pc, #192]	@ (800735c <RCCEx_PLL2_Config+0x15c>)
 800729c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800729e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	695b      	ldr	r3, [r3, #20]
 80072a6:	492d      	ldr	r1, [pc, #180]	@ (800735c <RCCEx_PLL2_Config+0x15c>)
 80072a8:	4313      	orrs	r3, r2
 80072aa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80072ac:	4b2b      	ldr	r3, [pc, #172]	@ (800735c <RCCEx_PLL2_Config+0x15c>)
 80072ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072b0:	f023 0220 	bic.w	r2, r3, #32
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	699b      	ldr	r3, [r3, #24]
 80072b8:	4928      	ldr	r1, [pc, #160]	@ (800735c <RCCEx_PLL2_Config+0x15c>)
 80072ba:	4313      	orrs	r3, r2
 80072bc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80072be:	4b27      	ldr	r3, [pc, #156]	@ (800735c <RCCEx_PLL2_Config+0x15c>)
 80072c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072c2:	4a26      	ldr	r2, [pc, #152]	@ (800735c <RCCEx_PLL2_Config+0x15c>)
 80072c4:	f023 0310 	bic.w	r3, r3, #16
 80072c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80072ca:	4b24      	ldr	r3, [pc, #144]	@ (800735c <RCCEx_PLL2_Config+0x15c>)
 80072cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80072ce:	4b24      	ldr	r3, [pc, #144]	@ (8007360 <RCCEx_PLL2_Config+0x160>)
 80072d0:	4013      	ands	r3, r2
 80072d2:	687a      	ldr	r2, [r7, #4]
 80072d4:	69d2      	ldr	r2, [r2, #28]
 80072d6:	00d2      	lsls	r2, r2, #3
 80072d8:	4920      	ldr	r1, [pc, #128]	@ (800735c <RCCEx_PLL2_Config+0x15c>)
 80072da:	4313      	orrs	r3, r2
 80072dc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80072de:	4b1f      	ldr	r3, [pc, #124]	@ (800735c <RCCEx_PLL2_Config+0x15c>)
 80072e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072e2:	4a1e      	ldr	r2, [pc, #120]	@ (800735c <RCCEx_PLL2_Config+0x15c>)
 80072e4:	f043 0310 	orr.w	r3, r3, #16
 80072e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d106      	bne.n	80072fe <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80072f0:	4b1a      	ldr	r3, [pc, #104]	@ (800735c <RCCEx_PLL2_Config+0x15c>)
 80072f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072f4:	4a19      	ldr	r2, [pc, #100]	@ (800735c <RCCEx_PLL2_Config+0x15c>)
 80072f6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80072fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80072fc:	e00f      	b.n	800731e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	2b01      	cmp	r3, #1
 8007302:	d106      	bne.n	8007312 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007304:	4b15      	ldr	r3, [pc, #84]	@ (800735c <RCCEx_PLL2_Config+0x15c>)
 8007306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007308:	4a14      	ldr	r2, [pc, #80]	@ (800735c <RCCEx_PLL2_Config+0x15c>)
 800730a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800730e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007310:	e005      	b.n	800731e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007312:	4b12      	ldr	r3, [pc, #72]	@ (800735c <RCCEx_PLL2_Config+0x15c>)
 8007314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007316:	4a11      	ldr	r2, [pc, #68]	@ (800735c <RCCEx_PLL2_Config+0x15c>)
 8007318:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800731c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800731e:	4b0f      	ldr	r3, [pc, #60]	@ (800735c <RCCEx_PLL2_Config+0x15c>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a0e      	ldr	r2, [pc, #56]	@ (800735c <RCCEx_PLL2_Config+0x15c>)
 8007324:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007328:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800732a:	f7fa fe2d 	bl	8001f88 <HAL_GetTick>
 800732e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007330:	e008      	b.n	8007344 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007332:	f7fa fe29 	bl	8001f88 <HAL_GetTick>
 8007336:	4602      	mov	r2, r0
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	1ad3      	subs	r3, r2, r3
 800733c:	2b02      	cmp	r3, #2
 800733e:	d901      	bls.n	8007344 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007340:	2303      	movs	r3, #3
 8007342:	e006      	b.n	8007352 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007344:	4b05      	ldr	r3, [pc, #20]	@ (800735c <RCCEx_PLL2_Config+0x15c>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800734c:	2b00      	cmp	r3, #0
 800734e:	d0f0      	beq.n	8007332 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007350:	7bfb      	ldrb	r3, [r7, #15]
}
 8007352:	4618      	mov	r0, r3
 8007354:	3710      	adds	r7, #16
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}
 800735a:	bf00      	nop
 800735c:	58024400 	.word	0x58024400
 8007360:	ffff0007 	.word	0xffff0007

08007364 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b084      	sub	sp, #16
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
 800736c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800736e:	2300      	movs	r3, #0
 8007370:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007372:	4b53      	ldr	r3, [pc, #332]	@ (80074c0 <RCCEx_PLL3_Config+0x15c>)
 8007374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007376:	f003 0303 	and.w	r3, r3, #3
 800737a:	2b03      	cmp	r3, #3
 800737c:	d101      	bne.n	8007382 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800737e:	2301      	movs	r3, #1
 8007380:	e099      	b.n	80074b6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007382:	4b4f      	ldr	r3, [pc, #316]	@ (80074c0 <RCCEx_PLL3_Config+0x15c>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a4e      	ldr	r2, [pc, #312]	@ (80074c0 <RCCEx_PLL3_Config+0x15c>)
 8007388:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800738c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800738e:	f7fa fdfb 	bl	8001f88 <HAL_GetTick>
 8007392:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007394:	e008      	b.n	80073a8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007396:	f7fa fdf7 	bl	8001f88 <HAL_GetTick>
 800739a:	4602      	mov	r2, r0
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	1ad3      	subs	r3, r2, r3
 80073a0:	2b02      	cmp	r3, #2
 80073a2:	d901      	bls.n	80073a8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80073a4:	2303      	movs	r3, #3
 80073a6:	e086      	b.n	80074b6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80073a8:	4b45      	ldr	r3, [pc, #276]	@ (80074c0 <RCCEx_PLL3_Config+0x15c>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d1f0      	bne.n	8007396 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80073b4:	4b42      	ldr	r3, [pc, #264]	@ (80074c0 <RCCEx_PLL3_Config+0x15c>)
 80073b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073b8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	051b      	lsls	r3, r3, #20
 80073c2:	493f      	ldr	r1, [pc, #252]	@ (80074c0 <RCCEx_PLL3_Config+0x15c>)
 80073c4:	4313      	orrs	r3, r2
 80073c6:	628b      	str	r3, [r1, #40]	@ 0x28
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	3b01      	subs	r3, #1
 80073ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	689b      	ldr	r3, [r3, #8]
 80073d6:	3b01      	subs	r3, #1
 80073d8:	025b      	lsls	r3, r3, #9
 80073da:	b29b      	uxth	r3, r3
 80073dc:	431a      	orrs	r2, r3
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	68db      	ldr	r3, [r3, #12]
 80073e2:	3b01      	subs	r3, #1
 80073e4:	041b      	lsls	r3, r3, #16
 80073e6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80073ea:	431a      	orrs	r2, r3
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	691b      	ldr	r3, [r3, #16]
 80073f0:	3b01      	subs	r3, #1
 80073f2:	061b      	lsls	r3, r3, #24
 80073f4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80073f8:	4931      	ldr	r1, [pc, #196]	@ (80074c0 <RCCEx_PLL3_Config+0x15c>)
 80073fa:	4313      	orrs	r3, r2
 80073fc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80073fe:	4b30      	ldr	r3, [pc, #192]	@ (80074c0 <RCCEx_PLL3_Config+0x15c>)
 8007400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007402:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	695b      	ldr	r3, [r3, #20]
 800740a:	492d      	ldr	r1, [pc, #180]	@ (80074c0 <RCCEx_PLL3_Config+0x15c>)
 800740c:	4313      	orrs	r3, r2
 800740e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007410:	4b2b      	ldr	r3, [pc, #172]	@ (80074c0 <RCCEx_PLL3_Config+0x15c>)
 8007412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007414:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	699b      	ldr	r3, [r3, #24]
 800741c:	4928      	ldr	r1, [pc, #160]	@ (80074c0 <RCCEx_PLL3_Config+0x15c>)
 800741e:	4313      	orrs	r3, r2
 8007420:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007422:	4b27      	ldr	r3, [pc, #156]	@ (80074c0 <RCCEx_PLL3_Config+0x15c>)
 8007424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007426:	4a26      	ldr	r2, [pc, #152]	@ (80074c0 <RCCEx_PLL3_Config+0x15c>)
 8007428:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800742c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800742e:	4b24      	ldr	r3, [pc, #144]	@ (80074c0 <RCCEx_PLL3_Config+0x15c>)
 8007430:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007432:	4b24      	ldr	r3, [pc, #144]	@ (80074c4 <RCCEx_PLL3_Config+0x160>)
 8007434:	4013      	ands	r3, r2
 8007436:	687a      	ldr	r2, [r7, #4]
 8007438:	69d2      	ldr	r2, [r2, #28]
 800743a:	00d2      	lsls	r2, r2, #3
 800743c:	4920      	ldr	r1, [pc, #128]	@ (80074c0 <RCCEx_PLL3_Config+0x15c>)
 800743e:	4313      	orrs	r3, r2
 8007440:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007442:	4b1f      	ldr	r3, [pc, #124]	@ (80074c0 <RCCEx_PLL3_Config+0x15c>)
 8007444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007446:	4a1e      	ldr	r2, [pc, #120]	@ (80074c0 <RCCEx_PLL3_Config+0x15c>)
 8007448:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800744c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d106      	bne.n	8007462 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007454:	4b1a      	ldr	r3, [pc, #104]	@ (80074c0 <RCCEx_PLL3_Config+0x15c>)
 8007456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007458:	4a19      	ldr	r2, [pc, #100]	@ (80074c0 <RCCEx_PLL3_Config+0x15c>)
 800745a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800745e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007460:	e00f      	b.n	8007482 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	2b01      	cmp	r3, #1
 8007466:	d106      	bne.n	8007476 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007468:	4b15      	ldr	r3, [pc, #84]	@ (80074c0 <RCCEx_PLL3_Config+0x15c>)
 800746a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800746c:	4a14      	ldr	r2, [pc, #80]	@ (80074c0 <RCCEx_PLL3_Config+0x15c>)
 800746e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007472:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007474:	e005      	b.n	8007482 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007476:	4b12      	ldr	r3, [pc, #72]	@ (80074c0 <RCCEx_PLL3_Config+0x15c>)
 8007478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800747a:	4a11      	ldr	r2, [pc, #68]	@ (80074c0 <RCCEx_PLL3_Config+0x15c>)
 800747c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007480:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007482:	4b0f      	ldr	r3, [pc, #60]	@ (80074c0 <RCCEx_PLL3_Config+0x15c>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a0e      	ldr	r2, [pc, #56]	@ (80074c0 <RCCEx_PLL3_Config+0x15c>)
 8007488:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800748c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800748e:	f7fa fd7b 	bl	8001f88 <HAL_GetTick>
 8007492:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007494:	e008      	b.n	80074a8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007496:	f7fa fd77 	bl	8001f88 <HAL_GetTick>
 800749a:	4602      	mov	r2, r0
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	1ad3      	subs	r3, r2, r3
 80074a0:	2b02      	cmp	r3, #2
 80074a2:	d901      	bls.n	80074a8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80074a4:	2303      	movs	r3, #3
 80074a6:	e006      	b.n	80074b6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80074a8:	4b05      	ldr	r3, [pc, #20]	@ (80074c0 <RCCEx_PLL3_Config+0x15c>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d0f0      	beq.n	8007496 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80074b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3710      	adds	r7, #16
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}
 80074be:	bf00      	nop
 80074c0:	58024400 	.word	0x58024400
 80074c4:	ffff0007 	.word	0xffff0007

080074c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b082      	sub	sp, #8
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d101      	bne.n	80074da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80074d6:	2301      	movs	r3, #1
 80074d8:	e049      	b.n	800756e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80074e0:	b2db      	uxtb	r3, r3
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d106      	bne.n	80074f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2200      	movs	r2, #0
 80074ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f7fa fa00 	bl	80018f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2202      	movs	r2, #2
 80074f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681a      	ldr	r2, [r3, #0]
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	3304      	adds	r3, #4
 8007504:	4619      	mov	r1, r3
 8007506:	4610      	mov	r0, r2
 8007508:	f000 f836 	bl	8007578 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2201      	movs	r2, #1
 8007510:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2201      	movs	r2, #1
 8007518:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2201      	movs	r2, #1
 8007520:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2201      	movs	r2, #1
 8007528:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2201      	movs	r2, #1
 8007530:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2201      	movs	r2, #1
 8007538:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2201      	movs	r2, #1
 8007540:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2201      	movs	r2, #1
 8007548:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2201      	movs	r2, #1
 8007550:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2201      	movs	r2, #1
 8007558:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2201      	movs	r2, #1
 8007560:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2201      	movs	r2, #1
 8007568:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800756c:	2300      	movs	r3, #0
}
 800756e:	4618      	mov	r0, r3
 8007570:	3708      	adds	r7, #8
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}
	...

08007578 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007578:	b480      	push	{r7}
 800757a:	b085      	sub	sp, #20
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
 8007580:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	4a46      	ldr	r2, [pc, #280]	@ (80076a4 <TIM_Base_SetConfig+0x12c>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d013      	beq.n	80075b8 <TIM_Base_SetConfig+0x40>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007596:	d00f      	beq.n	80075b8 <TIM_Base_SetConfig+0x40>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	4a43      	ldr	r2, [pc, #268]	@ (80076a8 <TIM_Base_SetConfig+0x130>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d00b      	beq.n	80075b8 <TIM_Base_SetConfig+0x40>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	4a42      	ldr	r2, [pc, #264]	@ (80076ac <TIM_Base_SetConfig+0x134>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d007      	beq.n	80075b8 <TIM_Base_SetConfig+0x40>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	4a41      	ldr	r2, [pc, #260]	@ (80076b0 <TIM_Base_SetConfig+0x138>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d003      	beq.n	80075b8 <TIM_Base_SetConfig+0x40>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	4a40      	ldr	r2, [pc, #256]	@ (80076b4 <TIM_Base_SetConfig+0x13c>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d108      	bne.n	80075ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	68fa      	ldr	r2, [r7, #12]
 80075c6:	4313      	orrs	r3, r2
 80075c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	4a35      	ldr	r2, [pc, #212]	@ (80076a4 <TIM_Base_SetConfig+0x12c>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d01f      	beq.n	8007612 <TIM_Base_SetConfig+0x9a>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075d8:	d01b      	beq.n	8007612 <TIM_Base_SetConfig+0x9a>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	4a32      	ldr	r2, [pc, #200]	@ (80076a8 <TIM_Base_SetConfig+0x130>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d017      	beq.n	8007612 <TIM_Base_SetConfig+0x9a>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	4a31      	ldr	r2, [pc, #196]	@ (80076ac <TIM_Base_SetConfig+0x134>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d013      	beq.n	8007612 <TIM_Base_SetConfig+0x9a>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	4a30      	ldr	r2, [pc, #192]	@ (80076b0 <TIM_Base_SetConfig+0x138>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d00f      	beq.n	8007612 <TIM_Base_SetConfig+0x9a>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	4a2f      	ldr	r2, [pc, #188]	@ (80076b4 <TIM_Base_SetConfig+0x13c>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d00b      	beq.n	8007612 <TIM_Base_SetConfig+0x9a>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	4a2e      	ldr	r2, [pc, #184]	@ (80076b8 <TIM_Base_SetConfig+0x140>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d007      	beq.n	8007612 <TIM_Base_SetConfig+0x9a>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	4a2d      	ldr	r2, [pc, #180]	@ (80076bc <TIM_Base_SetConfig+0x144>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d003      	beq.n	8007612 <TIM_Base_SetConfig+0x9a>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	4a2c      	ldr	r2, [pc, #176]	@ (80076c0 <TIM_Base_SetConfig+0x148>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d108      	bne.n	8007624 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007618:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	68db      	ldr	r3, [r3, #12]
 800761e:	68fa      	ldr	r2, [r7, #12]
 8007620:	4313      	orrs	r3, r2
 8007622:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	695b      	ldr	r3, [r3, #20]
 800762e:	4313      	orrs	r3, r2
 8007630:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	68fa      	ldr	r2, [r7, #12]
 8007636:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	689a      	ldr	r2, [r3, #8]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	681a      	ldr	r2, [r3, #0]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	4a16      	ldr	r2, [pc, #88]	@ (80076a4 <TIM_Base_SetConfig+0x12c>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d00f      	beq.n	8007670 <TIM_Base_SetConfig+0xf8>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	4a18      	ldr	r2, [pc, #96]	@ (80076b4 <TIM_Base_SetConfig+0x13c>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d00b      	beq.n	8007670 <TIM_Base_SetConfig+0xf8>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	4a17      	ldr	r2, [pc, #92]	@ (80076b8 <TIM_Base_SetConfig+0x140>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d007      	beq.n	8007670 <TIM_Base_SetConfig+0xf8>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	4a16      	ldr	r2, [pc, #88]	@ (80076bc <TIM_Base_SetConfig+0x144>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d003      	beq.n	8007670 <TIM_Base_SetConfig+0xf8>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	4a15      	ldr	r2, [pc, #84]	@ (80076c0 <TIM_Base_SetConfig+0x148>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d103      	bne.n	8007678 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	691a      	ldr	r2, [r3, #16]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2201      	movs	r2, #1
 800767c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	691b      	ldr	r3, [r3, #16]
 8007682:	f003 0301 	and.w	r3, r3, #1
 8007686:	2b01      	cmp	r3, #1
 8007688:	d105      	bne.n	8007696 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	691b      	ldr	r3, [r3, #16]
 800768e:	f023 0201 	bic.w	r2, r3, #1
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	611a      	str	r2, [r3, #16]
  }
}
 8007696:	bf00      	nop
 8007698:	3714      	adds	r7, #20
 800769a:	46bd      	mov	sp, r7
 800769c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a0:	4770      	bx	lr
 80076a2:	bf00      	nop
 80076a4:	40010000 	.word	0x40010000
 80076a8:	40000400 	.word	0x40000400
 80076ac:	40000800 	.word	0x40000800
 80076b0:	40000c00 	.word	0x40000c00
 80076b4:	40010400 	.word	0x40010400
 80076b8:	40014000 	.word	0x40014000
 80076bc:	40014400 	.word	0x40014400
 80076c0:	40014800 	.word	0x40014800

080076c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b085      	sub	sp, #20
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	d101      	bne.n	80076dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80076d8:	2302      	movs	r3, #2
 80076da:	e06d      	b.n	80077b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2201      	movs	r2, #1
 80076e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2202      	movs	r2, #2
 80076e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	685b      	ldr	r3, [r3, #4]
 80076f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	689b      	ldr	r3, [r3, #8]
 80076fa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a30      	ldr	r2, [pc, #192]	@ (80077c4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d004      	beq.n	8007710 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a2f      	ldr	r2, [pc, #188]	@ (80077c8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d108      	bne.n	8007722 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007716:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	685b      	ldr	r3, [r3, #4]
 800771c:	68fa      	ldr	r2, [r7, #12]
 800771e:	4313      	orrs	r3, r2
 8007720:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007728:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	68fa      	ldr	r2, [r7, #12]
 8007730:	4313      	orrs	r3, r2
 8007732:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	68fa      	ldr	r2, [r7, #12]
 800773a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4a20      	ldr	r2, [pc, #128]	@ (80077c4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d022      	beq.n	800778c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800774e:	d01d      	beq.n	800778c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4a1d      	ldr	r2, [pc, #116]	@ (80077cc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d018      	beq.n	800778c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4a1c      	ldr	r2, [pc, #112]	@ (80077d0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d013      	beq.n	800778c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4a1a      	ldr	r2, [pc, #104]	@ (80077d4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d00e      	beq.n	800778c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4a15      	ldr	r2, [pc, #84]	@ (80077c8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d009      	beq.n	800778c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4a16      	ldr	r2, [pc, #88]	@ (80077d8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d004      	beq.n	800778c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a15      	ldr	r2, [pc, #84]	@ (80077dc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d10c      	bne.n	80077a6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007792:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	689b      	ldr	r3, [r3, #8]
 8007798:	68ba      	ldr	r2, [r7, #8]
 800779a:	4313      	orrs	r3, r2
 800779c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	68ba      	ldr	r2, [r7, #8]
 80077a4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2201      	movs	r2, #1
 80077aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2200      	movs	r2, #0
 80077b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80077b6:	2300      	movs	r3, #0
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	3714      	adds	r7, #20
 80077bc:	46bd      	mov	sp, r7
 80077be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c2:	4770      	bx	lr
 80077c4:	40010000 	.word	0x40010000
 80077c8:	40010400 	.word	0x40010400
 80077cc:	40000400 	.word	0x40000400
 80077d0:	40000800 	.word	0x40000800
 80077d4:	40000c00 	.word	0x40000c00
 80077d8:	40001800 	.word	0x40001800
 80077dc:	40014000 	.word	0x40014000

080077e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b082      	sub	sp, #8
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d101      	bne.n	80077f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80077ee:	2301      	movs	r3, #1
 80077f0:	e042      	b.n	8007878 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d106      	bne.n	800780a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2200      	movs	r2, #0
 8007800:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f7fa f897 	bl	8001938 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2224      	movs	r2, #36	@ 0x24
 800780e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	681a      	ldr	r2, [r3, #0]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f022 0201 	bic.w	r2, r2, #1
 8007820:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007826:	2b00      	cmp	r3, #0
 8007828:	d002      	beq.n	8007830 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f000 ff22 	bl	8008674 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f000 f8b3 	bl	800799c <UART_SetConfig>
 8007836:	4603      	mov	r3, r0
 8007838:	2b01      	cmp	r3, #1
 800783a:	d101      	bne.n	8007840 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800783c:	2301      	movs	r3, #1
 800783e:	e01b      	b.n	8007878 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	685a      	ldr	r2, [r3, #4]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800784e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	689a      	ldr	r2, [r3, #8]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800785e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	681a      	ldr	r2, [r3, #0]
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f042 0201 	orr.w	r2, r2, #1
 800786e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f000 ffa1 	bl	80087b8 <UART_CheckIdleState>
 8007876:	4603      	mov	r3, r0
}
 8007878:	4618      	mov	r0, r3
 800787a:	3708      	adds	r7, #8
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}

08007880 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b08a      	sub	sp, #40	@ 0x28
 8007884:	af02      	add	r7, sp, #8
 8007886:	60f8      	str	r0, [r7, #12]
 8007888:	60b9      	str	r1, [r7, #8]
 800788a:	603b      	str	r3, [r7, #0]
 800788c:	4613      	mov	r3, r2
 800788e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007896:	2b20      	cmp	r3, #32
 8007898:	d17b      	bne.n	8007992 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d002      	beq.n	80078a6 <HAL_UART_Transmit+0x26>
 80078a0:	88fb      	ldrh	r3, [r7, #6]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d101      	bne.n	80078aa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80078a6:	2301      	movs	r3, #1
 80078a8:	e074      	b.n	8007994 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	2200      	movs	r2, #0
 80078ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	2221      	movs	r2, #33	@ 0x21
 80078b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80078ba:	f7fa fb65 	bl	8001f88 <HAL_GetTick>
 80078be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	88fa      	ldrh	r2, [r7, #6]
 80078c4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	88fa      	ldrh	r2, [r7, #6]
 80078cc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	689b      	ldr	r3, [r3, #8]
 80078d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80078d8:	d108      	bne.n	80078ec <HAL_UART_Transmit+0x6c>
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	691b      	ldr	r3, [r3, #16]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d104      	bne.n	80078ec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80078e2:	2300      	movs	r3, #0
 80078e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	61bb      	str	r3, [r7, #24]
 80078ea:	e003      	b.n	80078f4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80078f0:	2300      	movs	r3, #0
 80078f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80078f4:	e030      	b.n	8007958 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	9300      	str	r3, [sp, #0]
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	2200      	movs	r2, #0
 80078fe:	2180      	movs	r1, #128	@ 0x80
 8007900:	68f8      	ldr	r0, [r7, #12]
 8007902:	f001 f803 	bl	800890c <UART_WaitOnFlagUntilTimeout>
 8007906:	4603      	mov	r3, r0
 8007908:	2b00      	cmp	r3, #0
 800790a:	d005      	beq.n	8007918 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2220      	movs	r2, #32
 8007910:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007914:	2303      	movs	r3, #3
 8007916:	e03d      	b.n	8007994 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007918:	69fb      	ldr	r3, [r7, #28]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d10b      	bne.n	8007936 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800791e:	69bb      	ldr	r3, [r7, #24]
 8007920:	881b      	ldrh	r3, [r3, #0]
 8007922:	461a      	mov	r2, r3
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800792c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800792e:	69bb      	ldr	r3, [r7, #24]
 8007930:	3302      	adds	r3, #2
 8007932:	61bb      	str	r3, [r7, #24]
 8007934:	e007      	b.n	8007946 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007936:	69fb      	ldr	r3, [r7, #28]
 8007938:	781a      	ldrb	r2, [r3, #0]
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007940:	69fb      	ldr	r3, [r7, #28]
 8007942:	3301      	adds	r3, #1
 8007944:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800794c:	b29b      	uxth	r3, r3
 800794e:	3b01      	subs	r3, #1
 8007950:	b29a      	uxth	r2, r3
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800795e:	b29b      	uxth	r3, r3
 8007960:	2b00      	cmp	r3, #0
 8007962:	d1c8      	bne.n	80078f6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	9300      	str	r3, [sp, #0]
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	2200      	movs	r2, #0
 800796c:	2140      	movs	r1, #64	@ 0x40
 800796e:	68f8      	ldr	r0, [r7, #12]
 8007970:	f000 ffcc 	bl	800890c <UART_WaitOnFlagUntilTimeout>
 8007974:	4603      	mov	r3, r0
 8007976:	2b00      	cmp	r3, #0
 8007978:	d005      	beq.n	8007986 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2220      	movs	r2, #32
 800797e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007982:	2303      	movs	r3, #3
 8007984:	e006      	b.n	8007994 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	2220      	movs	r2, #32
 800798a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800798e:	2300      	movs	r3, #0
 8007990:	e000      	b.n	8007994 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007992:	2302      	movs	r3, #2
  }
}
 8007994:	4618      	mov	r0, r3
 8007996:	3720      	adds	r7, #32
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}

0800799c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800799c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80079a0:	b092      	sub	sp, #72	@ 0x48
 80079a2:	af00      	add	r7, sp, #0
 80079a4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80079a6:	2300      	movs	r3, #0
 80079a8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	689a      	ldr	r2, [r3, #8]
 80079b0:	697b      	ldr	r3, [r7, #20]
 80079b2:	691b      	ldr	r3, [r3, #16]
 80079b4:	431a      	orrs	r2, r3
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	695b      	ldr	r3, [r3, #20]
 80079ba:	431a      	orrs	r2, r3
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	69db      	ldr	r3, [r3, #28]
 80079c0:	4313      	orrs	r3, r2
 80079c2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	681a      	ldr	r2, [r3, #0]
 80079ca:	4bbe      	ldr	r3, [pc, #760]	@ (8007cc4 <UART_SetConfig+0x328>)
 80079cc:	4013      	ands	r3, r2
 80079ce:	697a      	ldr	r2, [r7, #20]
 80079d0:	6812      	ldr	r2, [r2, #0]
 80079d2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80079d4:	430b      	orrs	r3, r1
 80079d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	685b      	ldr	r3, [r3, #4]
 80079de:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80079e2:	697b      	ldr	r3, [r7, #20]
 80079e4:	68da      	ldr	r2, [r3, #12]
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	430a      	orrs	r2, r1
 80079ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	699b      	ldr	r3, [r3, #24]
 80079f2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4ab3      	ldr	r2, [pc, #716]	@ (8007cc8 <UART_SetConfig+0x32c>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d004      	beq.n	8007a08 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	6a1b      	ldr	r3, [r3, #32]
 8007a02:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007a04:	4313      	orrs	r3, r2
 8007a06:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	689a      	ldr	r2, [r3, #8]
 8007a0e:	4baf      	ldr	r3, [pc, #700]	@ (8007ccc <UART_SetConfig+0x330>)
 8007a10:	4013      	ands	r3, r2
 8007a12:	697a      	ldr	r2, [r7, #20]
 8007a14:	6812      	ldr	r2, [r2, #0]
 8007a16:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007a18:	430b      	orrs	r3, r1
 8007a1a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a22:	f023 010f 	bic.w	r1, r3, #15
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	430a      	orrs	r2, r1
 8007a30:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007a32:	697b      	ldr	r3, [r7, #20]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4aa6      	ldr	r2, [pc, #664]	@ (8007cd0 <UART_SetConfig+0x334>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d177      	bne.n	8007b2c <UART_SetConfig+0x190>
 8007a3c:	4ba5      	ldr	r3, [pc, #660]	@ (8007cd4 <UART_SetConfig+0x338>)
 8007a3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a40:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007a44:	2b28      	cmp	r3, #40	@ 0x28
 8007a46:	d86d      	bhi.n	8007b24 <UART_SetConfig+0x188>
 8007a48:	a201      	add	r2, pc, #4	@ (adr r2, 8007a50 <UART_SetConfig+0xb4>)
 8007a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a4e:	bf00      	nop
 8007a50:	08007af5 	.word	0x08007af5
 8007a54:	08007b25 	.word	0x08007b25
 8007a58:	08007b25 	.word	0x08007b25
 8007a5c:	08007b25 	.word	0x08007b25
 8007a60:	08007b25 	.word	0x08007b25
 8007a64:	08007b25 	.word	0x08007b25
 8007a68:	08007b25 	.word	0x08007b25
 8007a6c:	08007b25 	.word	0x08007b25
 8007a70:	08007afd 	.word	0x08007afd
 8007a74:	08007b25 	.word	0x08007b25
 8007a78:	08007b25 	.word	0x08007b25
 8007a7c:	08007b25 	.word	0x08007b25
 8007a80:	08007b25 	.word	0x08007b25
 8007a84:	08007b25 	.word	0x08007b25
 8007a88:	08007b25 	.word	0x08007b25
 8007a8c:	08007b25 	.word	0x08007b25
 8007a90:	08007b05 	.word	0x08007b05
 8007a94:	08007b25 	.word	0x08007b25
 8007a98:	08007b25 	.word	0x08007b25
 8007a9c:	08007b25 	.word	0x08007b25
 8007aa0:	08007b25 	.word	0x08007b25
 8007aa4:	08007b25 	.word	0x08007b25
 8007aa8:	08007b25 	.word	0x08007b25
 8007aac:	08007b25 	.word	0x08007b25
 8007ab0:	08007b0d 	.word	0x08007b0d
 8007ab4:	08007b25 	.word	0x08007b25
 8007ab8:	08007b25 	.word	0x08007b25
 8007abc:	08007b25 	.word	0x08007b25
 8007ac0:	08007b25 	.word	0x08007b25
 8007ac4:	08007b25 	.word	0x08007b25
 8007ac8:	08007b25 	.word	0x08007b25
 8007acc:	08007b25 	.word	0x08007b25
 8007ad0:	08007b15 	.word	0x08007b15
 8007ad4:	08007b25 	.word	0x08007b25
 8007ad8:	08007b25 	.word	0x08007b25
 8007adc:	08007b25 	.word	0x08007b25
 8007ae0:	08007b25 	.word	0x08007b25
 8007ae4:	08007b25 	.word	0x08007b25
 8007ae8:	08007b25 	.word	0x08007b25
 8007aec:	08007b25 	.word	0x08007b25
 8007af0:	08007b1d 	.word	0x08007b1d
 8007af4:	2301      	movs	r3, #1
 8007af6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007afa:	e326      	b.n	800814a <UART_SetConfig+0x7ae>
 8007afc:	2304      	movs	r3, #4
 8007afe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b02:	e322      	b.n	800814a <UART_SetConfig+0x7ae>
 8007b04:	2308      	movs	r3, #8
 8007b06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b0a:	e31e      	b.n	800814a <UART_SetConfig+0x7ae>
 8007b0c:	2310      	movs	r3, #16
 8007b0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b12:	e31a      	b.n	800814a <UART_SetConfig+0x7ae>
 8007b14:	2320      	movs	r3, #32
 8007b16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b1a:	e316      	b.n	800814a <UART_SetConfig+0x7ae>
 8007b1c:	2340      	movs	r3, #64	@ 0x40
 8007b1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b22:	e312      	b.n	800814a <UART_SetConfig+0x7ae>
 8007b24:	2380      	movs	r3, #128	@ 0x80
 8007b26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b2a:	e30e      	b.n	800814a <UART_SetConfig+0x7ae>
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4a69      	ldr	r2, [pc, #420]	@ (8007cd8 <UART_SetConfig+0x33c>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d130      	bne.n	8007b98 <UART_SetConfig+0x1fc>
 8007b36:	4b67      	ldr	r3, [pc, #412]	@ (8007cd4 <UART_SetConfig+0x338>)
 8007b38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b3a:	f003 0307 	and.w	r3, r3, #7
 8007b3e:	2b05      	cmp	r3, #5
 8007b40:	d826      	bhi.n	8007b90 <UART_SetConfig+0x1f4>
 8007b42:	a201      	add	r2, pc, #4	@ (adr r2, 8007b48 <UART_SetConfig+0x1ac>)
 8007b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b48:	08007b61 	.word	0x08007b61
 8007b4c:	08007b69 	.word	0x08007b69
 8007b50:	08007b71 	.word	0x08007b71
 8007b54:	08007b79 	.word	0x08007b79
 8007b58:	08007b81 	.word	0x08007b81
 8007b5c:	08007b89 	.word	0x08007b89
 8007b60:	2300      	movs	r3, #0
 8007b62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b66:	e2f0      	b.n	800814a <UART_SetConfig+0x7ae>
 8007b68:	2304      	movs	r3, #4
 8007b6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b6e:	e2ec      	b.n	800814a <UART_SetConfig+0x7ae>
 8007b70:	2308      	movs	r3, #8
 8007b72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b76:	e2e8      	b.n	800814a <UART_SetConfig+0x7ae>
 8007b78:	2310      	movs	r3, #16
 8007b7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b7e:	e2e4      	b.n	800814a <UART_SetConfig+0x7ae>
 8007b80:	2320      	movs	r3, #32
 8007b82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b86:	e2e0      	b.n	800814a <UART_SetConfig+0x7ae>
 8007b88:	2340      	movs	r3, #64	@ 0x40
 8007b8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b8e:	e2dc      	b.n	800814a <UART_SetConfig+0x7ae>
 8007b90:	2380      	movs	r3, #128	@ 0x80
 8007b92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b96:	e2d8      	b.n	800814a <UART_SetConfig+0x7ae>
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4a4f      	ldr	r2, [pc, #316]	@ (8007cdc <UART_SetConfig+0x340>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d130      	bne.n	8007c04 <UART_SetConfig+0x268>
 8007ba2:	4b4c      	ldr	r3, [pc, #304]	@ (8007cd4 <UART_SetConfig+0x338>)
 8007ba4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ba6:	f003 0307 	and.w	r3, r3, #7
 8007baa:	2b05      	cmp	r3, #5
 8007bac:	d826      	bhi.n	8007bfc <UART_SetConfig+0x260>
 8007bae:	a201      	add	r2, pc, #4	@ (adr r2, 8007bb4 <UART_SetConfig+0x218>)
 8007bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bb4:	08007bcd 	.word	0x08007bcd
 8007bb8:	08007bd5 	.word	0x08007bd5
 8007bbc:	08007bdd 	.word	0x08007bdd
 8007bc0:	08007be5 	.word	0x08007be5
 8007bc4:	08007bed 	.word	0x08007bed
 8007bc8:	08007bf5 	.word	0x08007bf5
 8007bcc:	2300      	movs	r3, #0
 8007bce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bd2:	e2ba      	b.n	800814a <UART_SetConfig+0x7ae>
 8007bd4:	2304      	movs	r3, #4
 8007bd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bda:	e2b6      	b.n	800814a <UART_SetConfig+0x7ae>
 8007bdc:	2308      	movs	r3, #8
 8007bde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007be2:	e2b2      	b.n	800814a <UART_SetConfig+0x7ae>
 8007be4:	2310      	movs	r3, #16
 8007be6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bea:	e2ae      	b.n	800814a <UART_SetConfig+0x7ae>
 8007bec:	2320      	movs	r3, #32
 8007bee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bf2:	e2aa      	b.n	800814a <UART_SetConfig+0x7ae>
 8007bf4:	2340      	movs	r3, #64	@ 0x40
 8007bf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bfa:	e2a6      	b.n	800814a <UART_SetConfig+0x7ae>
 8007bfc:	2380      	movs	r3, #128	@ 0x80
 8007bfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c02:	e2a2      	b.n	800814a <UART_SetConfig+0x7ae>
 8007c04:	697b      	ldr	r3, [r7, #20]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4a35      	ldr	r2, [pc, #212]	@ (8007ce0 <UART_SetConfig+0x344>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d130      	bne.n	8007c70 <UART_SetConfig+0x2d4>
 8007c0e:	4b31      	ldr	r3, [pc, #196]	@ (8007cd4 <UART_SetConfig+0x338>)
 8007c10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c12:	f003 0307 	and.w	r3, r3, #7
 8007c16:	2b05      	cmp	r3, #5
 8007c18:	d826      	bhi.n	8007c68 <UART_SetConfig+0x2cc>
 8007c1a:	a201      	add	r2, pc, #4	@ (adr r2, 8007c20 <UART_SetConfig+0x284>)
 8007c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c20:	08007c39 	.word	0x08007c39
 8007c24:	08007c41 	.word	0x08007c41
 8007c28:	08007c49 	.word	0x08007c49
 8007c2c:	08007c51 	.word	0x08007c51
 8007c30:	08007c59 	.word	0x08007c59
 8007c34:	08007c61 	.word	0x08007c61
 8007c38:	2300      	movs	r3, #0
 8007c3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c3e:	e284      	b.n	800814a <UART_SetConfig+0x7ae>
 8007c40:	2304      	movs	r3, #4
 8007c42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c46:	e280      	b.n	800814a <UART_SetConfig+0x7ae>
 8007c48:	2308      	movs	r3, #8
 8007c4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c4e:	e27c      	b.n	800814a <UART_SetConfig+0x7ae>
 8007c50:	2310      	movs	r3, #16
 8007c52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c56:	e278      	b.n	800814a <UART_SetConfig+0x7ae>
 8007c58:	2320      	movs	r3, #32
 8007c5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c5e:	e274      	b.n	800814a <UART_SetConfig+0x7ae>
 8007c60:	2340      	movs	r3, #64	@ 0x40
 8007c62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c66:	e270      	b.n	800814a <UART_SetConfig+0x7ae>
 8007c68:	2380      	movs	r3, #128	@ 0x80
 8007c6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c6e:	e26c      	b.n	800814a <UART_SetConfig+0x7ae>
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4a1b      	ldr	r2, [pc, #108]	@ (8007ce4 <UART_SetConfig+0x348>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d142      	bne.n	8007d00 <UART_SetConfig+0x364>
 8007c7a:	4b16      	ldr	r3, [pc, #88]	@ (8007cd4 <UART_SetConfig+0x338>)
 8007c7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c7e:	f003 0307 	and.w	r3, r3, #7
 8007c82:	2b05      	cmp	r3, #5
 8007c84:	d838      	bhi.n	8007cf8 <UART_SetConfig+0x35c>
 8007c86:	a201      	add	r2, pc, #4	@ (adr r2, 8007c8c <UART_SetConfig+0x2f0>)
 8007c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c8c:	08007ca5 	.word	0x08007ca5
 8007c90:	08007cad 	.word	0x08007cad
 8007c94:	08007cb5 	.word	0x08007cb5
 8007c98:	08007cbd 	.word	0x08007cbd
 8007c9c:	08007ce9 	.word	0x08007ce9
 8007ca0:	08007cf1 	.word	0x08007cf1
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007caa:	e24e      	b.n	800814a <UART_SetConfig+0x7ae>
 8007cac:	2304      	movs	r3, #4
 8007cae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cb2:	e24a      	b.n	800814a <UART_SetConfig+0x7ae>
 8007cb4:	2308      	movs	r3, #8
 8007cb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cba:	e246      	b.n	800814a <UART_SetConfig+0x7ae>
 8007cbc:	2310      	movs	r3, #16
 8007cbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cc2:	e242      	b.n	800814a <UART_SetConfig+0x7ae>
 8007cc4:	cfff69f3 	.word	0xcfff69f3
 8007cc8:	58000c00 	.word	0x58000c00
 8007ccc:	11fff4ff 	.word	0x11fff4ff
 8007cd0:	40011000 	.word	0x40011000
 8007cd4:	58024400 	.word	0x58024400
 8007cd8:	40004400 	.word	0x40004400
 8007cdc:	40004800 	.word	0x40004800
 8007ce0:	40004c00 	.word	0x40004c00
 8007ce4:	40005000 	.word	0x40005000
 8007ce8:	2320      	movs	r3, #32
 8007cea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cee:	e22c      	b.n	800814a <UART_SetConfig+0x7ae>
 8007cf0:	2340      	movs	r3, #64	@ 0x40
 8007cf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cf6:	e228      	b.n	800814a <UART_SetConfig+0x7ae>
 8007cf8:	2380      	movs	r3, #128	@ 0x80
 8007cfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cfe:	e224      	b.n	800814a <UART_SetConfig+0x7ae>
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4ab1      	ldr	r2, [pc, #708]	@ (8007fcc <UART_SetConfig+0x630>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d176      	bne.n	8007df8 <UART_SetConfig+0x45c>
 8007d0a:	4bb1      	ldr	r3, [pc, #708]	@ (8007fd0 <UART_SetConfig+0x634>)
 8007d0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d0e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007d12:	2b28      	cmp	r3, #40	@ 0x28
 8007d14:	d86c      	bhi.n	8007df0 <UART_SetConfig+0x454>
 8007d16:	a201      	add	r2, pc, #4	@ (adr r2, 8007d1c <UART_SetConfig+0x380>)
 8007d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d1c:	08007dc1 	.word	0x08007dc1
 8007d20:	08007df1 	.word	0x08007df1
 8007d24:	08007df1 	.word	0x08007df1
 8007d28:	08007df1 	.word	0x08007df1
 8007d2c:	08007df1 	.word	0x08007df1
 8007d30:	08007df1 	.word	0x08007df1
 8007d34:	08007df1 	.word	0x08007df1
 8007d38:	08007df1 	.word	0x08007df1
 8007d3c:	08007dc9 	.word	0x08007dc9
 8007d40:	08007df1 	.word	0x08007df1
 8007d44:	08007df1 	.word	0x08007df1
 8007d48:	08007df1 	.word	0x08007df1
 8007d4c:	08007df1 	.word	0x08007df1
 8007d50:	08007df1 	.word	0x08007df1
 8007d54:	08007df1 	.word	0x08007df1
 8007d58:	08007df1 	.word	0x08007df1
 8007d5c:	08007dd1 	.word	0x08007dd1
 8007d60:	08007df1 	.word	0x08007df1
 8007d64:	08007df1 	.word	0x08007df1
 8007d68:	08007df1 	.word	0x08007df1
 8007d6c:	08007df1 	.word	0x08007df1
 8007d70:	08007df1 	.word	0x08007df1
 8007d74:	08007df1 	.word	0x08007df1
 8007d78:	08007df1 	.word	0x08007df1
 8007d7c:	08007dd9 	.word	0x08007dd9
 8007d80:	08007df1 	.word	0x08007df1
 8007d84:	08007df1 	.word	0x08007df1
 8007d88:	08007df1 	.word	0x08007df1
 8007d8c:	08007df1 	.word	0x08007df1
 8007d90:	08007df1 	.word	0x08007df1
 8007d94:	08007df1 	.word	0x08007df1
 8007d98:	08007df1 	.word	0x08007df1
 8007d9c:	08007de1 	.word	0x08007de1
 8007da0:	08007df1 	.word	0x08007df1
 8007da4:	08007df1 	.word	0x08007df1
 8007da8:	08007df1 	.word	0x08007df1
 8007dac:	08007df1 	.word	0x08007df1
 8007db0:	08007df1 	.word	0x08007df1
 8007db4:	08007df1 	.word	0x08007df1
 8007db8:	08007df1 	.word	0x08007df1
 8007dbc:	08007de9 	.word	0x08007de9
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dc6:	e1c0      	b.n	800814a <UART_SetConfig+0x7ae>
 8007dc8:	2304      	movs	r3, #4
 8007dca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dce:	e1bc      	b.n	800814a <UART_SetConfig+0x7ae>
 8007dd0:	2308      	movs	r3, #8
 8007dd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dd6:	e1b8      	b.n	800814a <UART_SetConfig+0x7ae>
 8007dd8:	2310      	movs	r3, #16
 8007dda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dde:	e1b4      	b.n	800814a <UART_SetConfig+0x7ae>
 8007de0:	2320      	movs	r3, #32
 8007de2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007de6:	e1b0      	b.n	800814a <UART_SetConfig+0x7ae>
 8007de8:	2340      	movs	r3, #64	@ 0x40
 8007dea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dee:	e1ac      	b.n	800814a <UART_SetConfig+0x7ae>
 8007df0:	2380      	movs	r3, #128	@ 0x80
 8007df2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007df6:	e1a8      	b.n	800814a <UART_SetConfig+0x7ae>
 8007df8:	697b      	ldr	r3, [r7, #20]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	4a75      	ldr	r2, [pc, #468]	@ (8007fd4 <UART_SetConfig+0x638>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d130      	bne.n	8007e64 <UART_SetConfig+0x4c8>
 8007e02:	4b73      	ldr	r3, [pc, #460]	@ (8007fd0 <UART_SetConfig+0x634>)
 8007e04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e06:	f003 0307 	and.w	r3, r3, #7
 8007e0a:	2b05      	cmp	r3, #5
 8007e0c:	d826      	bhi.n	8007e5c <UART_SetConfig+0x4c0>
 8007e0e:	a201      	add	r2, pc, #4	@ (adr r2, 8007e14 <UART_SetConfig+0x478>)
 8007e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e14:	08007e2d 	.word	0x08007e2d
 8007e18:	08007e35 	.word	0x08007e35
 8007e1c:	08007e3d 	.word	0x08007e3d
 8007e20:	08007e45 	.word	0x08007e45
 8007e24:	08007e4d 	.word	0x08007e4d
 8007e28:	08007e55 	.word	0x08007e55
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e32:	e18a      	b.n	800814a <UART_SetConfig+0x7ae>
 8007e34:	2304      	movs	r3, #4
 8007e36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e3a:	e186      	b.n	800814a <UART_SetConfig+0x7ae>
 8007e3c:	2308      	movs	r3, #8
 8007e3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e42:	e182      	b.n	800814a <UART_SetConfig+0x7ae>
 8007e44:	2310      	movs	r3, #16
 8007e46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e4a:	e17e      	b.n	800814a <UART_SetConfig+0x7ae>
 8007e4c:	2320      	movs	r3, #32
 8007e4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e52:	e17a      	b.n	800814a <UART_SetConfig+0x7ae>
 8007e54:	2340      	movs	r3, #64	@ 0x40
 8007e56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e5a:	e176      	b.n	800814a <UART_SetConfig+0x7ae>
 8007e5c:	2380      	movs	r3, #128	@ 0x80
 8007e5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e62:	e172      	b.n	800814a <UART_SetConfig+0x7ae>
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4a5b      	ldr	r2, [pc, #364]	@ (8007fd8 <UART_SetConfig+0x63c>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d130      	bne.n	8007ed0 <UART_SetConfig+0x534>
 8007e6e:	4b58      	ldr	r3, [pc, #352]	@ (8007fd0 <UART_SetConfig+0x634>)
 8007e70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e72:	f003 0307 	and.w	r3, r3, #7
 8007e76:	2b05      	cmp	r3, #5
 8007e78:	d826      	bhi.n	8007ec8 <UART_SetConfig+0x52c>
 8007e7a:	a201      	add	r2, pc, #4	@ (adr r2, 8007e80 <UART_SetConfig+0x4e4>)
 8007e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e80:	08007e99 	.word	0x08007e99
 8007e84:	08007ea1 	.word	0x08007ea1
 8007e88:	08007ea9 	.word	0x08007ea9
 8007e8c:	08007eb1 	.word	0x08007eb1
 8007e90:	08007eb9 	.word	0x08007eb9
 8007e94:	08007ec1 	.word	0x08007ec1
 8007e98:	2300      	movs	r3, #0
 8007e9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e9e:	e154      	b.n	800814a <UART_SetConfig+0x7ae>
 8007ea0:	2304      	movs	r3, #4
 8007ea2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ea6:	e150      	b.n	800814a <UART_SetConfig+0x7ae>
 8007ea8:	2308      	movs	r3, #8
 8007eaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007eae:	e14c      	b.n	800814a <UART_SetConfig+0x7ae>
 8007eb0:	2310      	movs	r3, #16
 8007eb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007eb6:	e148      	b.n	800814a <UART_SetConfig+0x7ae>
 8007eb8:	2320      	movs	r3, #32
 8007eba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ebe:	e144      	b.n	800814a <UART_SetConfig+0x7ae>
 8007ec0:	2340      	movs	r3, #64	@ 0x40
 8007ec2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ec6:	e140      	b.n	800814a <UART_SetConfig+0x7ae>
 8007ec8:	2380      	movs	r3, #128	@ 0x80
 8007eca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ece:	e13c      	b.n	800814a <UART_SetConfig+0x7ae>
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4a41      	ldr	r2, [pc, #260]	@ (8007fdc <UART_SetConfig+0x640>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	f040 8082 	bne.w	8007fe0 <UART_SetConfig+0x644>
 8007edc:	4b3c      	ldr	r3, [pc, #240]	@ (8007fd0 <UART_SetConfig+0x634>)
 8007ede:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ee0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007ee4:	2b28      	cmp	r3, #40	@ 0x28
 8007ee6:	d86d      	bhi.n	8007fc4 <UART_SetConfig+0x628>
 8007ee8:	a201      	add	r2, pc, #4	@ (adr r2, 8007ef0 <UART_SetConfig+0x554>)
 8007eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eee:	bf00      	nop
 8007ef0:	08007f95 	.word	0x08007f95
 8007ef4:	08007fc5 	.word	0x08007fc5
 8007ef8:	08007fc5 	.word	0x08007fc5
 8007efc:	08007fc5 	.word	0x08007fc5
 8007f00:	08007fc5 	.word	0x08007fc5
 8007f04:	08007fc5 	.word	0x08007fc5
 8007f08:	08007fc5 	.word	0x08007fc5
 8007f0c:	08007fc5 	.word	0x08007fc5
 8007f10:	08007f9d 	.word	0x08007f9d
 8007f14:	08007fc5 	.word	0x08007fc5
 8007f18:	08007fc5 	.word	0x08007fc5
 8007f1c:	08007fc5 	.word	0x08007fc5
 8007f20:	08007fc5 	.word	0x08007fc5
 8007f24:	08007fc5 	.word	0x08007fc5
 8007f28:	08007fc5 	.word	0x08007fc5
 8007f2c:	08007fc5 	.word	0x08007fc5
 8007f30:	08007fa5 	.word	0x08007fa5
 8007f34:	08007fc5 	.word	0x08007fc5
 8007f38:	08007fc5 	.word	0x08007fc5
 8007f3c:	08007fc5 	.word	0x08007fc5
 8007f40:	08007fc5 	.word	0x08007fc5
 8007f44:	08007fc5 	.word	0x08007fc5
 8007f48:	08007fc5 	.word	0x08007fc5
 8007f4c:	08007fc5 	.word	0x08007fc5
 8007f50:	08007fad 	.word	0x08007fad
 8007f54:	08007fc5 	.word	0x08007fc5
 8007f58:	08007fc5 	.word	0x08007fc5
 8007f5c:	08007fc5 	.word	0x08007fc5
 8007f60:	08007fc5 	.word	0x08007fc5
 8007f64:	08007fc5 	.word	0x08007fc5
 8007f68:	08007fc5 	.word	0x08007fc5
 8007f6c:	08007fc5 	.word	0x08007fc5
 8007f70:	08007fb5 	.word	0x08007fb5
 8007f74:	08007fc5 	.word	0x08007fc5
 8007f78:	08007fc5 	.word	0x08007fc5
 8007f7c:	08007fc5 	.word	0x08007fc5
 8007f80:	08007fc5 	.word	0x08007fc5
 8007f84:	08007fc5 	.word	0x08007fc5
 8007f88:	08007fc5 	.word	0x08007fc5
 8007f8c:	08007fc5 	.word	0x08007fc5
 8007f90:	08007fbd 	.word	0x08007fbd
 8007f94:	2301      	movs	r3, #1
 8007f96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f9a:	e0d6      	b.n	800814a <UART_SetConfig+0x7ae>
 8007f9c:	2304      	movs	r3, #4
 8007f9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fa2:	e0d2      	b.n	800814a <UART_SetConfig+0x7ae>
 8007fa4:	2308      	movs	r3, #8
 8007fa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007faa:	e0ce      	b.n	800814a <UART_SetConfig+0x7ae>
 8007fac:	2310      	movs	r3, #16
 8007fae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fb2:	e0ca      	b.n	800814a <UART_SetConfig+0x7ae>
 8007fb4:	2320      	movs	r3, #32
 8007fb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fba:	e0c6      	b.n	800814a <UART_SetConfig+0x7ae>
 8007fbc:	2340      	movs	r3, #64	@ 0x40
 8007fbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fc2:	e0c2      	b.n	800814a <UART_SetConfig+0x7ae>
 8007fc4:	2380      	movs	r3, #128	@ 0x80
 8007fc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fca:	e0be      	b.n	800814a <UART_SetConfig+0x7ae>
 8007fcc:	40011400 	.word	0x40011400
 8007fd0:	58024400 	.word	0x58024400
 8007fd4:	40007800 	.word	0x40007800
 8007fd8:	40007c00 	.word	0x40007c00
 8007fdc:	40011800 	.word	0x40011800
 8007fe0:	697b      	ldr	r3, [r7, #20]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4aad      	ldr	r2, [pc, #692]	@ (800829c <UART_SetConfig+0x900>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d176      	bne.n	80080d8 <UART_SetConfig+0x73c>
 8007fea:	4bad      	ldr	r3, [pc, #692]	@ (80082a0 <UART_SetConfig+0x904>)
 8007fec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007ff2:	2b28      	cmp	r3, #40	@ 0x28
 8007ff4:	d86c      	bhi.n	80080d0 <UART_SetConfig+0x734>
 8007ff6:	a201      	add	r2, pc, #4	@ (adr r2, 8007ffc <UART_SetConfig+0x660>)
 8007ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ffc:	080080a1 	.word	0x080080a1
 8008000:	080080d1 	.word	0x080080d1
 8008004:	080080d1 	.word	0x080080d1
 8008008:	080080d1 	.word	0x080080d1
 800800c:	080080d1 	.word	0x080080d1
 8008010:	080080d1 	.word	0x080080d1
 8008014:	080080d1 	.word	0x080080d1
 8008018:	080080d1 	.word	0x080080d1
 800801c:	080080a9 	.word	0x080080a9
 8008020:	080080d1 	.word	0x080080d1
 8008024:	080080d1 	.word	0x080080d1
 8008028:	080080d1 	.word	0x080080d1
 800802c:	080080d1 	.word	0x080080d1
 8008030:	080080d1 	.word	0x080080d1
 8008034:	080080d1 	.word	0x080080d1
 8008038:	080080d1 	.word	0x080080d1
 800803c:	080080b1 	.word	0x080080b1
 8008040:	080080d1 	.word	0x080080d1
 8008044:	080080d1 	.word	0x080080d1
 8008048:	080080d1 	.word	0x080080d1
 800804c:	080080d1 	.word	0x080080d1
 8008050:	080080d1 	.word	0x080080d1
 8008054:	080080d1 	.word	0x080080d1
 8008058:	080080d1 	.word	0x080080d1
 800805c:	080080b9 	.word	0x080080b9
 8008060:	080080d1 	.word	0x080080d1
 8008064:	080080d1 	.word	0x080080d1
 8008068:	080080d1 	.word	0x080080d1
 800806c:	080080d1 	.word	0x080080d1
 8008070:	080080d1 	.word	0x080080d1
 8008074:	080080d1 	.word	0x080080d1
 8008078:	080080d1 	.word	0x080080d1
 800807c:	080080c1 	.word	0x080080c1
 8008080:	080080d1 	.word	0x080080d1
 8008084:	080080d1 	.word	0x080080d1
 8008088:	080080d1 	.word	0x080080d1
 800808c:	080080d1 	.word	0x080080d1
 8008090:	080080d1 	.word	0x080080d1
 8008094:	080080d1 	.word	0x080080d1
 8008098:	080080d1 	.word	0x080080d1
 800809c:	080080c9 	.word	0x080080c9
 80080a0:	2301      	movs	r3, #1
 80080a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080a6:	e050      	b.n	800814a <UART_SetConfig+0x7ae>
 80080a8:	2304      	movs	r3, #4
 80080aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080ae:	e04c      	b.n	800814a <UART_SetConfig+0x7ae>
 80080b0:	2308      	movs	r3, #8
 80080b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080b6:	e048      	b.n	800814a <UART_SetConfig+0x7ae>
 80080b8:	2310      	movs	r3, #16
 80080ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080be:	e044      	b.n	800814a <UART_SetConfig+0x7ae>
 80080c0:	2320      	movs	r3, #32
 80080c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080c6:	e040      	b.n	800814a <UART_SetConfig+0x7ae>
 80080c8:	2340      	movs	r3, #64	@ 0x40
 80080ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080ce:	e03c      	b.n	800814a <UART_SetConfig+0x7ae>
 80080d0:	2380      	movs	r3, #128	@ 0x80
 80080d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080d6:	e038      	b.n	800814a <UART_SetConfig+0x7ae>
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	4a71      	ldr	r2, [pc, #452]	@ (80082a4 <UART_SetConfig+0x908>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d130      	bne.n	8008144 <UART_SetConfig+0x7a8>
 80080e2:	4b6f      	ldr	r3, [pc, #444]	@ (80082a0 <UART_SetConfig+0x904>)
 80080e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080e6:	f003 0307 	and.w	r3, r3, #7
 80080ea:	2b05      	cmp	r3, #5
 80080ec:	d826      	bhi.n	800813c <UART_SetConfig+0x7a0>
 80080ee:	a201      	add	r2, pc, #4	@ (adr r2, 80080f4 <UART_SetConfig+0x758>)
 80080f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080f4:	0800810d 	.word	0x0800810d
 80080f8:	08008115 	.word	0x08008115
 80080fc:	0800811d 	.word	0x0800811d
 8008100:	08008125 	.word	0x08008125
 8008104:	0800812d 	.word	0x0800812d
 8008108:	08008135 	.word	0x08008135
 800810c:	2302      	movs	r3, #2
 800810e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008112:	e01a      	b.n	800814a <UART_SetConfig+0x7ae>
 8008114:	2304      	movs	r3, #4
 8008116:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800811a:	e016      	b.n	800814a <UART_SetConfig+0x7ae>
 800811c:	2308      	movs	r3, #8
 800811e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008122:	e012      	b.n	800814a <UART_SetConfig+0x7ae>
 8008124:	2310      	movs	r3, #16
 8008126:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800812a:	e00e      	b.n	800814a <UART_SetConfig+0x7ae>
 800812c:	2320      	movs	r3, #32
 800812e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008132:	e00a      	b.n	800814a <UART_SetConfig+0x7ae>
 8008134:	2340      	movs	r3, #64	@ 0x40
 8008136:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800813a:	e006      	b.n	800814a <UART_SetConfig+0x7ae>
 800813c:	2380      	movs	r3, #128	@ 0x80
 800813e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008142:	e002      	b.n	800814a <UART_SetConfig+0x7ae>
 8008144:	2380      	movs	r3, #128	@ 0x80
 8008146:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	4a55      	ldr	r2, [pc, #340]	@ (80082a4 <UART_SetConfig+0x908>)
 8008150:	4293      	cmp	r3, r2
 8008152:	f040 80f8 	bne.w	8008346 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008156:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800815a:	2b20      	cmp	r3, #32
 800815c:	dc46      	bgt.n	80081ec <UART_SetConfig+0x850>
 800815e:	2b02      	cmp	r3, #2
 8008160:	db75      	blt.n	800824e <UART_SetConfig+0x8b2>
 8008162:	3b02      	subs	r3, #2
 8008164:	2b1e      	cmp	r3, #30
 8008166:	d872      	bhi.n	800824e <UART_SetConfig+0x8b2>
 8008168:	a201      	add	r2, pc, #4	@ (adr r2, 8008170 <UART_SetConfig+0x7d4>)
 800816a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800816e:	bf00      	nop
 8008170:	080081f3 	.word	0x080081f3
 8008174:	0800824f 	.word	0x0800824f
 8008178:	080081fb 	.word	0x080081fb
 800817c:	0800824f 	.word	0x0800824f
 8008180:	0800824f 	.word	0x0800824f
 8008184:	0800824f 	.word	0x0800824f
 8008188:	0800820b 	.word	0x0800820b
 800818c:	0800824f 	.word	0x0800824f
 8008190:	0800824f 	.word	0x0800824f
 8008194:	0800824f 	.word	0x0800824f
 8008198:	0800824f 	.word	0x0800824f
 800819c:	0800824f 	.word	0x0800824f
 80081a0:	0800824f 	.word	0x0800824f
 80081a4:	0800824f 	.word	0x0800824f
 80081a8:	0800821b 	.word	0x0800821b
 80081ac:	0800824f 	.word	0x0800824f
 80081b0:	0800824f 	.word	0x0800824f
 80081b4:	0800824f 	.word	0x0800824f
 80081b8:	0800824f 	.word	0x0800824f
 80081bc:	0800824f 	.word	0x0800824f
 80081c0:	0800824f 	.word	0x0800824f
 80081c4:	0800824f 	.word	0x0800824f
 80081c8:	0800824f 	.word	0x0800824f
 80081cc:	0800824f 	.word	0x0800824f
 80081d0:	0800824f 	.word	0x0800824f
 80081d4:	0800824f 	.word	0x0800824f
 80081d8:	0800824f 	.word	0x0800824f
 80081dc:	0800824f 	.word	0x0800824f
 80081e0:	0800824f 	.word	0x0800824f
 80081e4:	0800824f 	.word	0x0800824f
 80081e8:	08008241 	.word	0x08008241
 80081ec:	2b40      	cmp	r3, #64	@ 0x40
 80081ee:	d02a      	beq.n	8008246 <UART_SetConfig+0x8aa>
 80081f0:	e02d      	b.n	800824e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80081f2:	f7fe fbf5 	bl	80069e0 <HAL_RCCEx_GetD3PCLK1Freq>
 80081f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80081f8:	e02f      	b.n	800825a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80081fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80081fe:	4618      	mov	r0, r3
 8008200:	f7fe fc04 	bl	8006a0c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008206:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008208:	e027      	b.n	800825a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800820a:	f107 0318 	add.w	r3, r7, #24
 800820e:	4618      	mov	r0, r3
 8008210:	f7fe fd50 	bl	8006cb4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008214:	69fb      	ldr	r3, [r7, #28]
 8008216:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008218:	e01f      	b.n	800825a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800821a:	4b21      	ldr	r3, [pc, #132]	@ (80082a0 <UART_SetConfig+0x904>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f003 0320 	and.w	r3, r3, #32
 8008222:	2b00      	cmp	r3, #0
 8008224:	d009      	beq.n	800823a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008226:	4b1e      	ldr	r3, [pc, #120]	@ (80082a0 <UART_SetConfig+0x904>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	08db      	lsrs	r3, r3, #3
 800822c:	f003 0303 	and.w	r3, r3, #3
 8008230:	4a1d      	ldr	r2, [pc, #116]	@ (80082a8 <UART_SetConfig+0x90c>)
 8008232:	fa22 f303 	lsr.w	r3, r2, r3
 8008236:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008238:	e00f      	b.n	800825a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800823a:	4b1b      	ldr	r3, [pc, #108]	@ (80082a8 <UART_SetConfig+0x90c>)
 800823c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800823e:	e00c      	b.n	800825a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008240:	4b1a      	ldr	r3, [pc, #104]	@ (80082ac <UART_SetConfig+0x910>)
 8008242:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008244:	e009      	b.n	800825a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008246:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800824a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800824c:	e005      	b.n	800825a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800824e:	2300      	movs	r3, #0
 8008250:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008252:	2301      	movs	r3, #1
 8008254:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008258:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800825a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800825c:	2b00      	cmp	r3, #0
 800825e:	f000 81ee 	beq.w	800863e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008262:	697b      	ldr	r3, [r7, #20]
 8008264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008266:	4a12      	ldr	r2, [pc, #72]	@ (80082b0 <UART_SetConfig+0x914>)
 8008268:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800826c:	461a      	mov	r2, r3
 800826e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008270:	fbb3 f3f2 	udiv	r3, r3, r2
 8008274:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008276:	697b      	ldr	r3, [r7, #20]
 8008278:	685a      	ldr	r2, [r3, #4]
 800827a:	4613      	mov	r3, r2
 800827c:	005b      	lsls	r3, r3, #1
 800827e:	4413      	add	r3, r2
 8008280:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008282:	429a      	cmp	r2, r3
 8008284:	d305      	bcc.n	8008292 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008286:	697b      	ldr	r3, [r7, #20]
 8008288:	685b      	ldr	r3, [r3, #4]
 800828a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800828c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800828e:	429a      	cmp	r2, r3
 8008290:	d910      	bls.n	80082b4 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8008292:	2301      	movs	r3, #1
 8008294:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008298:	e1d1      	b.n	800863e <UART_SetConfig+0xca2>
 800829a:	bf00      	nop
 800829c:	40011c00 	.word	0x40011c00
 80082a0:	58024400 	.word	0x58024400
 80082a4:	58000c00 	.word	0x58000c00
 80082a8:	03d09000 	.word	0x03d09000
 80082ac:	003d0900 	.word	0x003d0900
 80082b0:	0800d444 	.word	0x0800d444
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80082b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082b6:	2200      	movs	r2, #0
 80082b8:	60bb      	str	r3, [r7, #8]
 80082ba:	60fa      	str	r2, [r7, #12]
 80082bc:	697b      	ldr	r3, [r7, #20]
 80082be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082c0:	4ac0      	ldr	r2, [pc, #768]	@ (80085c4 <UART_SetConfig+0xc28>)
 80082c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80082c6:	b29b      	uxth	r3, r3
 80082c8:	2200      	movs	r2, #0
 80082ca:	603b      	str	r3, [r7, #0]
 80082cc:	607a      	str	r2, [r7, #4]
 80082ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80082d6:	f7f8 fa1f 	bl	8000718 <__aeabi_uldivmod>
 80082da:	4602      	mov	r2, r0
 80082dc:	460b      	mov	r3, r1
 80082de:	4610      	mov	r0, r2
 80082e0:	4619      	mov	r1, r3
 80082e2:	f04f 0200 	mov.w	r2, #0
 80082e6:	f04f 0300 	mov.w	r3, #0
 80082ea:	020b      	lsls	r3, r1, #8
 80082ec:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80082f0:	0202      	lsls	r2, r0, #8
 80082f2:	6979      	ldr	r1, [r7, #20]
 80082f4:	6849      	ldr	r1, [r1, #4]
 80082f6:	0849      	lsrs	r1, r1, #1
 80082f8:	2000      	movs	r0, #0
 80082fa:	460c      	mov	r4, r1
 80082fc:	4605      	mov	r5, r0
 80082fe:	eb12 0804 	adds.w	r8, r2, r4
 8008302:	eb43 0905 	adc.w	r9, r3, r5
 8008306:	697b      	ldr	r3, [r7, #20]
 8008308:	685b      	ldr	r3, [r3, #4]
 800830a:	2200      	movs	r2, #0
 800830c:	469a      	mov	sl, r3
 800830e:	4693      	mov	fp, r2
 8008310:	4652      	mov	r2, sl
 8008312:	465b      	mov	r3, fp
 8008314:	4640      	mov	r0, r8
 8008316:	4649      	mov	r1, r9
 8008318:	f7f8 f9fe 	bl	8000718 <__aeabi_uldivmod>
 800831c:	4602      	mov	r2, r0
 800831e:	460b      	mov	r3, r1
 8008320:	4613      	mov	r3, r2
 8008322:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008326:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800832a:	d308      	bcc.n	800833e <UART_SetConfig+0x9a2>
 800832c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800832e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008332:	d204      	bcs.n	800833e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8008334:	697b      	ldr	r3, [r7, #20]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800833a:	60da      	str	r2, [r3, #12]
 800833c:	e17f      	b.n	800863e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800833e:	2301      	movs	r3, #1
 8008340:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008344:	e17b      	b.n	800863e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008346:	697b      	ldr	r3, [r7, #20]
 8008348:	69db      	ldr	r3, [r3, #28]
 800834a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800834e:	f040 80bd 	bne.w	80084cc <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8008352:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008356:	2b20      	cmp	r3, #32
 8008358:	dc48      	bgt.n	80083ec <UART_SetConfig+0xa50>
 800835a:	2b00      	cmp	r3, #0
 800835c:	db7b      	blt.n	8008456 <UART_SetConfig+0xaba>
 800835e:	2b20      	cmp	r3, #32
 8008360:	d879      	bhi.n	8008456 <UART_SetConfig+0xaba>
 8008362:	a201      	add	r2, pc, #4	@ (adr r2, 8008368 <UART_SetConfig+0x9cc>)
 8008364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008368:	080083f3 	.word	0x080083f3
 800836c:	080083fb 	.word	0x080083fb
 8008370:	08008457 	.word	0x08008457
 8008374:	08008457 	.word	0x08008457
 8008378:	08008403 	.word	0x08008403
 800837c:	08008457 	.word	0x08008457
 8008380:	08008457 	.word	0x08008457
 8008384:	08008457 	.word	0x08008457
 8008388:	08008413 	.word	0x08008413
 800838c:	08008457 	.word	0x08008457
 8008390:	08008457 	.word	0x08008457
 8008394:	08008457 	.word	0x08008457
 8008398:	08008457 	.word	0x08008457
 800839c:	08008457 	.word	0x08008457
 80083a0:	08008457 	.word	0x08008457
 80083a4:	08008457 	.word	0x08008457
 80083a8:	08008423 	.word	0x08008423
 80083ac:	08008457 	.word	0x08008457
 80083b0:	08008457 	.word	0x08008457
 80083b4:	08008457 	.word	0x08008457
 80083b8:	08008457 	.word	0x08008457
 80083bc:	08008457 	.word	0x08008457
 80083c0:	08008457 	.word	0x08008457
 80083c4:	08008457 	.word	0x08008457
 80083c8:	08008457 	.word	0x08008457
 80083cc:	08008457 	.word	0x08008457
 80083d0:	08008457 	.word	0x08008457
 80083d4:	08008457 	.word	0x08008457
 80083d8:	08008457 	.word	0x08008457
 80083dc:	08008457 	.word	0x08008457
 80083e0:	08008457 	.word	0x08008457
 80083e4:	08008457 	.word	0x08008457
 80083e8:	08008449 	.word	0x08008449
 80083ec:	2b40      	cmp	r3, #64	@ 0x40
 80083ee:	d02e      	beq.n	800844e <UART_SetConfig+0xab2>
 80083f0:	e031      	b.n	8008456 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80083f2:	f7fc fc33 	bl	8004c5c <HAL_RCC_GetPCLK1Freq>
 80083f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80083f8:	e033      	b.n	8008462 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80083fa:	f7fc fc45 	bl	8004c88 <HAL_RCC_GetPCLK2Freq>
 80083fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008400:	e02f      	b.n	8008462 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008402:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008406:	4618      	mov	r0, r3
 8008408:	f7fe fb00 	bl	8006a0c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800840c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800840e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008410:	e027      	b.n	8008462 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008412:	f107 0318 	add.w	r3, r7, #24
 8008416:	4618      	mov	r0, r3
 8008418:	f7fe fc4c 	bl	8006cb4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800841c:	69fb      	ldr	r3, [r7, #28]
 800841e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008420:	e01f      	b.n	8008462 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008422:	4b69      	ldr	r3, [pc, #420]	@ (80085c8 <UART_SetConfig+0xc2c>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f003 0320 	and.w	r3, r3, #32
 800842a:	2b00      	cmp	r3, #0
 800842c:	d009      	beq.n	8008442 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800842e:	4b66      	ldr	r3, [pc, #408]	@ (80085c8 <UART_SetConfig+0xc2c>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	08db      	lsrs	r3, r3, #3
 8008434:	f003 0303 	and.w	r3, r3, #3
 8008438:	4a64      	ldr	r2, [pc, #400]	@ (80085cc <UART_SetConfig+0xc30>)
 800843a:	fa22 f303 	lsr.w	r3, r2, r3
 800843e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008440:	e00f      	b.n	8008462 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8008442:	4b62      	ldr	r3, [pc, #392]	@ (80085cc <UART_SetConfig+0xc30>)
 8008444:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008446:	e00c      	b.n	8008462 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008448:	4b61      	ldr	r3, [pc, #388]	@ (80085d0 <UART_SetConfig+0xc34>)
 800844a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800844c:	e009      	b.n	8008462 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800844e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008452:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008454:	e005      	b.n	8008462 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8008456:	2300      	movs	r3, #0
 8008458:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800845a:	2301      	movs	r3, #1
 800845c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008460:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008462:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008464:	2b00      	cmp	r3, #0
 8008466:	f000 80ea 	beq.w	800863e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800846a:	697b      	ldr	r3, [r7, #20]
 800846c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800846e:	4a55      	ldr	r2, [pc, #340]	@ (80085c4 <UART_SetConfig+0xc28>)
 8008470:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008474:	461a      	mov	r2, r3
 8008476:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008478:	fbb3 f3f2 	udiv	r3, r3, r2
 800847c:	005a      	lsls	r2, r3, #1
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	685b      	ldr	r3, [r3, #4]
 8008482:	085b      	lsrs	r3, r3, #1
 8008484:	441a      	add	r2, r3
 8008486:	697b      	ldr	r3, [r7, #20]
 8008488:	685b      	ldr	r3, [r3, #4]
 800848a:	fbb2 f3f3 	udiv	r3, r2, r3
 800848e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008490:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008492:	2b0f      	cmp	r3, #15
 8008494:	d916      	bls.n	80084c4 <UART_SetConfig+0xb28>
 8008496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008498:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800849c:	d212      	bcs.n	80084c4 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800849e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084a0:	b29b      	uxth	r3, r3
 80084a2:	f023 030f 	bic.w	r3, r3, #15
 80084a6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80084a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084aa:	085b      	lsrs	r3, r3, #1
 80084ac:	b29b      	uxth	r3, r3
 80084ae:	f003 0307 	and.w	r3, r3, #7
 80084b2:	b29a      	uxth	r2, r3
 80084b4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80084b6:	4313      	orrs	r3, r2
 80084b8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80084ba:	697b      	ldr	r3, [r7, #20]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80084c0:	60da      	str	r2, [r3, #12]
 80084c2:	e0bc      	b.n	800863e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80084c4:	2301      	movs	r3, #1
 80084c6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80084ca:	e0b8      	b.n	800863e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80084cc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80084d0:	2b20      	cmp	r3, #32
 80084d2:	dc4b      	bgt.n	800856c <UART_SetConfig+0xbd0>
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	f2c0 8087 	blt.w	80085e8 <UART_SetConfig+0xc4c>
 80084da:	2b20      	cmp	r3, #32
 80084dc:	f200 8084 	bhi.w	80085e8 <UART_SetConfig+0xc4c>
 80084e0:	a201      	add	r2, pc, #4	@ (adr r2, 80084e8 <UART_SetConfig+0xb4c>)
 80084e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084e6:	bf00      	nop
 80084e8:	08008573 	.word	0x08008573
 80084ec:	0800857b 	.word	0x0800857b
 80084f0:	080085e9 	.word	0x080085e9
 80084f4:	080085e9 	.word	0x080085e9
 80084f8:	08008583 	.word	0x08008583
 80084fc:	080085e9 	.word	0x080085e9
 8008500:	080085e9 	.word	0x080085e9
 8008504:	080085e9 	.word	0x080085e9
 8008508:	08008593 	.word	0x08008593
 800850c:	080085e9 	.word	0x080085e9
 8008510:	080085e9 	.word	0x080085e9
 8008514:	080085e9 	.word	0x080085e9
 8008518:	080085e9 	.word	0x080085e9
 800851c:	080085e9 	.word	0x080085e9
 8008520:	080085e9 	.word	0x080085e9
 8008524:	080085e9 	.word	0x080085e9
 8008528:	080085a3 	.word	0x080085a3
 800852c:	080085e9 	.word	0x080085e9
 8008530:	080085e9 	.word	0x080085e9
 8008534:	080085e9 	.word	0x080085e9
 8008538:	080085e9 	.word	0x080085e9
 800853c:	080085e9 	.word	0x080085e9
 8008540:	080085e9 	.word	0x080085e9
 8008544:	080085e9 	.word	0x080085e9
 8008548:	080085e9 	.word	0x080085e9
 800854c:	080085e9 	.word	0x080085e9
 8008550:	080085e9 	.word	0x080085e9
 8008554:	080085e9 	.word	0x080085e9
 8008558:	080085e9 	.word	0x080085e9
 800855c:	080085e9 	.word	0x080085e9
 8008560:	080085e9 	.word	0x080085e9
 8008564:	080085e9 	.word	0x080085e9
 8008568:	080085db 	.word	0x080085db
 800856c:	2b40      	cmp	r3, #64	@ 0x40
 800856e:	d037      	beq.n	80085e0 <UART_SetConfig+0xc44>
 8008570:	e03a      	b.n	80085e8 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008572:	f7fc fb73 	bl	8004c5c <HAL_RCC_GetPCLK1Freq>
 8008576:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008578:	e03c      	b.n	80085f4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800857a:	f7fc fb85 	bl	8004c88 <HAL_RCC_GetPCLK2Freq>
 800857e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008580:	e038      	b.n	80085f4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008582:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008586:	4618      	mov	r0, r3
 8008588:	f7fe fa40 	bl	8006a0c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800858c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800858e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008590:	e030      	b.n	80085f4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008592:	f107 0318 	add.w	r3, r7, #24
 8008596:	4618      	mov	r0, r3
 8008598:	f7fe fb8c 	bl	8006cb4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800859c:	69fb      	ldr	r3, [r7, #28]
 800859e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085a0:	e028      	b.n	80085f4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80085a2:	4b09      	ldr	r3, [pc, #36]	@ (80085c8 <UART_SetConfig+0xc2c>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f003 0320 	and.w	r3, r3, #32
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d012      	beq.n	80085d4 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80085ae:	4b06      	ldr	r3, [pc, #24]	@ (80085c8 <UART_SetConfig+0xc2c>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	08db      	lsrs	r3, r3, #3
 80085b4:	f003 0303 	and.w	r3, r3, #3
 80085b8:	4a04      	ldr	r2, [pc, #16]	@ (80085cc <UART_SetConfig+0xc30>)
 80085ba:	fa22 f303 	lsr.w	r3, r2, r3
 80085be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80085c0:	e018      	b.n	80085f4 <UART_SetConfig+0xc58>
 80085c2:	bf00      	nop
 80085c4:	0800d444 	.word	0x0800d444
 80085c8:	58024400 	.word	0x58024400
 80085cc:	03d09000 	.word	0x03d09000
 80085d0:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80085d4:	4b24      	ldr	r3, [pc, #144]	@ (8008668 <UART_SetConfig+0xccc>)
 80085d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085d8:	e00c      	b.n	80085f4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80085da:	4b24      	ldr	r3, [pc, #144]	@ (800866c <UART_SetConfig+0xcd0>)
 80085dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085de:	e009      	b.n	80085f4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80085e0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80085e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085e6:	e005      	b.n	80085f4 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80085e8:	2300      	movs	r3, #0
 80085ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80085ec:	2301      	movs	r3, #1
 80085ee:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80085f2:	bf00      	nop
    }

    if (pclk != 0U)
 80085f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d021      	beq.n	800863e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80085fa:	697b      	ldr	r3, [r7, #20]
 80085fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085fe:	4a1c      	ldr	r2, [pc, #112]	@ (8008670 <UART_SetConfig+0xcd4>)
 8008600:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008604:	461a      	mov	r2, r3
 8008606:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008608:	fbb3 f2f2 	udiv	r2, r3, r2
 800860c:	697b      	ldr	r3, [r7, #20]
 800860e:	685b      	ldr	r3, [r3, #4]
 8008610:	085b      	lsrs	r3, r3, #1
 8008612:	441a      	add	r2, r3
 8008614:	697b      	ldr	r3, [r7, #20]
 8008616:	685b      	ldr	r3, [r3, #4]
 8008618:	fbb2 f3f3 	udiv	r3, r2, r3
 800861c:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800861e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008620:	2b0f      	cmp	r3, #15
 8008622:	d909      	bls.n	8008638 <UART_SetConfig+0xc9c>
 8008624:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008626:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800862a:	d205      	bcs.n	8008638 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800862c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800862e:	b29a      	uxth	r2, r3
 8008630:	697b      	ldr	r3, [r7, #20]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	60da      	str	r2, [r3, #12]
 8008636:	e002      	b.n	800863e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8008638:	2301      	movs	r3, #1
 800863a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	2201      	movs	r2, #1
 8008642:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008646:	697b      	ldr	r3, [r7, #20]
 8008648:	2201      	movs	r2, #1
 800864a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800864e:	697b      	ldr	r3, [r7, #20]
 8008650:	2200      	movs	r2, #0
 8008652:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008654:	697b      	ldr	r3, [r7, #20]
 8008656:	2200      	movs	r2, #0
 8008658:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800865a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800865e:	4618      	mov	r0, r3
 8008660:	3748      	adds	r7, #72	@ 0x48
 8008662:	46bd      	mov	sp, r7
 8008664:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008668:	03d09000 	.word	0x03d09000
 800866c:	003d0900 	.word	0x003d0900
 8008670:	0800d444 	.word	0x0800d444

08008674 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008674:	b480      	push	{r7}
 8008676:	b083      	sub	sp, #12
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008680:	f003 0308 	and.w	r3, r3, #8
 8008684:	2b00      	cmp	r3, #0
 8008686:	d00a      	beq.n	800869e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	685b      	ldr	r3, [r3, #4]
 800868e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	430a      	orrs	r2, r1
 800869c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086a2:	f003 0301 	and.w	r3, r3, #1
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d00a      	beq.n	80086c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	685b      	ldr	r3, [r3, #4]
 80086b0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	430a      	orrs	r2, r1
 80086be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086c4:	f003 0302 	and.w	r3, r3, #2
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d00a      	beq.n	80086e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	685b      	ldr	r3, [r3, #4]
 80086d2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	430a      	orrs	r2, r1
 80086e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086e6:	f003 0304 	and.w	r3, r3, #4
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d00a      	beq.n	8008704 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	685b      	ldr	r3, [r3, #4]
 80086f4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	430a      	orrs	r2, r1
 8008702:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008708:	f003 0310 	and.w	r3, r3, #16
 800870c:	2b00      	cmp	r3, #0
 800870e:	d00a      	beq.n	8008726 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	689b      	ldr	r3, [r3, #8]
 8008716:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	430a      	orrs	r2, r1
 8008724:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800872a:	f003 0320 	and.w	r3, r3, #32
 800872e:	2b00      	cmp	r3, #0
 8008730:	d00a      	beq.n	8008748 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	689b      	ldr	r3, [r3, #8]
 8008738:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	430a      	orrs	r2, r1
 8008746:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800874c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008750:	2b00      	cmp	r3, #0
 8008752:	d01a      	beq.n	800878a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	685b      	ldr	r3, [r3, #4]
 800875a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	430a      	orrs	r2, r1
 8008768:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800876e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008772:	d10a      	bne.n	800878a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	685b      	ldr	r3, [r3, #4]
 800877a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	430a      	orrs	r2, r1
 8008788:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800878e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008792:	2b00      	cmp	r3, #0
 8008794:	d00a      	beq.n	80087ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	685b      	ldr	r3, [r3, #4]
 800879c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	430a      	orrs	r2, r1
 80087aa:	605a      	str	r2, [r3, #4]
  }
}
 80087ac:	bf00      	nop
 80087ae:	370c      	adds	r7, #12
 80087b0:	46bd      	mov	sp, r7
 80087b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b6:	4770      	bx	lr

080087b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b098      	sub	sp, #96	@ 0x60
 80087bc:	af02      	add	r7, sp, #8
 80087be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2200      	movs	r2, #0
 80087c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80087c8:	f7f9 fbde 	bl	8001f88 <HAL_GetTick>
 80087cc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f003 0308 	and.w	r3, r3, #8
 80087d8:	2b08      	cmp	r3, #8
 80087da:	d12f      	bne.n	800883c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80087dc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80087e0:	9300      	str	r3, [sp, #0]
 80087e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80087e4:	2200      	movs	r2, #0
 80087e6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	f000 f88e 	bl	800890c <UART_WaitOnFlagUntilTimeout>
 80087f0:	4603      	mov	r3, r0
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d022      	beq.n	800883c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087fe:	e853 3f00 	ldrex	r3, [r3]
 8008802:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008804:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008806:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800880a:	653b      	str	r3, [r7, #80]	@ 0x50
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	461a      	mov	r2, r3
 8008812:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008814:	647b      	str	r3, [r7, #68]	@ 0x44
 8008816:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008818:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800881a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800881c:	e841 2300 	strex	r3, r2, [r1]
 8008820:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008822:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008824:	2b00      	cmp	r3, #0
 8008826:	d1e6      	bne.n	80087f6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2220      	movs	r2, #32
 800882c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2200      	movs	r2, #0
 8008834:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008838:	2303      	movs	r3, #3
 800883a:	e063      	b.n	8008904 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f003 0304 	and.w	r3, r3, #4
 8008846:	2b04      	cmp	r3, #4
 8008848:	d149      	bne.n	80088de <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800884a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800884e:	9300      	str	r3, [sp, #0]
 8008850:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008852:	2200      	movs	r2, #0
 8008854:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f000 f857 	bl	800890c <UART_WaitOnFlagUntilTimeout>
 800885e:	4603      	mov	r3, r0
 8008860:	2b00      	cmp	r3, #0
 8008862:	d03c      	beq.n	80088de <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800886a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800886c:	e853 3f00 	ldrex	r3, [r3]
 8008870:	623b      	str	r3, [r7, #32]
   return(result);
 8008872:	6a3b      	ldr	r3, [r7, #32]
 8008874:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008878:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	461a      	mov	r2, r3
 8008880:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008882:	633b      	str	r3, [r7, #48]	@ 0x30
 8008884:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008886:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008888:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800888a:	e841 2300 	strex	r3, r2, [r1]
 800888e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008892:	2b00      	cmp	r3, #0
 8008894:	d1e6      	bne.n	8008864 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	3308      	adds	r3, #8
 800889c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800889e:	693b      	ldr	r3, [r7, #16]
 80088a0:	e853 3f00 	ldrex	r3, [r3]
 80088a4:	60fb      	str	r3, [r7, #12]
   return(result);
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	f023 0301 	bic.w	r3, r3, #1
 80088ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	3308      	adds	r3, #8
 80088b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80088b6:	61fa      	str	r2, [r7, #28]
 80088b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088ba:	69b9      	ldr	r1, [r7, #24]
 80088bc:	69fa      	ldr	r2, [r7, #28]
 80088be:	e841 2300 	strex	r3, r2, [r1]
 80088c2:	617b      	str	r3, [r7, #20]
   return(result);
 80088c4:	697b      	ldr	r3, [r7, #20]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d1e5      	bne.n	8008896 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2220      	movs	r2, #32
 80088ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2200      	movs	r2, #0
 80088d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80088da:	2303      	movs	r3, #3
 80088dc:	e012      	b.n	8008904 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2220      	movs	r2, #32
 80088e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2220      	movs	r2, #32
 80088ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2200      	movs	r2, #0
 80088f2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2200      	movs	r2, #0
 80088f8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2200      	movs	r2, #0
 80088fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008902:	2300      	movs	r3, #0
}
 8008904:	4618      	mov	r0, r3
 8008906:	3758      	adds	r7, #88	@ 0x58
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}

0800890c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b084      	sub	sp, #16
 8008910:	af00      	add	r7, sp, #0
 8008912:	60f8      	str	r0, [r7, #12]
 8008914:	60b9      	str	r1, [r7, #8]
 8008916:	603b      	str	r3, [r7, #0]
 8008918:	4613      	mov	r3, r2
 800891a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800891c:	e04f      	b.n	80089be <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800891e:	69bb      	ldr	r3, [r7, #24]
 8008920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008924:	d04b      	beq.n	80089be <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008926:	f7f9 fb2f 	bl	8001f88 <HAL_GetTick>
 800892a:	4602      	mov	r2, r0
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	1ad3      	subs	r3, r2, r3
 8008930:	69ba      	ldr	r2, [r7, #24]
 8008932:	429a      	cmp	r2, r3
 8008934:	d302      	bcc.n	800893c <UART_WaitOnFlagUntilTimeout+0x30>
 8008936:	69bb      	ldr	r3, [r7, #24]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d101      	bne.n	8008940 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800893c:	2303      	movs	r3, #3
 800893e:	e04e      	b.n	80089de <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f003 0304 	and.w	r3, r3, #4
 800894a:	2b00      	cmp	r3, #0
 800894c:	d037      	beq.n	80089be <UART_WaitOnFlagUntilTimeout+0xb2>
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	2b80      	cmp	r3, #128	@ 0x80
 8008952:	d034      	beq.n	80089be <UART_WaitOnFlagUntilTimeout+0xb2>
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	2b40      	cmp	r3, #64	@ 0x40
 8008958:	d031      	beq.n	80089be <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	69db      	ldr	r3, [r3, #28]
 8008960:	f003 0308 	and.w	r3, r3, #8
 8008964:	2b08      	cmp	r3, #8
 8008966:	d110      	bne.n	800898a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	2208      	movs	r2, #8
 800896e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008970:	68f8      	ldr	r0, [r7, #12]
 8008972:	f000 f839 	bl	80089e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	2208      	movs	r2, #8
 800897a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	2200      	movs	r2, #0
 8008982:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008986:	2301      	movs	r3, #1
 8008988:	e029      	b.n	80089de <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	69db      	ldr	r3, [r3, #28]
 8008990:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008994:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008998:	d111      	bne.n	80089be <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80089a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80089a4:	68f8      	ldr	r0, [r7, #12]
 80089a6:	f000 f81f 	bl	80089e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	2220      	movs	r2, #32
 80089ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	2200      	movs	r2, #0
 80089b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80089ba:	2303      	movs	r3, #3
 80089bc:	e00f      	b.n	80089de <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	69da      	ldr	r2, [r3, #28]
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	4013      	ands	r3, r2
 80089c8:	68ba      	ldr	r2, [r7, #8]
 80089ca:	429a      	cmp	r2, r3
 80089cc:	bf0c      	ite	eq
 80089ce:	2301      	moveq	r3, #1
 80089d0:	2300      	movne	r3, #0
 80089d2:	b2db      	uxtb	r3, r3
 80089d4:	461a      	mov	r2, r3
 80089d6:	79fb      	ldrb	r3, [r7, #7]
 80089d8:	429a      	cmp	r2, r3
 80089da:	d0a0      	beq.n	800891e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80089dc:	2300      	movs	r3, #0
}
 80089de:	4618      	mov	r0, r3
 80089e0:	3710      	adds	r7, #16
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}
	...

080089e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80089e8:	b480      	push	{r7}
 80089ea:	b095      	sub	sp, #84	@ 0x54
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089f8:	e853 3f00 	ldrex	r3, [r3]
 80089fc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80089fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a00:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008a04:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	461a      	mov	r2, r3
 8008a0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a0e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008a10:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a12:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008a14:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008a16:	e841 2300 	strex	r3, r2, [r1]
 8008a1a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008a1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d1e6      	bne.n	80089f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	3308      	adds	r3, #8
 8008a28:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a2a:	6a3b      	ldr	r3, [r7, #32]
 8008a2c:	e853 3f00 	ldrex	r3, [r3]
 8008a30:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a32:	69fa      	ldr	r2, [r7, #28]
 8008a34:	4b1e      	ldr	r3, [pc, #120]	@ (8008ab0 <UART_EndRxTransfer+0xc8>)
 8008a36:	4013      	ands	r3, r2
 8008a38:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	3308      	adds	r3, #8
 8008a40:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008a42:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008a44:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a46:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008a48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008a4a:	e841 2300 	strex	r3, r2, [r1]
 8008a4e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d1e5      	bne.n	8008a22 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008a5a:	2b01      	cmp	r3, #1
 8008a5c:	d118      	bne.n	8008a90 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	e853 3f00 	ldrex	r3, [r3]
 8008a6a:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	f023 0310 	bic.w	r3, r3, #16
 8008a72:	647b      	str	r3, [r7, #68]	@ 0x44
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	461a      	mov	r2, r3
 8008a7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008a7c:	61bb      	str	r3, [r7, #24]
 8008a7e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a80:	6979      	ldr	r1, [r7, #20]
 8008a82:	69ba      	ldr	r2, [r7, #24]
 8008a84:	e841 2300 	strex	r3, r2, [r1]
 8008a88:	613b      	str	r3, [r7, #16]
   return(result);
 8008a8a:	693b      	ldr	r3, [r7, #16]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d1e6      	bne.n	8008a5e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2220      	movs	r2, #32
 8008a94:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008aa4:	bf00      	nop
 8008aa6:	3754      	adds	r7, #84	@ 0x54
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aae:	4770      	bx	lr
 8008ab0:	effffffe 	.word	0xeffffffe

08008ab4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b085      	sub	sp, #20
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008ac2:	2b01      	cmp	r3, #1
 8008ac4:	d101      	bne.n	8008aca <HAL_UARTEx_DisableFifoMode+0x16>
 8008ac6:	2302      	movs	r3, #2
 8008ac8:	e027      	b.n	8008b1a <HAL_UARTEx_DisableFifoMode+0x66>
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2201      	movs	r2, #1
 8008ace:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2224      	movs	r2, #36	@ 0x24
 8008ad6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	681a      	ldr	r2, [r3, #0]
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f022 0201 	bic.w	r2, r2, #1
 8008af0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008af8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2200      	movs	r2, #0
 8008afe:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	68fa      	ldr	r2, [r7, #12]
 8008b06:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2220      	movs	r2, #32
 8008b0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2200      	movs	r2, #0
 8008b14:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008b18:	2300      	movs	r3, #0
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	3714      	adds	r7, #20
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b24:	4770      	bx	lr

08008b26 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008b26:	b580      	push	{r7, lr}
 8008b28:	b084      	sub	sp, #16
 8008b2a:	af00      	add	r7, sp, #0
 8008b2c:	6078      	str	r0, [r7, #4]
 8008b2e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008b36:	2b01      	cmp	r3, #1
 8008b38:	d101      	bne.n	8008b3e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008b3a:	2302      	movs	r3, #2
 8008b3c:	e02d      	b.n	8008b9a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2201      	movs	r2, #1
 8008b42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2224      	movs	r2, #36	@ 0x24
 8008b4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	681a      	ldr	r2, [r3, #0]
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	f022 0201 	bic.w	r2, r2, #1
 8008b64:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	689b      	ldr	r3, [r3, #8]
 8008b6c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	683a      	ldr	r2, [r7, #0]
 8008b76:	430a      	orrs	r2, r1
 8008b78:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f000 f850 	bl	8008c20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	68fa      	ldr	r2, [r7, #12]
 8008b86:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2220      	movs	r2, #32
 8008b8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2200      	movs	r2, #0
 8008b94:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008b98:	2300      	movs	r3, #0
}
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	3710      	adds	r7, #16
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}

08008ba2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008ba2:	b580      	push	{r7, lr}
 8008ba4:	b084      	sub	sp, #16
 8008ba6:	af00      	add	r7, sp, #0
 8008ba8:	6078      	str	r0, [r7, #4]
 8008baa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008bb2:	2b01      	cmp	r3, #1
 8008bb4:	d101      	bne.n	8008bba <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008bb6:	2302      	movs	r3, #2
 8008bb8:	e02d      	b.n	8008c16 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2201      	movs	r2, #1
 8008bbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2224      	movs	r2, #36	@ 0x24
 8008bc6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	681a      	ldr	r2, [r3, #0]
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f022 0201 	bic.w	r2, r2, #1
 8008be0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	689b      	ldr	r3, [r3, #8]
 8008be8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	683a      	ldr	r2, [r7, #0]
 8008bf2:	430a      	orrs	r2, r1
 8008bf4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f000 f812 	bl	8008c20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	68fa      	ldr	r2, [r7, #12]
 8008c02:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2220      	movs	r2, #32
 8008c08:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2200      	movs	r2, #0
 8008c10:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008c14:	2300      	movs	r3, #0
}
 8008c16:	4618      	mov	r0, r3
 8008c18:	3710      	adds	r7, #16
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}
	...

08008c20 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008c20:	b480      	push	{r7}
 8008c22:	b085      	sub	sp, #20
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d108      	bne.n	8008c42 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2201      	movs	r2, #1
 8008c34:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2201      	movs	r2, #1
 8008c3c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008c40:	e031      	b.n	8008ca6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008c42:	2310      	movs	r3, #16
 8008c44:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008c46:	2310      	movs	r3, #16
 8008c48:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	689b      	ldr	r3, [r3, #8]
 8008c50:	0e5b      	lsrs	r3, r3, #25
 8008c52:	b2db      	uxtb	r3, r3
 8008c54:	f003 0307 	and.w	r3, r3, #7
 8008c58:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	689b      	ldr	r3, [r3, #8]
 8008c60:	0f5b      	lsrs	r3, r3, #29
 8008c62:	b2db      	uxtb	r3, r3
 8008c64:	f003 0307 	and.w	r3, r3, #7
 8008c68:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008c6a:	7bbb      	ldrb	r3, [r7, #14]
 8008c6c:	7b3a      	ldrb	r2, [r7, #12]
 8008c6e:	4911      	ldr	r1, [pc, #68]	@ (8008cb4 <UARTEx_SetNbDataToProcess+0x94>)
 8008c70:	5c8a      	ldrb	r2, [r1, r2]
 8008c72:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008c76:	7b3a      	ldrb	r2, [r7, #12]
 8008c78:	490f      	ldr	r1, [pc, #60]	@ (8008cb8 <UARTEx_SetNbDataToProcess+0x98>)
 8008c7a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008c7c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008c80:	b29a      	uxth	r2, r3
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008c88:	7bfb      	ldrb	r3, [r7, #15]
 8008c8a:	7b7a      	ldrb	r2, [r7, #13]
 8008c8c:	4909      	ldr	r1, [pc, #36]	@ (8008cb4 <UARTEx_SetNbDataToProcess+0x94>)
 8008c8e:	5c8a      	ldrb	r2, [r1, r2]
 8008c90:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008c94:	7b7a      	ldrb	r2, [r7, #13]
 8008c96:	4908      	ldr	r1, [pc, #32]	@ (8008cb8 <UARTEx_SetNbDataToProcess+0x98>)
 8008c98:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008c9a:	fb93 f3f2 	sdiv	r3, r3, r2
 8008c9e:	b29a      	uxth	r2, r3
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008ca6:	bf00      	nop
 8008ca8:	3714      	adds	r7, #20
 8008caa:	46bd      	mov	sp, r7
 8008cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb0:	4770      	bx	lr
 8008cb2:	bf00      	nop
 8008cb4:	0800d45c 	.word	0x0800d45c
 8008cb8:	0800d464 	.word	0x0800d464

08008cbc <__cvt>:
 8008cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008cbe:	ed2d 8b02 	vpush	{d8}
 8008cc2:	eeb0 8b40 	vmov.f64	d8, d0
 8008cc6:	b085      	sub	sp, #20
 8008cc8:	4617      	mov	r7, r2
 8008cca:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8008ccc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008cce:	ee18 2a90 	vmov	r2, s17
 8008cd2:	f025 0520 	bic.w	r5, r5, #32
 8008cd6:	2a00      	cmp	r2, #0
 8008cd8:	bfb6      	itet	lt
 8008cda:	222d      	movlt	r2, #45	@ 0x2d
 8008cdc:	2200      	movge	r2, #0
 8008cde:	eeb1 8b40 	vneglt.f64	d8, d0
 8008ce2:	2d46      	cmp	r5, #70	@ 0x46
 8008ce4:	460c      	mov	r4, r1
 8008ce6:	701a      	strb	r2, [r3, #0]
 8008ce8:	d004      	beq.n	8008cf4 <__cvt+0x38>
 8008cea:	2d45      	cmp	r5, #69	@ 0x45
 8008cec:	d100      	bne.n	8008cf0 <__cvt+0x34>
 8008cee:	3401      	adds	r4, #1
 8008cf0:	2102      	movs	r1, #2
 8008cf2:	e000      	b.n	8008cf6 <__cvt+0x3a>
 8008cf4:	2103      	movs	r1, #3
 8008cf6:	ab03      	add	r3, sp, #12
 8008cf8:	9301      	str	r3, [sp, #4]
 8008cfa:	ab02      	add	r3, sp, #8
 8008cfc:	9300      	str	r3, [sp, #0]
 8008cfe:	4622      	mov	r2, r4
 8008d00:	4633      	mov	r3, r6
 8008d02:	eeb0 0b48 	vmov.f64	d0, d8
 8008d06:	f001 f883 	bl	8009e10 <_dtoa_r>
 8008d0a:	2d47      	cmp	r5, #71	@ 0x47
 8008d0c:	d114      	bne.n	8008d38 <__cvt+0x7c>
 8008d0e:	07fb      	lsls	r3, r7, #31
 8008d10:	d50a      	bpl.n	8008d28 <__cvt+0x6c>
 8008d12:	1902      	adds	r2, r0, r4
 8008d14:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d1c:	bf08      	it	eq
 8008d1e:	9203      	streq	r2, [sp, #12]
 8008d20:	2130      	movs	r1, #48	@ 0x30
 8008d22:	9b03      	ldr	r3, [sp, #12]
 8008d24:	4293      	cmp	r3, r2
 8008d26:	d319      	bcc.n	8008d5c <__cvt+0xa0>
 8008d28:	9b03      	ldr	r3, [sp, #12]
 8008d2a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008d2c:	1a1b      	subs	r3, r3, r0
 8008d2e:	6013      	str	r3, [r2, #0]
 8008d30:	b005      	add	sp, #20
 8008d32:	ecbd 8b02 	vpop	{d8}
 8008d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d38:	2d46      	cmp	r5, #70	@ 0x46
 8008d3a:	eb00 0204 	add.w	r2, r0, r4
 8008d3e:	d1e9      	bne.n	8008d14 <__cvt+0x58>
 8008d40:	7803      	ldrb	r3, [r0, #0]
 8008d42:	2b30      	cmp	r3, #48	@ 0x30
 8008d44:	d107      	bne.n	8008d56 <__cvt+0x9a>
 8008d46:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d4e:	bf1c      	itt	ne
 8008d50:	f1c4 0401 	rsbne	r4, r4, #1
 8008d54:	6034      	strne	r4, [r6, #0]
 8008d56:	6833      	ldr	r3, [r6, #0]
 8008d58:	441a      	add	r2, r3
 8008d5a:	e7db      	b.n	8008d14 <__cvt+0x58>
 8008d5c:	1c5c      	adds	r4, r3, #1
 8008d5e:	9403      	str	r4, [sp, #12]
 8008d60:	7019      	strb	r1, [r3, #0]
 8008d62:	e7de      	b.n	8008d22 <__cvt+0x66>

08008d64 <__exponent>:
 8008d64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008d66:	2900      	cmp	r1, #0
 8008d68:	bfba      	itte	lt
 8008d6a:	4249      	neglt	r1, r1
 8008d6c:	232d      	movlt	r3, #45	@ 0x2d
 8008d6e:	232b      	movge	r3, #43	@ 0x2b
 8008d70:	2909      	cmp	r1, #9
 8008d72:	7002      	strb	r2, [r0, #0]
 8008d74:	7043      	strb	r3, [r0, #1]
 8008d76:	dd29      	ble.n	8008dcc <__exponent+0x68>
 8008d78:	f10d 0307 	add.w	r3, sp, #7
 8008d7c:	461d      	mov	r5, r3
 8008d7e:	270a      	movs	r7, #10
 8008d80:	461a      	mov	r2, r3
 8008d82:	fbb1 f6f7 	udiv	r6, r1, r7
 8008d86:	fb07 1416 	mls	r4, r7, r6, r1
 8008d8a:	3430      	adds	r4, #48	@ 0x30
 8008d8c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008d90:	460c      	mov	r4, r1
 8008d92:	2c63      	cmp	r4, #99	@ 0x63
 8008d94:	f103 33ff 	add.w	r3, r3, #4294967295
 8008d98:	4631      	mov	r1, r6
 8008d9a:	dcf1      	bgt.n	8008d80 <__exponent+0x1c>
 8008d9c:	3130      	adds	r1, #48	@ 0x30
 8008d9e:	1e94      	subs	r4, r2, #2
 8008da0:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008da4:	1c41      	adds	r1, r0, #1
 8008da6:	4623      	mov	r3, r4
 8008da8:	42ab      	cmp	r3, r5
 8008daa:	d30a      	bcc.n	8008dc2 <__exponent+0x5e>
 8008dac:	f10d 0309 	add.w	r3, sp, #9
 8008db0:	1a9b      	subs	r3, r3, r2
 8008db2:	42ac      	cmp	r4, r5
 8008db4:	bf88      	it	hi
 8008db6:	2300      	movhi	r3, #0
 8008db8:	3302      	adds	r3, #2
 8008dba:	4403      	add	r3, r0
 8008dbc:	1a18      	subs	r0, r3, r0
 8008dbe:	b003      	add	sp, #12
 8008dc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008dc2:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008dc6:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008dca:	e7ed      	b.n	8008da8 <__exponent+0x44>
 8008dcc:	2330      	movs	r3, #48	@ 0x30
 8008dce:	3130      	adds	r1, #48	@ 0x30
 8008dd0:	7083      	strb	r3, [r0, #2]
 8008dd2:	70c1      	strb	r1, [r0, #3]
 8008dd4:	1d03      	adds	r3, r0, #4
 8008dd6:	e7f1      	b.n	8008dbc <__exponent+0x58>

08008dd8 <_printf_float>:
 8008dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ddc:	b08d      	sub	sp, #52	@ 0x34
 8008dde:	460c      	mov	r4, r1
 8008de0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008de4:	4616      	mov	r6, r2
 8008de6:	461f      	mov	r7, r3
 8008de8:	4605      	mov	r5, r0
 8008dea:	f000 ff0b 	bl	8009c04 <_localeconv_r>
 8008dee:	f8d0 b000 	ldr.w	fp, [r0]
 8008df2:	4658      	mov	r0, fp
 8008df4:	f7f7 facc 	bl	8000390 <strlen>
 8008df8:	2300      	movs	r3, #0
 8008dfa:	930a      	str	r3, [sp, #40]	@ 0x28
 8008dfc:	f8d8 3000 	ldr.w	r3, [r8]
 8008e00:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008e04:	6822      	ldr	r2, [r4, #0]
 8008e06:	9005      	str	r0, [sp, #20]
 8008e08:	3307      	adds	r3, #7
 8008e0a:	f023 0307 	bic.w	r3, r3, #7
 8008e0e:	f103 0108 	add.w	r1, r3, #8
 8008e12:	f8c8 1000 	str.w	r1, [r8]
 8008e16:	ed93 0b00 	vldr	d0, [r3]
 8008e1a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8009078 <_printf_float+0x2a0>
 8008e1e:	eeb0 7bc0 	vabs.f64	d7, d0
 8008e22:	eeb4 7b46 	vcmp.f64	d7, d6
 8008e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e2a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8008e2e:	dd24      	ble.n	8008e7a <_printf_float+0xa2>
 8008e30:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8008e34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e38:	d502      	bpl.n	8008e40 <_printf_float+0x68>
 8008e3a:	232d      	movs	r3, #45	@ 0x2d
 8008e3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008e40:	498f      	ldr	r1, [pc, #572]	@ (8009080 <_printf_float+0x2a8>)
 8008e42:	4b90      	ldr	r3, [pc, #576]	@ (8009084 <_printf_float+0x2ac>)
 8008e44:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8008e48:	bf94      	ite	ls
 8008e4a:	4688      	movls	r8, r1
 8008e4c:	4698      	movhi	r8, r3
 8008e4e:	f022 0204 	bic.w	r2, r2, #4
 8008e52:	2303      	movs	r3, #3
 8008e54:	6123      	str	r3, [r4, #16]
 8008e56:	6022      	str	r2, [r4, #0]
 8008e58:	f04f 0a00 	mov.w	sl, #0
 8008e5c:	9700      	str	r7, [sp, #0]
 8008e5e:	4633      	mov	r3, r6
 8008e60:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008e62:	4621      	mov	r1, r4
 8008e64:	4628      	mov	r0, r5
 8008e66:	f000 f9d1 	bl	800920c <_printf_common>
 8008e6a:	3001      	adds	r0, #1
 8008e6c:	f040 8089 	bne.w	8008f82 <_printf_float+0x1aa>
 8008e70:	f04f 30ff 	mov.w	r0, #4294967295
 8008e74:	b00d      	add	sp, #52	@ 0x34
 8008e76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e7a:	eeb4 0b40 	vcmp.f64	d0, d0
 8008e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e82:	d709      	bvc.n	8008e98 <_printf_float+0xc0>
 8008e84:	ee10 3a90 	vmov	r3, s1
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	bfbc      	itt	lt
 8008e8c:	232d      	movlt	r3, #45	@ 0x2d
 8008e8e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008e92:	497d      	ldr	r1, [pc, #500]	@ (8009088 <_printf_float+0x2b0>)
 8008e94:	4b7d      	ldr	r3, [pc, #500]	@ (800908c <_printf_float+0x2b4>)
 8008e96:	e7d5      	b.n	8008e44 <_printf_float+0x6c>
 8008e98:	6863      	ldr	r3, [r4, #4]
 8008e9a:	1c59      	adds	r1, r3, #1
 8008e9c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8008ea0:	d139      	bne.n	8008f16 <_printf_float+0x13e>
 8008ea2:	2306      	movs	r3, #6
 8008ea4:	6063      	str	r3, [r4, #4]
 8008ea6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008eaa:	2300      	movs	r3, #0
 8008eac:	6022      	str	r2, [r4, #0]
 8008eae:	9303      	str	r3, [sp, #12]
 8008eb0:	ab0a      	add	r3, sp, #40	@ 0x28
 8008eb2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8008eb6:	ab09      	add	r3, sp, #36	@ 0x24
 8008eb8:	9300      	str	r3, [sp, #0]
 8008eba:	6861      	ldr	r1, [r4, #4]
 8008ebc:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008ec0:	4628      	mov	r0, r5
 8008ec2:	f7ff fefb 	bl	8008cbc <__cvt>
 8008ec6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008eca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008ecc:	4680      	mov	r8, r0
 8008ece:	d129      	bne.n	8008f24 <_printf_float+0x14c>
 8008ed0:	1cc8      	adds	r0, r1, #3
 8008ed2:	db02      	blt.n	8008eda <_printf_float+0x102>
 8008ed4:	6863      	ldr	r3, [r4, #4]
 8008ed6:	4299      	cmp	r1, r3
 8008ed8:	dd41      	ble.n	8008f5e <_printf_float+0x186>
 8008eda:	f1a9 0902 	sub.w	r9, r9, #2
 8008ede:	fa5f f989 	uxtb.w	r9, r9
 8008ee2:	3901      	subs	r1, #1
 8008ee4:	464a      	mov	r2, r9
 8008ee6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008eea:	9109      	str	r1, [sp, #36]	@ 0x24
 8008eec:	f7ff ff3a 	bl	8008d64 <__exponent>
 8008ef0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008ef2:	1813      	adds	r3, r2, r0
 8008ef4:	2a01      	cmp	r2, #1
 8008ef6:	4682      	mov	sl, r0
 8008ef8:	6123      	str	r3, [r4, #16]
 8008efa:	dc02      	bgt.n	8008f02 <_printf_float+0x12a>
 8008efc:	6822      	ldr	r2, [r4, #0]
 8008efe:	07d2      	lsls	r2, r2, #31
 8008f00:	d501      	bpl.n	8008f06 <_printf_float+0x12e>
 8008f02:	3301      	adds	r3, #1
 8008f04:	6123      	str	r3, [r4, #16]
 8008f06:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d0a6      	beq.n	8008e5c <_printf_float+0x84>
 8008f0e:	232d      	movs	r3, #45	@ 0x2d
 8008f10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008f14:	e7a2      	b.n	8008e5c <_printf_float+0x84>
 8008f16:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008f1a:	d1c4      	bne.n	8008ea6 <_printf_float+0xce>
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d1c2      	bne.n	8008ea6 <_printf_float+0xce>
 8008f20:	2301      	movs	r3, #1
 8008f22:	e7bf      	b.n	8008ea4 <_printf_float+0xcc>
 8008f24:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8008f28:	d9db      	bls.n	8008ee2 <_printf_float+0x10a>
 8008f2a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8008f2e:	d118      	bne.n	8008f62 <_printf_float+0x18a>
 8008f30:	2900      	cmp	r1, #0
 8008f32:	6863      	ldr	r3, [r4, #4]
 8008f34:	dd0b      	ble.n	8008f4e <_printf_float+0x176>
 8008f36:	6121      	str	r1, [r4, #16]
 8008f38:	b913      	cbnz	r3, 8008f40 <_printf_float+0x168>
 8008f3a:	6822      	ldr	r2, [r4, #0]
 8008f3c:	07d0      	lsls	r0, r2, #31
 8008f3e:	d502      	bpl.n	8008f46 <_printf_float+0x16e>
 8008f40:	3301      	adds	r3, #1
 8008f42:	440b      	add	r3, r1
 8008f44:	6123      	str	r3, [r4, #16]
 8008f46:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008f48:	f04f 0a00 	mov.w	sl, #0
 8008f4c:	e7db      	b.n	8008f06 <_printf_float+0x12e>
 8008f4e:	b913      	cbnz	r3, 8008f56 <_printf_float+0x17e>
 8008f50:	6822      	ldr	r2, [r4, #0]
 8008f52:	07d2      	lsls	r2, r2, #31
 8008f54:	d501      	bpl.n	8008f5a <_printf_float+0x182>
 8008f56:	3302      	adds	r3, #2
 8008f58:	e7f4      	b.n	8008f44 <_printf_float+0x16c>
 8008f5a:	2301      	movs	r3, #1
 8008f5c:	e7f2      	b.n	8008f44 <_printf_float+0x16c>
 8008f5e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8008f62:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f64:	4299      	cmp	r1, r3
 8008f66:	db05      	blt.n	8008f74 <_printf_float+0x19c>
 8008f68:	6823      	ldr	r3, [r4, #0]
 8008f6a:	6121      	str	r1, [r4, #16]
 8008f6c:	07d8      	lsls	r0, r3, #31
 8008f6e:	d5ea      	bpl.n	8008f46 <_printf_float+0x16e>
 8008f70:	1c4b      	adds	r3, r1, #1
 8008f72:	e7e7      	b.n	8008f44 <_printf_float+0x16c>
 8008f74:	2900      	cmp	r1, #0
 8008f76:	bfd4      	ite	le
 8008f78:	f1c1 0202 	rsble	r2, r1, #2
 8008f7c:	2201      	movgt	r2, #1
 8008f7e:	4413      	add	r3, r2
 8008f80:	e7e0      	b.n	8008f44 <_printf_float+0x16c>
 8008f82:	6823      	ldr	r3, [r4, #0]
 8008f84:	055a      	lsls	r2, r3, #21
 8008f86:	d407      	bmi.n	8008f98 <_printf_float+0x1c0>
 8008f88:	6923      	ldr	r3, [r4, #16]
 8008f8a:	4642      	mov	r2, r8
 8008f8c:	4631      	mov	r1, r6
 8008f8e:	4628      	mov	r0, r5
 8008f90:	47b8      	blx	r7
 8008f92:	3001      	adds	r0, #1
 8008f94:	d12a      	bne.n	8008fec <_printf_float+0x214>
 8008f96:	e76b      	b.n	8008e70 <_printf_float+0x98>
 8008f98:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8008f9c:	f240 80e0 	bls.w	8009160 <_printf_float+0x388>
 8008fa0:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8008fa4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008fa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fac:	d133      	bne.n	8009016 <_printf_float+0x23e>
 8008fae:	4a38      	ldr	r2, [pc, #224]	@ (8009090 <_printf_float+0x2b8>)
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	4631      	mov	r1, r6
 8008fb4:	4628      	mov	r0, r5
 8008fb6:	47b8      	blx	r7
 8008fb8:	3001      	adds	r0, #1
 8008fba:	f43f af59 	beq.w	8008e70 <_printf_float+0x98>
 8008fbe:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008fc2:	4543      	cmp	r3, r8
 8008fc4:	db02      	blt.n	8008fcc <_printf_float+0x1f4>
 8008fc6:	6823      	ldr	r3, [r4, #0]
 8008fc8:	07d8      	lsls	r0, r3, #31
 8008fca:	d50f      	bpl.n	8008fec <_printf_float+0x214>
 8008fcc:	9b05      	ldr	r3, [sp, #20]
 8008fce:	465a      	mov	r2, fp
 8008fd0:	4631      	mov	r1, r6
 8008fd2:	4628      	mov	r0, r5
 8008fd4:	47b8      	blx	r7
 8008fd6:	3001      	adds	r0, #1
 8008fd8:	f43f af4a 	beq.w	8008e70 <_printf_float+0x98>
 8008fdc:	f04f 0900 	mov.w	r9, #0
 8008fe0:	f108 38ff 	add.w	r8, r8, #4294967295
 8008fe4:	f104 0a1a 	add.w	sl, r4, #26
 8008fe8:	45c8      	cmp	r8, r9
 8008fea:	dc09      	bgt.n	8009000 <_printf_float+0x228>
 8008fec:	6823      	ldr	r3, [r4, #0]
 8008fee:	079b      	lsls	r3, r3, #30
 8008ff0:	f100 8107 	bmi.w	8009202 <_printf_float+0x42a>
 8008ff4:	68e0      	ldr	r0, [r4, #12]
 8008ff6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008ff8:	4298      	cmp	r0, r3
 8008ffa:	bfb8      	it	lt
 8008ffc:	4618      	movlt	r0, r3
 8008ffe:	e739      	b.n	8008e74 <_printf_float+0x9c>
 8009000:	2301      	movs	r3, #1
 8009002:	4652      	mov	r2, sl
 8009004:	4631      	mov	r1, r6
 8009006:	4628      	mov	r0, r5
 8009008:	47b8      	blx	r7
 800900a:	3001      	adds	r0, #1
 800900c:	f43f af30 	beq.w	8008e70 <_printf_float+0x98>
 8009010:	f109 0901 	add.w	r9, r9, #1
 8009014:	e7e8      	b.n	8008fe8 <_printf_float+0x210>
 8009016:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009018:	2b00      	cmp	r3, #0
 800901a:	dc3b      	bgt.n	8009094 <_printf_float+0x2bc>
 800901c:	4a1c      	ldr	r2, [pc, #112]	@ (8009090 <_printf_float+0x2b8>)
 800901e:	2301      	movs	r3, #1
 8009020:	4631      	mov	r1, r6
 8009022:	4628      	mov	r0, r5
 8009024:	47b8      	blx	r7
 8009026:	3001      	adds	r0, #1
 8009028:	f43f af22 	beq.w	8008e70 <_printf_float+0x98>
 800902c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009030:	ea59 0303 	orrs.w	r3, r9, r3
 8009034:	d102      	bne.n	800903c <_printf_float+0x264>
 8009036:	6823      	ldr	r3, [r4, #0]
 8009038:	07d9      	lsls	r1, r3, #31
 800903a:	d5d7      	bpl.n	8008fec <_printf_float+0x214>
 800903c:	9b05      	ldr	r3, [sp, #20]
 800903e:	465a      	mov	r2, fp
 8009040:	4631      	mov	r1, r6
 8009042:	4628      	mov	r0, r5
 8009044:	47b8      	blx	r7
 8009046:	3001      	adds	r0, #1
 8009048:	f43f af12 	beq.w	8008e70 <_printf_float+0x98>
 800904c:	f04f 0a00 	mov.w	sl, #0
 8009050:	f104 0b1a 	add.w	fp, r4, #26
 8009054:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009056:	425b      	negs	r3, r3
 8009058:	4553      	cmp	r3, sl
 800905a:	dc01      	bgt.n	8009060 <_printf_float+0x288>
 800905c:	464b      	mov	r3, r9
 800905e:	e794      	b.n	8008f8a <_printf_float+0x1b2>
 8009060:	2301      	movs	r3, #1
 8009062:	465a      	mov	r2, fp
 8009064:	4631      	mov	r1, r6
 8009066:	4628      	mov	r0, r5
 8009068:	47b8      	blx	r7
 800906a:	3001      	adds	r0, #1
 800906c:	f43f af00 	beq.w	8008e70 <_printf_float+0x98>
 8009070:	f10a 0a01 	add.w	sl, sl, #1
 8009074:	e7ee      	b.n	8009054 <_printf_float+0x27c>
 8009076:	bf00      	nop
 8009078:	ffffffff 	.word	0xffffffff
 800907c:	7fefffff 	.word	0x7fefffff
 8009080:	0800d46c 	.word	0x0800d46c
 8009084:	0800d470 	.word	0x0800d470
 8009088:	0800d474 	.word	0x0800d474
 800908c:	0800d478 	.word	0x0800d478
 8009090:	0800d47c 	.word	0x0800d47c
 8009094:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009096:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800909a:	4553      	cmp	r3, sl
 800909c:	bfa8      	it	ge
 800909e:	4653      	movge	r3, sl
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	4699      	mov	r9, r3
 80090a4:	dc37      	bgt.n	8009116 <_printf_float+0x33e>
 80090a6:	2300      	movs	r3, #0
 80090a8:	9307      	str	r3, [sp, #28]
 80090aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80090ae:	f104 021a 	add.w	r2, r4, #26
 80090b2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80090b4:	9907      	ldr	r1, [sp, #28]
 80090b6:	9306      	str	r3, [sp, #24]
 80090b8:	eba3 0309 	sub.w	r3, r3, r9
 80090bc:	428b      	cmp	r3, r1
 80090be:	dc31      	bgt.n	8009124 <_printf_float+0x34c>
 80090c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090c2:	459a      	cmp	sl, r3
 80090c4:	dc3b      	bgt.n	800913e <_printf_float+0x366>
 80090c6:	6823      	ldr	r3, [r4, #0]
 80090c8:	07da      	lsls	r2, r3, #31
 80090ca:	d438      	bmi.n	800913e <_printf_float+0x366>
 80090cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090ce:	ebaa 0903 	sub.w	r9, sl, r3
 80090d2:	9b06      	ldr	r3, [sp, #24]
 80090d4:	ebaa 0303 	sub.w	r3, sl, r3
 80090d8:	4599      	cmp	r9, r3
 80090da:	bfa8      	it	ge
 80090dc:	4699      	movge	r9, r3
 80090de:	f1b9 0f00 	cmp.w	r9, #0
 80090e2:	dc34      	bgt.n	800914e <_printf_float+0x376>
 80090e4:	f04f 0800 	mov.w	r8, #0
 80090e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80090ec:	f104 0b1a 	add.w	fp, r4, #26
 80090f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090f2:	ebaa 0303 	sub.w	r3, sl, r3
 80090f6:	eba3 0309 	sub.w	r3, r3, r9
 80090fa:	4543      	cmp	r3, r8
 80090fc:	f77f af76 	ble.w	8008fec <_printf_float+0x214>
 8009100:	2301      	movs	r3, #1
 8009102:	465a      	mov	r2, fp
 8009104:	4631      	mov	r1, r6
 8009106:	4628      	mov	r0, r5
 8009108:	47b8      	blx	r7
 800910a:	3001      	adds	r0, #1
 800910c:	f43f aeb0 	beq.w	8008e70 <_printf_float+0x98>
 8009110:	f108 0801 	add.w	r8, r8, #1
 8009114:	e7ec      	b.n	80090f0 <_printf_float+0x318>
 8009116:	4642      	mov	r2, r8
 8009118:	4631      	mov	r1, r6
 800911a:	4628      	mov	r0, r5
 800911c:	47b8      	blx	r7
 800911e:	3001      	adds	r0, #1
 8009120:	d1c1      	bne.n	80090a6 <_printf_float+0x2ce>
 8009122:	e6a5      	b.n	8008e70 <_printf_float+0x98>
 8009124:	2301      	movs	r3, #1
 8009126:	4631      	mov	r1, r6
 8009128:	4628      	mov	r0, r5
 800912a:	9206      	str	r2, [sp, #24]
 800912c:	47b8      	blx	r7
 800912e:	3001      	adds	r0, #1
 8009130:	f43f ae9e 	beq.w	8008e70 <_printf_float+0x98>
 8009134:	9b07      	ldr	r3, [sp, #28]
 8009136:	9a06      	ldr	r2, [sp, #24]
 8009138:	3301      	adds	r3, #1
 800913a:	9307      	str	r3, [sp, #28]
 800913c:	e7b9      	b.n	80090b2 <_printf_float+0x2da>
 800913e:	9b05      	ldr	r3, [sp, #20]
 8009140:	465a      	mov	r2, fp
 8009142:	4631      	mov	r1, r6
 8009144:	4628      	mov	r0, r5
 8009146:	47b8      	blx	r7
 8009148:	3001      	adds	r0, #1
 800914a:	d1bf      	bne.n	80090cc <_printf_float+0x2f4>
 800914c:	e690      	b.n	8008e70 <_printf_float+0x98>
 800914e:	9a06      	ldr	r2, [sp, #24]
 8009150:	464b      	mov	r3, r9
 8009152:	4442      	add	r2, r8
 8009154:	4631      	mov	r1, r6
 8009156:	4628      	mov	r0, r5
 8009158:	47b8      	blx	r7
 800915a:	3001      	adds	r0, #1
 800915c:	d1c2      	bne.n	80090e4 <_printf_float+0x30c>
 800915e:	e687      	b.n	8008e70 <_printf_float+0x98>
 8009160:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8009164:	f1b9 0f01 	cmp.w	r9, #1
 8009168:	dc01      	bgt.n	800916e <_printf_float+0x396>
 800916a:	07db      	lsls	r3, r3, #31
 800916c:	d536      	bpl.n	80091dc <_printf_float+0x404>
 800916e:	2301      	movs	r3, #1
 8009170:	4642      	mov	r2, r8
 8009172:	4631      	mov	r1, r6
 8009174:	4628      	mov	r0, r5
 8009176:	47b8      	blx	r7
 8009178:	3001      	adds	r0, #1
 800917a:	f43f ae79 	beq.w	8008e70 <_printf_float+0x98>
 800917e:	9b05      	ldr	r3, [sp, #20]
 8009180:	465a      	mov	r2, fp
 8009182:	4631      	mov	r1, r6
 8009184:	4628      	mov	r0, r5
 8009186:	47b8      	blx	r7
 8009188:	3001      	adds	r0, #1
 800918a:	f43f ae71 	beq.w	8008e70 <_printf_float+0x98>
 800918e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8009192:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800919a:	f109 39ff 	add.w	r9, r9, #4294967295
 800919e:	d018      	beq.n	80091d2 <_printf_float+0x3fa>
 80091a0:	464b      	mov	r3, r9
 80091a2:	f108 0201 	add.w	r2, r8, #1
 80091a6:	4631      	mov	r1, r6
 80091a8:	4628      	mov	r0, r5
 80091aa:	47b8      	blx	r7
 80091ac:	3001      	adds	r0, #1
 80091ae:	d10c      	bne.n	80091ca <_printf_float+0x3f2>
 80091b0:	e65e      	b.n	8008e70 <_printf_float+0x98>
 80091b2:	2301      	movs	r3, #1
 80091b4:	465a      	mov	r2, fp
 80091b6:	4631      	mov	r1, r6
 80091b8:	4628      	mov	r0, r5
 80091ba:	47b8      	blx	r7
 80091bc:	3001      	adds	r0, #1
 80091be:	f43f ae57 	beq.w	8008e70 <_printf_float+0x98>
 80091c2:	f108 0801 	add.w	r8, r8, #1
 80091c6:	45c8      	cmp	r8, r9
 80091c8:	dbf3      	blt.n	80091b2 <_printf_float+0x3da>
 80091ca:	4653      	mov	r3, sl
 80091cc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80091d0:	e6dc      	b.n	8008f8c <_printf_float+0x1b4>
 80091d2:	f04f 0800 	mov.w	r8, #0
 80091d6:	f104 0b1a 	add.w	fp, r4, #26
 80091da:	e7f4      	b.n	80091c6 <_printf_float+0x3ee>
 80091dc:	2301      	movs	r3, #1
 80091de:	4642      	mov	r2, r8
 80091e0:	e7e1      	b.n	80091a6 <_printf_float+0x3ce>
 80091e2:	2301      	movs	r3, #1
 80091e4:	464a      	mov	r2, r9
 80091e6:	4631      	mov	r1, r6
 80091e8:	4628      	mov	r0, r5
 80091ea:	47b8      	blx	r7
 80091ec:	3001      	adds	r0, #1
 80091ee:	f43f ae3f 	beq.w	8008e70 <_printf_float+0x98>
 80091f2:	f108 0801 	add.w	r8, r8, #1
 80091f6:	68e3      	ldr	r3, [r4, #12]
 80091f8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80091fa:	1a5b      	subs	r3, r3, r1
 80091fc:	4543      	cmp	r3, r8
 80091fe:	dcf0      	bgt.n	80091e2 <_printf_float+0x40a>
 8009200:	e6f8      	b.n	8008ff4 <_printf_float+0x21c>
 8009202:	f04f 0800 	mov.w	r8, #0
 8009206:	f104 0919 	add.w	r9, r4, #25
 800920a:	e7f4      	b.n	80091f6 <_printf_float+0x41e>

0800920c <_printf_common>:
 800920c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009210:	4616      	mov	r6, r2
 8009212:	4698      	mov	r8, r3
 8009214:	688a      	ldr	r2, [r1, #8]
 8009216:	690b      	ldr	r3, [r1, #16]
 8009218:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800921c:	4293      	cmp	r3, r2
 800921e:	bfb8      	it	lt
 8009220:	4613      	movlt	r3, r2
 8009222:	6033      	str	r3, [r6, #0]
 8009224:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009228:	4607      	mov	r7, r0
 800922a:	460c      	mov	r4, r1
 800922c:	b10a      	cbz	r2, 8009232 <_printf_common+0x26>
 800922e:	3301      	adds	r3, #1
 8009230:	6033      	str	r3, [r6, #0]
 8009232:	6823      	ldr	r3, [r4, #0]
 8009234:	0699      	lsls	r1, r3, #26
 8009236:	bf42      	ittt	mi
 8009238:	6833      	ldrmi	r3, [r6, #0]
 800923a:	3302      	addmi	r3, #2
 800923c:	6033      	strmi	r3, [r6, #0]
 800923e:	6825      	ldr	r5, [r4, #0]
 8009240:	f015 0506 	ands.w	r5, r5, #6
 8009244:	d106      	bne.n	8009254 <_printf_common+0x48>
 8009246:	f104 0a19 	add.w	sl, r4, #25
 800924a:	68e3      	ldr	r3, [r4, #12]
 800924c:	6832      	ldr	r2, [r6, #0]
 800924e:	1a9b      	subs	r3, r3, r2
 8009250:	42ab      	cmp	r3, r5
 8009252:	dc26      	bgt.n	80092a2 <_printf_common+0x96>
 8009254:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009258:	6822      	ldr	r2, [r4, #0]
 800925a:	3b00      	subs	r3, #0
 800925c:	bf18      	it	ne
 800925e:	2301      	movne	r3, #1
 8009260:	0692      	lsls	r2, r2, #26
 8009262:	d42b      	bmi.n	80092bc <_printf_common+0xb0>
 8009264:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009268:	4641      	mov	r1, r8
 800926a:	4638      	mov	r0, r7
 800926c:	47c8      	blx	r9
 800926e:	3001      	adds	r0, #1
 8009270:	d01e      	beq.n	80092b0 <_printf_common+0xa4>
 8009272:	6823      	ldr	r3, [r4, #0]
 8009274:	6922      	ldr	r2, [r4, #16]
 8009276:	f003 0306 	and.w	r3, r3, #6
 800927a:	2b04      	cmp	r3, #4
 800927c:	bf02      	ittt	eq
 800927e:	68e5      	ldreq	r5, [r4, #12]
 8009280:	6833      	ldreq	r3, [r6, #0]
 8009282:	1aed      	subeq	r5, r5, r3
 8009284:	68a3      	ldr	r3, [r4, #8]
 8009286:	bf0c      	ite	eq
 8009288:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800928c:	2500      	movne	r5, #0
 800928e:	4293      	cmp	r3, r2
 8009290:	bfc4      	itt	gt
 8009292:	1a9b      	subgt	r3, r3, r2
 8009294:	18ed      	addgt	r5, r5, r3
 8009296:	2600      	movs	r6, #0
 8009298:	341a      	adds	r4, #26
 800929a:	42b5      	cmp	r5, r6
 800929c:	d11a      	bne.n	80092d4 <_printf_common+0xc8>
 800929e:	2000      	movs	r0, #0
 80092a0:	e008      	b.n	80092b4 <_printf_common+0xa8>
 80092a2:	2301      	movs	r3, #1
 80092a4:	4652      	mov	r2, sl
 80092a6:	4641      	mov	r1, r8
 80092a8:	4638      	mov	r0, r7
 80092aa:	47c8      	blx	r9
 80092ac:	3001      	adds	r0, #1
 80092ae:	d103      	bne.n	80092b8 <_printf_common+0xac>
 80092b0:	f04f 30ff 	mov.w	r0, #4294967295
 80092b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092b8:	3501      	adds	r5, #1
 80092ba:	e7c6      	b.n	800924a <_printf_common+0x3e>
 80092bc:	18e1      	adds	r1, r4, r3
 80092be:	1c5a      	adds	r2, r3, #1
 80092c0:	2030      	movs	r0, #48	@ 0x30
 80092c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80092c6:	4422      	add	r2, r4
 80092c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80092cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80092d0:	3302      	adds	r3, #2
 80092d2:	e7c7      	b.n	8009264 <_printf_common+0x58>
 80092d4:	2301      	movs	r3, #1
 80092d6:	4622      	mov	r2, r4
 80092d8:	4641      	mov	r1, r8
 80092da:	4638      	mov	r0, r7
 80092dc:	47c8      	blx	r9
 80092de:	3001      	adds	r0, #1
 80092e0:	d0e6      	beq.n	80092b0 <_printf_common+0xa4>
 80092e2:	3601      	adds	r6, #1
 80092e4:	e7d9      	b.n	800929a <_printf_common+0x8e>
	...

080092e8 <_printf_i>:
 80092e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80092ec:	7e0f      	ldrb	r7, [r1, #24]
 80092ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80092f0:	2f78      	cmp	r7, #120	@ 0x78
 80092f2:	4691      	mov	r9, r2
 80092f4:	4680      	mov	r8, r0
 80092f6:	460c      	mov	r4, r1
 80092f8:	469a      	mov	sl, r3
 80092fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80092fe:	d807      	bhi.n	8009310 <_printf_i+0x28>
 8009300:	2f62      	cmp	r7, #98	@ 0x62
 8009302:	d80a      	bhi.n	800931a <_printf_i+0x32>
 8009304:	2f00      	cmp	r7, #0
 8009306:	f000 80d2 	beq.w	80094ae <_printf_i+0x1c6>
 800930a:	2f58      	cmp	r7, #88	@ 0x58
 800930c:	f000 80b9 	beq.w	8009482 <_printf_i+0x19a>
 8009310:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009314:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009318:	e03a      	b.n	8009390 <_printf_i+0xa8>
 800931a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800931e:	2b15      	cmp	r3, #21
 8009320:	d8f6      	bhi.n	8009310 <_printf_i+0x28>
 8009322:	a101      	add	r1, pc, #4	@ (adr r1, 8009328 <_printf_i+0x40>)
 8009324:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009328:	08009381 	.word	0x08009381
 800932c:	08009395 	.word	0x08009395
 8009330:	08009311 	.word	0x08009311
 8009334:	08009311 	.word	0x08009311
 8009338:	08009311 	.word	0x08009311
 800933c:	08009311 	.word	0x08009311
 8009340:	08009395 	.word	0x08009395
 8009344:	08009311 	.word	0x08009311
 8009348:	08009311 	.word	0x08009311
 800934c:	08009311 	.word	0x08009311
 8009350:	08009311 	.word	0x08009311
 8009354:	08009495 	.word	0x08009495
 8009358:	080093bf 	.word	0x080093bf
 800935c:	0800944f 	.word	0x0800944f
 8009360:	08009311 	.word	0x08009311
 8009364:	08009311 	.word	0x08009311
 8009368:	080094b7 	.word	0x080094b7
 800936c:	08009311 	.word	0x08009311
 8009370:	080093bf 	.word	0x080093bf
 8009374:	08009311 	.word	0x08009311
 8009378:	08009311 	.word	0x08009311
 800937c:	08009457 	.word	0x08009457
 8009380:	6833      	ldr	r3, [r6, #0]
 8009382:	1d1a      	adds	r2, r3, #4
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	6032      	str	r2, [r6, #0]
 8009388:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800938c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009390:	2301      	movs	r3, #1
 8009392:	e09d      	b.n	80094d0 <_printf_i+0x1e8>
 8009394:	6833      	ldr	r3, [r6, #0]
 8009396:	6820      	ldr	r0, [r4, #0]
 8009398:	1d19      	adds	r1, r3, #4
 800939a:	6031      	str	r1, [r6, #0]
 800939c:	0606      	lsls	r6, r0, #24
 800939e:	d501      	bpl.n	80093a4 <_printf_i+0xbc>
 80093a0:	681d      	ldr	r5, [r3, #0]
 80093a2:	e003      	b.n	80093ac <_printf_i+0xc4>
 80093a4:	0645      	lsls	r5, r0, #25
 80093a6:	d5fb      	bpl.n	80093a0 <_printf_i+0xb8>
 80093a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80093ac:	2d00      	cmp	r5, #0
 80093ae:	da03      	bge.n	80093b8 <_printf_i+0xd0>
 80093b0:	232d      	movs	r3, #45	@ 0x2d
 80093b2:	426d      	negs	r5, r5
 80093b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80093b8:	4859      	ldr	r0, [pc, #356]	@ (8009520 <_printf_i+0x238>)
 80093ba:	230a      	movs	r3, #10
 80093bc:	e011      	b.n	80093e2 <_printf_i+0xfa>
 80093be:	6821      	ldr	r1, [r4, #0]
 80093c0:	6833      	ldr	r3, [r6, #0]
 80093c2:	0608      	lsls	r0, r1, #24
 80093c4:	f853 5b04 	ldr.w	r5, [r3], #4
 80093c8:	d402      	bmi.n	80093d0 <_printf_i+0xe8>
 80093ca:	0649      	lsls	r1, r1, #25
 80093cc:	bf48      	it	mi
 80093ce:	b2ad      	uxthmi	r5, r5
 80093d0:	2f6f      	cmp	r7, #111	@ 0x6f
 80093d2:	4853      	ldr	r0, [pc, #332]	@ (8009520 <_printf_i+0x238>)
 80093d4:	6033      	str	r3, [r6, #0]
 80093d6:	bf14      	ite	ne
 80093d8:	230a      	movne	r3, #10
 80093da:	2308      	moveq	r3, #8
 80093dc:	2100      	movs	r1, #0
 80093de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80093e2:	6866      	ldr	r6, [r4, #4]
 80093e4:	60a6      	str	r6, [r4, #8]
 80093e6:	2e00      	cmp	r6, #0
 80093e8:	bfa2      	ittt	ge
 80093ea:	6821      	ldrge	r1, [r4, #0]
 80093ec:	f021 0104 	bicge.w	r1, r1, #4
 80093f0:	6021      	strge	r1, [r4, #0]
 80093f2:	b90d      	cbnz	r5, 80093f8 <_printf_i+0x110>
 80093f4:	2e00      	cmp	r6, #0
 80093f6:	d04b      	beq.n	8009490 <_printf_i+0x1a8>
 80093f8:	4616      	mov	r6, r2
 80093fa:	fbb5 f1f3 	udiv	r1, r5, r3
 80093fe:	fb03 5711 	mls	r7, r3, r1, r5
 8009402:	5dc7      	ldrb	r7, [r0, r7]
 8009404:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009408:	462f      	mov	r7, r5
 800940a:	42bb      	cmp	r3, r7
 800940c:	460d      	mov	r5, r1
 800940e:	d9f4      	bls.n	80093fa <_printf_i+0x112>
 8009410:	2b08      	cmp	r3, #8
 8009412:	d10b      	bne.n	800942c <_printf_i+0x144>
 8009414:	6823      	ldr	r3, [r4, #0]
 8009416:	07df      	lsls	r7, r3, #31
 8009418:	d508      	bpl.n	800942c <_printf_i+0x144>
 800941a:	6923      	ldr	r3, [r4, #16]
 800941c:	6861      	ldr	r1, [r4, #4]
 800941e:	4299      	cmp	r1, r3
 8009420:	bfde      	ittt	le
 8009422:	2330      	movle	r3, #48	@ 0x30
 8009424:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009428:	f106 36ff 	addle.w	r6, r6, #4294967295
 800942c:	1b92      	subs	r2, r2, r6
 800942e:	6122      	str	r2, [r4, #16]
 8009430:	f8cd a000 	str.w	sl, [sp]
 8009434:	464b      	mov	r3, r9
 8009436:	aa03      	add	r2, sp, #12
 8009438:	4621      	mov	r1, r4
 800943a:	4640      	mov	r0, r8
 800943c:	f7ff fee6 	bl	800920c <_printf_common>
 8009440:	3001      	adds	r0, #1
 8009442:	d14a      	bne.n	80094da <_printf_i+0x1f2>
 8009444:	f04f 30ff 	mov.w	r0, #4294967295
 8009448:	b004      	add	sp, #16
 800944a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800944e:	6823      	ldr	r3, [r4, #0]
 8009450:	f043 0320 	orr.w	r3, r3, #32
 8009454:	6023      	str	r3, [r4, #0]
 8009456:	4833      	ldr	r0, [pc, #204]	@ (8009524 <_printf_i+0x23c>)
 8009458:	2778      	movs	r7, #120	@ 0x78
 800945a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800945e:	6823      	ldr	r3, [r4, #0]
 8009460:	6831      	ldr	r1, [r6, #0]
 8009462:	061f      	lsls	r7, r3, #24
 8009464:	f851 5b04 	ldr.w	r5, [r1], #4
 8009468:	d402      	bmi.n	8009470 <_printf_i+0x188>
 800946a:	065f      	lsls	r7, r3, #25
 800946c:	bf48      	it	mi
 800946e:	b2ad      	uxthmi	r5, r5
 8009470:	6031      	str	r1, [r6, #0]
 8009472:	07d9      	lsls	r1, r3, #31
 8009474:	bf44      	itt	mi
 8009476:	f043 0320 	orrmi.w	r3, r3, #32
 800947a:	6023      	strmi	r3, [r4, #0]
 800947c:	b11d      	cbz	r5, 8009486 <_printf_i+0x19e>
 800947e:	2310      	movs	r3, #16
 8009480:	e7ac      	b.n	80093dc <_printf_i+0xf4>
 8009482:	4827      	ldr	r0, [pc, #156]	@ (8009520 <_printf_i+0x238>)
 8009484:	e7e9      	b.n	800945a <_printf_i+0x172>
 8009486:	6823      	ldr	r3, [r4, #0]
 8009488:	f023 0320 	bic.w	r3, r3, #32
 800948c:	6023      	str	r3, [r4, #0]
 800948e:	e7f6      	b.n	800947e <_printf_i+0x196>
 8009490:	4616      	mov	r6, r2
 8009492:	e7bd      	b.n	8009410 <_printf_i+0x128>
 8009494:	6833      	ldr	r3, [r6, #0]
 8009496:	6825      	ldr	r5, [r4, #0]
 8009498:	6961      	ldr	r1, [r4, #20]
 800949a:	1d18      	adds	r0, r3, #4
 800949c:	6030      	str	r0, [r6, #0]
 800949e:	062e      	lsls	r6, r5, #24
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	d501      	bpl.n	80094a8 <_printf_i+0x1c0>
 80094a4:	6019      	str	r1, [r3, #0]
 80094a6:	e002      	b.n	80094ae <_printf_i+0x1c6>
 80094a8:	0668      	lsls	r0, r5, #25
 80094aa:	d5fb      	bpl.n	80094a4 <_printf_i+0x1bc>
 80094ac:	8019      	strh	r1, [r3, #0]
 80094ae:	2300      	movs	r3, #0
 80094b0:	6123      	str	r3, [r4, #16]
 80094b2:	4616      	mov	r6, r2
 80094b4:	e7bc      	b.n	8009430 <_printf_i+0x148>
 80094b6:	6833      	ldr	r3, [r6, #0]
 80094b8:	1d1a      	adds	r2, r3, #4
 80094ba:	6032      	str	r2, [r6, #0]
 80094bc:	681e      	ldr	r6, [r3, #0]
 80094be:	6862      	ldr	r2, [r4, #4]
 80094c0:	2100      	movs	r1, #0
 80094c2:	4630      	mov	r0, r6
 80094c4:	f7f6 ff14 	bl	80002f0 <memchr>
 80094c8:	b108      	cbz	r0, 80094ce <_printf_i+0x1e6>
 80094ca:	1b80      	subs	r0, r0, r6
 80094cc:	6060      	str	r0, [r4, #4]
 80094ce:	6863      	ldr	r3, [r4, #4]
 80094d0:	6123      	str	r3, [r4, #16]
 80094d2:	2300      	movs	r3, #0
 80094d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80094d8:	e7aa      	b.n	8009430 <_printf_i+0x148>
 80094da:	6923      	ldr	r3, [r4, #16]
 80094dc:	4632      	mov	r2, r6
 80094de:	4649      	mov	r1, r9
 80094e0:	4640      	mov	r0, r8
 80094e2:	47d0      	blx	sl
 80094e4:	3001      	adds	r0, #1
 80094e6:	d0ad      	beq.n	8009444 <_printf_i+0x15c>
 80094e8:	6823      	ldr	r3, [r4, #0]
 80094ea:	079b      	lsls	r3, r3, #30
 80094ec:	d413      	bmi.n	8009516 <_printf_i+0x22e>
 80094ee:	68e0      	ldr	r0, [r4, #12]
 80094f0:	9b03      	ldr	r3, [sp, #12]
 80094f2:	4298      	cmp	r0, r3
 80094f4:	bfb8      	it	lt
 80094f6:	4618      	movlt	r0, r3
 80094f8:	e7a6      	b.n	8009448 <_printf_i+0x160>
 80094fa:	2301      	movs	r3, #1
 80094fc:	4632      	mov	r2, r6
 80094fe:	4649      	mov	r1, r9
 8009500:	4640      	mov	r0, r8
 8009502:	47d0      	blx	sl
 8009504:	3001      	adds	r0, #1
 8009506:	d09d      	beq.n	8009444 <_printf_i+0x15c>
 8009508:	3501      	adds	r5, #1
 800950a:	68e3      	ldr	r3, [r4, #12]
 800950c:	9903      	ldr	r1, [sp, #12]
 800950e:	1a5b      	subs	r3, r3, r1
 8009510:	42ab      	cmp	r3, r5
 8009512:	dcf2      	bgt.n	80094fa <_printf_i+0x212>
 8009514:	e7eb      	b.n	80094ee <_printf_i+0x206>
 8009516:	2500      	movs	r5, #0
 8009518:	f104 0619 	add.w	r6, r4, #25
 800951c:	e7f5      	b.n	800950a <_printf_i+0x222>
 800951e:	bf00      	nop
 8009520:	0800d47e 	.word	0x0800d47e
 8009524:	0800d48f 	.word	0x0800d48f

08009528 <_scanf_float>:
 8009528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800952c:	b087      	sub	sp, #28
 800952e:	4617      	mov	r7, r2
 8009530:	9303      	str	r3, [sp, #12]
 8009532:	688b      	ldr	r3, [r1, #8]
 8009534:	1e5a      	subs	r2, r3, #1
 8009536:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800953a:	bf81      	itttt	hi
 800953c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8009540:	eb03 0b05 	addhi.w	fp, r3, r5
 8009544:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8009548:	608b      	strhi	r3, [r1, #8]
 800954a:	680b      	ldr	r3, [r1, #0]
 800954c:	460a      	mov	r2, r1
 800954e:	f04f 0500 	mov.w	r5, #0
 8009552:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8009556:	f842 3b1c 	str.w	r3, [r2], #28
 800955a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800955e:	4680      	mov	r8, r0
 8009560:	460c      	mov	r4, r1
 8009562:	bf98      	it	ls
 8009564:	f04f 0b00 	movls.w	fp, #0
 8009568:	9201      	str	r2, [sp, #4]
 800956a:	4616      	mov	r6, r2
 800956c:	46aa      	mov	sl, r5
 800956e:	46a9      	mov	r9, r5
 8009570:	9502      	str	r5, [sp, #8]
 8009572:	68a2      	ldr	r2, [r4, #8]
 8009574:	b152      	cbz	r2, 800958c <_scanf_float+0x64>
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	781b      	ldrb	r3, [r3, #0]
 800957a:	2b4e      	cmp	r3, #78	@ 0x4e
 800957c:	d864      	bhi.n	8009648 <_scanf_float+0x120>
 800957e:	2b40      	cmp	r3, #64	@ 0x40
 8009580:	d83c      	bhi.n	80095fc <_scanf_float+0xd4>
 8009582:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8009586:	b2c8      	uxtb	r0, r1
 8009588:	280e      	cmp	r0, #14
 800958a:	d93a      	bls.n	8009602 <_scanf_float+0xda>
 800958c:	f1b9 0f00 	cmp.w	r9, #0
 8009590:	d003      	beq.n	800959a <_scanf_float+0x72>
 8009592:	6823      	ldr	r3, [r4, #0]
 8009594:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009598:	6023      	str	r3, [r4, #0]
 800959a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800959e:	f1ba 0f01 	cmp.w	sl, #1
 80095a2:	f200 8117 	bhi.w	80097d4 <_scanf_float+0x2ac>
 80095a6:	9b01      	ldr	r3, [sp, #4]
 80095a8:	429e      	cmp	r6, r3
 80095aa:	f200 8108 	bhi.w	80097be <_scanf_float+0x296>
 80095ae:	2001      	movs	r0, #1
 80095b0:	b007      	add	sp, #28
 80095b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095b6:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80095ba:	2a0d      	cmp	r2, #13
 80095bc:	d8e6      	bhi.n	800958c <_scanf_float+0x64>
 80095be:	a101      	add	r1, pc, #4	@ (adr r1, 80095c4 <_scanf_float+0x9c>)
 80095c0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80095c4:	0800970b 	.word	0x0800970b
 80095c8:	0800958d 	.word	0x0800958d
 80095cc:	0800958d 	.word	0x0800958d
 80095d0:	0800958d 	.word	0x0800958d
 80095d4:	0800976b 	.word	0x0800976b
 80095d8:	08009743 	.word	0x08009743
 80095dc:	0800958d 	.word	0x0800958d
 80095e0:	0800958d 	.word	0x0800958d
 80095e4:	08009719 	.word	0x08009719
 80095e8:	0800958d 	.word	0x0800958d
 80095ec:	0800958d 	.word	0x0800958d
 80095f0:	0800958d 	.word	0x0800958d
 80095f4:	0800958d 	.word	0x0800958d
 80095f8:	080096d1 	.word	0x080096d1
 80095fc:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8009600:	e7db      	b.n	80095ba <_scanf_float+0x92>
 8009602:	290e      	cmp	r1, #14
 8009604:	d8c2      	bhi.n	800958c <_scanf_float+0x64>
 8009606:	a001      	add	r0, pc, #4	@ (adr r0, 800960c <_scanf_float+0xe4>)
 8009608:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800960c:	080096c1 	.word	0x080096c1
 8009610:	0800958d 	.word	0x0800958d
 8009614:	080096c1 	.word	0x080096c1
 8009618:	08009757 	.word	0x08009757
 800961c:	0800958d 	.word	0x0800958d
 8009620:	08009669 	.word	0x08009669
 8009624:	080096a7 	.word	0x080096a7
 8009628:	080096a7 	.word	0x080096a7
 800962c:	080096a7 	.word	0x080096a7
 8009630:	080096a7 	.word	0x080096a7
 8009634:	080096a7 	.word	0x080096a7
 8009638:	080096a7 	.word	0x080096a7
 800963c:	080096a7 	.word	0x080096a7
 8009640:	080096a7 	.word	0x080096a7
 8009644:	080096a7 	.word	0x080096a7
 8009648:	2b6e      	cmp	r3, #110	@ 0x6e
 800964a:	d809      	bhi.n	8009660 <_scanf_float+0x138>
 800964c:	2b60      	cmp	r3, #96	@ 0x60
 800964e:	d8b2      	bhi.n	80095b6 <_scanf_float+0x8e>
 8009650:	2b54      	cmp	r3, #84	@ 0x54
 8009652:	d07b      	beq.n	800974c <_scanf_float+0x224>
 8009654:	2b59      	cmp	r3, #89	@ 0x59
 8009656:	d199      	bne.n	800958c <_scanf_float+0x64>
 8009658:	2d07      	cmp	r5, #7
 800965a:	d197      	bne.n	800958c <_scanf_float+0x64>
 800965c:	2508      	movs	r5, #8
 800965e:	e02c      	b.n	80096ba <_scanf_float+0x192>
 8009660:	2b74      	cmp	r3, #116	@ 0x74
 8009662:	d073      	beq.n	800974c <_scanf_float+0x224>
 8009664:	2b79      	cmp	r3, #121	@ 0x79
 8009666:	e7f6      	b.n	8009656 <_scanf_float+0x12e>
 8009668:	6821      	ldr	r1, [r4, #0]
 800966a:	05c8      	lsls	r0, r1, #23
 800966c:	d51b      	bpl.n	80096a6 <_scanf_float+0x17e>
 800966e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8009672:	6021      	str	r1, [r4, #0]
 8009674:	f109 0901 	add.w	r9, r9, #1
 8009678:	f1bb 0f00 	cmp.w	fp, #0
 800967c:	d003      	beq.n	8009686 <_scanf_float+0x15e>
 800967e:	3201      	adds	r2, #1
 8009680:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009684:	60a2      	str	r2, [r4, #8]
 8009686:	68a3      	ldr	r3, [r4, #8]
 8009688:	3b01      	subs	r3, #1
 800968a:	60a3      	str	r3, [r4, #8]
 800968c:	6923      	ldr	r3, [r4, #16]
 800968e:	3301      	adds	r3, #1
 8009690:	6123      	str	r3, [r4, #16]
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	3b01      	subs	r3, #1
 8009696:	2b00      	cmp	r3, #0
 8009698:	607b      	str	r3, [r7, #4]
 800969a:	f340 8087 	ble.w	80097ac <_scanf_float+0x284>
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	3301      	adds	r3, #1
 80096a2:	603b      	str	r3, [r7, #0]
 80096a4:	e765      	b.n	8009572 <_scanf_float+0x4a>
 80096a6:	eb1a 0105 	adds.w	r1, sl, r5
 80096aa:	f47f af6f 	bne.w	800958c <_scanf_float+0x64>
 80096ae:	6822      	ldr	r2, [r4, #0]
 80096b0:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80096b4:	6022      	str	r2, [r4, #0]
 80096b6:	460d      	mov	r5, r1
 80096b8:	468a      	mov	sl, r1
 80096ba:	f806 3b01 	strb.w	r3, [r6], #1
 80096be:	e7e2      	b.n	8009686 <_scanf_float+0x15e>
 80096c0:	6822      	ldr	r2, [r4, #0]
 80096c2:	0610      	lsls	r0, r2, #24
 80096c4:	f57f af62 	bpl.w	800958c <_scanf_float+0x64>
 80096c8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80096cc:	6022      	str	r2, [r4, #0]
 80096ce:	e7f4      	b.n	80096ba <_scanf_float+0x192>
 80096d0:	f1ba 0f00 	cmp.w	sl, #0
 80096d4:	d10e      	bne.n	80096f4 <_scanf_float+0x1cc>
 80096d6:	f1b9 0f00 	cmp.w	r9, #0
 80096da:	d10e      	bne.n	80096fa <_scanf_float+0x1d2>
 80096dc:	6822      	ldr	r2, [r4, #0]
 80096de:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80096e2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80096e6:	d108      	bne.n	80096fa <_scanf_float+0x1d2>
 80096e8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80096ec:	6022      	str	r2, [r4, #0]
 80096ee:	f04f 0a01 	mov.w	sl, #1
 80096f2:	e7e2      	b.n	80096ba <_scanf_float+0x192>
 80096f4:	f1ba 0f02 	cmp.w	sl, #2
 80096f8:	d055      	beq.n	80097a6 <_scanf_float+0x27e>
 80096fa:	2d01      	cmp	r5, #1
 80096fc:	d002      	beq.n	8009704 <_scanf_float+0x1dc>
 80096fe:	2d04      	cmp	r5, #4
 8009700:	f47f af44 	bne.w	800958c <_scanf_float+0x64>
 8009704:	3501      	adds	r5, #1
 8009706:	b2ed      	uxtb	r5, r5
 8009708:	e7d7      	b.n	80096ba <_scanf_float+0x192>
 800970a:	f1ba 0f01 	cmp.w	sl, #1
 800970e:	f47f af3d 	bne.w	800958c <_scanf_float+0x64>
 8009712:	f04f 0a02 	mov.w	sl, #2
 8009716:	e7d0      	b.n	80096ba <_scanf_float+0x192>
 8009718:	b97d      	cbnz	r5, 800973a <_scanf_float+0x212>
 800971a:	f1b9 0f00 	cmp.w	r9, #0
 800971e:	f47f af38 	bne.w	8009592 <_scanf_float+0x6a>
 8009722:	6822      	ldr	r2, [r4, #0]
 8009724:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009728:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800972c:	f040 8101 	bne.w	8009932 <_scanf_float+0x40a>
 8009730:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009734:	6022      	str	r2, [r4, #0]
 8009736:	2501      	movs	r5, #1
 8009738:	e7bf      	b.n	80096ba <_scanf_float+0x192>
 800973a:	2d03      	cmp	r5, #3
 800973c:	d0e2      	beq.n	8009704 <_scanf_float+0x1dc>
 800973e:	2d05      	cmp	r5, #5
 8009740:	e7de      	b.n	8009700 <_scanf_float+0x1d8>
 8009742:	2d02      	cmp	r5, #2
 8009744:	f47f af22 	bne.w	800958c <_scanf_float+0x64>
 8009748:	2503      	movs	r5, #3
 800974a:	e7b6      	b.n	80096ba <_scanf_float+0x192>
 800974c:	2d06      	cmp	r5, #6
 800974e:	f47f af1d 	bne.w	800958c <_scanf_float+0x64>
 8009752:	2507      	movs	r5, #7
 8009754:	e7b1      	b.n	80096ba <_scanf_float+0x192>
 8009756:	6822      	ldr	r2, [r4, #0]
 8009758:	0591      	lsls	r1, r2, #22
 800975a:	f57f af17 	bpl.w	800958c <_scanf_float+0x64>
 800975e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8009762:	6022      	str	r2, [r4, #0]
 8009764:	f8cd 9008 	str.w	r9, [sp, #8]
 8009768:	e7a7      	b.n	80096ba <_scanf_float+0x192>
 800976a:	6822      	ldr	r2, [r4, #0]
 800976c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8009770:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8009774:	d006      	beq.n	8009784 <_scanf_float+0x25c>
 8009776:	0550      	lsls	r0, r2, #21
 8009778:	f57f af08 	bpl.w	800958c <_scanf_float+0x64>
 800977c:	f1b9 0f00 	cmp.w	r9, #0
 8009780:	f000 80d7 	beq.w	8009932 <_scanf_float+0x40a>
 8009784:	0591      	lsls	r1, r2, #22
 8009786:	bf58      	it	pl
 8009788:	9902      	ldrpl	r1, [sp, #8]
 800978a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800978e:	bf58      	it	pl
 8009790:	eba9 0101 	subpl.w	r1, r9, r1
 8009794:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8009798:	bf58      	it	pl
 800979a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800979e:	6022      	str	r2, [r4, #0]
 80097a0:	f04f 0900 	mov.w	r9, #0
 80097a4:	e789      	b.n	80096ba <_scanf_float+0x192>
 80097a6:	f04f 0a03 	mov.w	sl, #3
 80097aa:	e786      	b.n	80096ba <_scanf_float+0x192>
 80097ac:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80097b0:	4639      	mov	r1, r7
 80097b2:	4640      	mov	r0, r8
 80097b4:	4798      	blx	r3
 80097b6:	2800      	cmp	r0, #0
 80097b8:	f43f aedb 	beq.w	8009572 <_scanf_float+0x4a>
 80097bc:	e6e6      	b.n	800958c <_scanf_float+0x64>
 80097be:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80097c2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80097c6:	463a      	mov	r2, r7
 80097c8:	4640      	mov	r0, r8
 80097ca:	4798      	blx	r3
 80097cc:	6923      	ldr	r3, [r4, #16]
 80097ce:	3b01      	subs	r3, #1
 80097d0:	6123      	str	r3, [r4, #16]
 80097d2:	e6e8      	b.n	80095a6 <_scanf_float+0x7e>
 80097d4:	1e6b      	subs	r3, r5, #1
 80097d6:	2b06      	cmp	r3, #6
 80097d8:	d824      	bhi.n	8009824 <_scanf_float+0x2fc>
 80097da:	2d02      	cmp	r5, #2
 80097dc:	d836      	bhi.n	800984c <_scanf_float+0x324>
 80097de:	9b01      	ldr	r3, [sp, #4]
 80097e0:	429e      	cmp	r6, r3
 80097e2:	f67f aee4 	bls.w	80095ae <_scanf_float+0x86>
 80097e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80097ea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80097ee:	463a      	mov	r2, r7
 80097f0:	4640      	mov	r0, r8
 80097f2:	4798      	blx	r3
 80097f4:	6923      	ldr	r3, [r4, #16]
 80097f6:	3b01      	subs	r3, #1
 80097f8:	6123      	str	r3, [r4, #16]
 80097fa:	e7f0      	b.n	80097de <_scanf_float+0x2b6>
 80097fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009800:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8009804:	463a      	mov	r2, r7
 8009806:	4640      	mov	r0, r8
 8009808:	4798      	blx	r3
 800980a:	6923      	ldr	r3, [r4, #16]
 800980c:	3b01      	subs	r3, #1
 800980e:	6123      	str	r3, [r4, #16]
 8009810:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009814:	fa5f fa8a 	uxtb.w	sl, sl
 8009818:	f1ba 0f02 	cmp.w	sl, #2
 800981c:	d1ee      	bne.n	80097fc <_scanf_float+0x2d4>
 800981e:	3d03      	subs	r5, #3
 8009820:	b2ed      	uxtb	r5, r5
 8009822:	1b76      	subs	r6, r6, r5
 8009824:	6823      	ldr	r3, [r4, #0]
 8009826:	05da      	lsls	r2, r3, #23
 8009828:	d530      	bpl.n	800988c <_scanf_float+0x364>
 800982a:	055b      	lsls	r3, r3, #21
 800982c:	d511      	bpl.n	8009852 <_scanf_float+0x32a>
 800982e:	9b01      	ldr	r3, [sp, #4]
 8009830:	429e      	cmp	r6, r3
 8009832:	f67f aebc 	bls.w	80095ae <_scanf_float+0x86>
 8009836:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800983a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800983e:	463a      	mov	r2, r7
 8009840:	4640      	mov	r0, r8
 8009842:	4798      	blx	r3
 8009844:	6923      	ldr	r3, [r4, #16]
 8009846:	3b01      	subs	r3, #1
 8009848:	6123      	str	r3, [r4, #16]
 800984a:	e7f0      	b.n	800982e <_scanf_float+0x306>
 800984c:	46aa      	mov	sl, r5
 800984e:	46b3      	mov	fp, r6
 8009850:	e7de      	b.n	8009810 <_scanf_float+0x2e8>
 8009852:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009856:	6923      	ldr	r3, [r4, #16]
 8009858:	2965      	cmp	r1, #101	@ 0x65
 800985a:	f103 33ff 	add.w	r3, r3, #4294967295
 800985e:	f106 35ff 	add.w	r5, r6, #4294967295
 8009862:	6123      	str	r3, [r4, #16]
 8009864:	d00c      	beq.n	8009880 <_scanf_float+0x358>
 8009866:	2945      	cmp	r1, #69	@ 0x45
 8009868:	d00a      	beq.n	8009880 <_scanf_float+0x358>
 800986a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800986e:	463a      	mov	r2, r7
 8009870:	4640      	mov	r0, r8
 8009872:	4798      	blx	r3
 8009874:	6923      	ldr	r3, [r4, #16]
 8009876:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800987a:	3b01      	subs	r3, #1
 800987c:	1eb5      	subs	r5, r6, #2
 800987e:	6123      	str	r3, [r4, #16]
 8009880:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009884:	463a      	mov	r2, r7
 8009886:	4640      	mov	r0, r8
 8009888:	4798      	blx	r3
 800988a:	462e      	mov	r6, r5
 800988c:	6822      	ldr	r2, [r4, #0]
 800988e:	f012 0210 	ands.w	r2, r2, #16
 8009892:	d001      	beq.n	8009898 <_scanf_float+0x370>
 8009894:	2000      	movs	r0, #0
 8009896:	e68b      	b.n	80095b0 <_scanf_float+0x88>
 8009898:	7032      	strb	r2, [r6, #0]
 800989a:	6823      	ldr	r3, [r4, #0]
 800989c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80098a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80098a4:	d11a      	bne.n	80098dc <_scanf_float+0x3b4>
 80098a6:	9b02      	ldr	r3, [sp, #8]
 80098a8:	454b      	cmp	r3, r9
 80098aa:	eba3 0209 	sub.w	r2, r3, r9
 80098ae:	d121      	bne.n	80098f4 <_scanf_float+0x3cc>
 80098b0:	9901      	ldr	r1, [sp, #4]
 80098b2:	2200      	movs	r2, #0
 80098b4:	4640      	mov	r0, r8
 80098b6:	f002 fb61 	bl	800bf7c <_strtod_r>
 80098ba:	9b03      	ldr	r3, [sp, #12]
 80098bc:	6821      	ldr	r1, [r4, #0]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	f011 0f02 	tst.w	r1, #2
 80098c4:	f103 0204 	add.w	r2, r3, #4
 80098c8:	d01f      	beq.n	800990a <_scanf_float+0x3e2>
 80098ca:	9903      	ldr	r1, [sp, #12]
 80098cc:	600a      	str	r2, [r1, #0]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	ed83 0b00 	vstr	d0, [r3]
 80098d4:	68e3      	ldr	r3, [r4, #12]
 80098d6:	3301      	adds	r3, #1
 80098d8:	60e3      	str	r3, [r4, #12]
 80098da:	e7db      	b.n	8009894 <_scanf_float+0x36c>
 80098dc:	9b04      	ldr	r3, [sp, #16]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d0e6      	beq.n	80098b0 <_scanf_float+0x388>
 80098e2:	9905      	ldr	r1, [sp, #20]
 80098e4:	230a      	movs	r3, #10
 80098e6:	3101      	adds	r1, #1
 80098e8:	4640      	mov	r0, r8
 80098ea:	f002 fbc7 	bl	800c07c <_strtol_r>
 80098ee:	9b04      	ldr	r3, [sp, #16]
 80098f0:	9e05      	ldr	r6, [sp, #20]
 80098f2:	1ac2      	subs	r2, r0, r3
 80098f4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80098f8:	429e      	cmp	r6, r3
 80098fa:	bf28      	it	cs
 80098fc:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8009900:	490d      	ldr	r1, [pc, #52]	@ (8009938 <_scanf_float+0x410>)
 8009902:	4630      	mov	r0, r6
 8009904:	f000 f912 	bl	8009b2c <siprintf>
 8009908:	e7d2      	b.n	80098b0 <_scanf_float+0x388>
 800990a:	f011 0f04 	tst.w	r1, #4
 800990e:	9903      	ldr	r1, [sp, #12]
 8009910:	600a      	str	r2, [r1, #0]
 8009912:	d1dc      	bne.n	80098ce <_scanf_float+0x3a6>
 8009914:	eeb4 0b40 	vcmp.f64	d0, d0
 8009918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800991c:	681d      	ldr	r5, [r3, #0]
 800991e:	d705      	bvc.n	800992c <_scanf_float+0x404>
 8009920:	4806      	ldr	r0, [pc, #24]	@ (800993c <_scanf_float+0x414>)
 8009922:	f000 f9e7 	bl	8009cf4 <nanf>
 8009926:	ed85 0a00 	vstr	s0, [r5]
 800992a:	e7d3      	b.n	80098d4 <_scanf_float+0x3ac>
 800992c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8009930:	e7f9      	b.n	8009926 <_scanf_float+0x3fe>
 8009932:	f04f 0900 	mov.w	r9, #0
 8009936:	e630      	b.n	800959a <_scanf_float+0x72>
 8009938:	0800d4a0 	.word	0x0800d4a0
 800993c:	0800d835 	.word	0x0800d835

08009940 <std>:
 8009940:	2300      	movs	r3, #0
 8009942:	b510      	push	{r4, lr}
 8009944:	4604      	mov	r4, r0
 8009946:	e9c0 3300 	strd	r3, r3, [r0]
 800994a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800994e:	6083      	str	r3, [r0, #8]
 8009950:	8181      	strh	r1, [r0, #12]
 8009952:	6643      	str	r3, [r0, #100]	@ 0x64
 8009954:	81c2      	strh	r2, [r0, #14]
 8009956:	6183      	str	r3, [r0, #24]
 8009958:	4619      	mov	r1, r3
 800995a:	2208      	movs	r2, #8
 800995c:	305c      	adds	r0, #92	@ 0x5c
 800995e:	f000 f948 	bl	8009bf2 <memset>
 8009962:	4b0d      	ldr	r3, [pc, #52]	@ (8009998 <std+0x58>)
 8009964:	6263      	str	r3, [r4, #36]	@ 0x24
 8009966:	4b0d      	ldr	r3, [pc, #52]	@ (800999c <std+0x5c>)
 8009968:	62a3      	str	r3, [r4, #40]	@ 0x28
 800996a:	4b0d      	ldr	r3, [pc, #52]	@ (80099a0 <std+0x60>)
 800996c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800996e:	4b0d      	ldr	r3, [pc, #52]	@ (80099a4 <std+0x64>)
 8009970:	6323      	str	r3, [r4, #48]	@ 0x30
 8009972:	4b0d      	ldr	r3, [pc, #52]	@ (80099a8 <std+0x68>)
 8009974:	6224      	str	r4, [r4, #32]
 8009976:	429c      	cmp	r4, r3
 8009978:	d006      	beq.n	8009988 <std+0x48>
 800997a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800997e:	4294      	cmp	r4, r2
 8009980:	d002      	beq.n	8009988 <std+0x48>
 8009982:	33d0      	adds	r3, #208	@ 0xd0
 8009984:	429c      	cmp	r4, r3
 8009986:	d105      	bne.n	8009994 <std+0x54>
 8009988:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800998c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009990:	f000 b9ac 	b.w	8009cec <__retarget_lock_init_recursive>
 8009994:	bd10      	pop	{r4, pc}
 8009996:	bf00      	nop
 8009998:	08009b6d 	.word	0x08009b6d
 800999c:	08009b8f 	.word	0x08009b8f
 80099a0:	08009bc7 	.word	0x08009bc7
 80099a4:	08009beb 	.word	0x08009beb
 80099a8:	240004e0 	.word	0x240004e0

080099ac <stdio_exit_handler>:
 80099ac:	4a02      	ldr	r2, [pc, #8]	@ (80099b8 <stdio_exit_handler+0xc>)
 80099ae:	4903      	ldr	r1, [pc, #12]	@ (80099bc <stdio_exit_handler+0x10>)
 80099b0:	4803      	ldr	r0, [pc, #12]	@ (80099c0 <stdio_exit_handler+0x14>)
 80099b2:	f000 b869 	b.w	8009a88 <_fwalk_sglue>
 80099b6:	bf00      	nop
 80099b8:	24000010 	.word	0x24000010
 80099bc:	0800c439 	.word	0x0800c439
 80099c0:	24000020 	.word	0x24000020

080099c4 <cleanup_stdio>:
 80099c4:	6841      	ldr	r1, [r0, #4]
 80099c6:	4b0c      	ldr	r3, [pc, #48]	@ (80099f8 <cleanup_stdio+0x34>)
 80099c8:	4299      	cmp	r1, r3
 80099ca:	b510      	push	{r4, lr}
 80099cc:	4604      	mov	r4, r0
 80099ce:	d001      	beq.n	80099d4 <cleanup_stdio+0x10>
 80099d0:	f002 fd32 	bl	800c438 <_fflush_r>
 80099d4:	68a1      	ldr	r1, [r4, #8]
 80099d6:	4b09      	ldr	r3, [pc, #36]	@ (80099fc <cleanup_stdio+0x38>)
 80099d8:	4299      	cmp	r1, r3
 80099da:	d002      	beq.n	80099e2 <cleanup_stdio+0x1e>
 80099dc:	4620      	mov	r0, r4
 80099de:	f002 fd2b 	bl	800c438 <_fflush_r>
 80099e2:	68e1      	ldr	r1, [r4, #12]
 80099e4:	4b06      	ldr	r3, [pc, #24]	@ (8009a00 <cleanup_stdio+0x3c>)
 80099e6:	4299      	cmp	r1, r3
 80099e8:	d004      	beq.n	80099f4 <cleanup_stdio+0x30>
 80099ea:	4620      	mov	r0, r4
 80099ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099f0:	f002 bd22 	b.w	800c438 <_fflush_r>
 80099f4:	bd10      	pop	{r4, pc}
 80099f6:	bf00      	nop
 80099f8:	240004e0 	.word	0x240004e0
 80099fc:	24000548 	.word	0x24000548
 8009a00:	240005b0 	.word	0x240005b0

08009a04 <global_stdio_init.part.0>:
 8009a04:	b510      	push	{r4, lr}
 8009a06:	4b0b      	ldr	r3, [pc, #44]	@ (8009a34 <global_stdio_init.part.0+0x30>)
 8009a08:	4c0b      	ldr	r4, [pc, #44]	@ (8009a38 <global_stdio_init.part.0+0x34>)
 8009a0a:	4a0c      	ldr	r2, [pc, #48]	@ (8009a3c <global_stdio_init.part.0+0x38>)
 8009a0c:	601a      	str	r2, [r3, #0]
 8009a0e:	4620      	mov	r0, r4
 8009a10:	2200      	movs	r2, #0
 8009a12:	2104      	movs	r1, #4
 8009a14:	f7ff ff94 	bl	8009940 <std>
 8009a18:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009a1c:	2201      	movs	r2, #1
 8009a1e:	2109      	movs	r1, #9
 8009a20:	f7ff ff8e 	bl	8009940 <std>
 8009a24:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009a28:	2202      	movs	r2, #2
 8009a2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a2e:	2112      	movs	r1, #18
 8009a30:	f7ff bf86 	b.w	8009940 <std>
 8009a34:	24000618 	.word	0x24000618
 8009a38:	240004e0 	.word	0x240004e0
 8009a3c:	080099ad 	.word	0x080099ad

08009a40 <__sfp_lock_acquire>:
 8009a40:	4801      	ldr	r0, [pc, #4]	@ (8009a48 <__sfp_lock_acquire+0x8>)
 8009a42:	f000 b954 	b.w	8009cee <__retarget_lock_acquire_recursive>
 8009a46:	bf00      	nop
 8009a48:	24000621 	.word	0x24000621

08009a4c <__sfp_lock_release>:
 8009a4c:	4801      	ldr	r0, [pc, #4]	@ (8009a54 <__sfp_lock_release+0x8>)
 8009a4e:	f000 b94f 	b.w	8009cf0 <__retarget_lock_release_recursive>
 8009a52:	bf00      	nop
 8009a54:	24000621 	.word	0x24000621

08009a58 <__sinit>:
 8009a58:	b510      	push	{r4, lr}
 8009a5a:	4604      	mov	r4, r0
 8009a5c:	f7ff fff0 	bl	8009a40 <__sfp_lock_acquire>
 8009a60:	6a23      	ldr	r3, [r4, #32]
 8009a62:	b11b      	cbz	r3, 8009a6c <__sinit+0x14>
 8009a64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a68:	f7ff bff0 	b.w	8009a4c <__sfp_lock_release>
 8009a6c:	4b04      	ldr	r3, [pc, #16]	@ (8009a80 <__sinit+0x28>)
 8009a6e:	6223      	str	r3, [r4, #32]
 8009a70:	4b04      	ldr	r3, [pc, #16]	@ (8009a84 <__sinit+0x2c>)
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d1f5      	bne.n	8009a64 <__sinit+0xc>
 8009a78:	f7ff ffc4 	bl	8009a04 <global_stdio_init.part.0>
 8009a7c:	e7f2      	b.n	8009a64 <__sinit+0xc>
 8009a7e:	bf00      	nop
 8009a80:	080099c5 	.word	0x080099c5
 8009a84:	24000618 	.word	0x24000618

08009a88 <_fwalk_sglue>:
 8009a88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a8c:	4607      	mov	r7, r0
 8009a8e:	4688      	mov	r8, r1
 8009a90:	4614      	mov	r4, r2
 8009a92:	2600      	movs	r6, #0
 8009a94:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009a98:	f1b9 0901 	subs.w	r9, r9, #1
 8009a9c:	d505      	bpl.n	8009aaa <_fwalk_sglue+0x22>
 8009a9e:	6824      	ldr	r4, [r4, #0]
 8009aa0:	2c00      	cmp	r4, #0
 8009aa2:	d1f7      	bne.n	8009a94 <_fwalk_sglue+0xc>
 8009aa4:	4630      	mov	r0, r6
 8009aa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009aaa:	89ab      	ldrh	r3, [r5, #12]
 8009aac:	2b01      	cmp	r3, #1
 8009aae:	d907      	bls.n	8009ac0 <_fwalk_sglue+0x38>
 8009ab0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009ab4:	3301      	adds	r3, #1
 8009ab6:	d003      	beq.n	8009ac0 <_fwalk_sglue+0x38>
 8009ab8:	4629      	mov	r1, r5
 8009aba:	4638      	mov	r0, r7
 8009abc:	47c0      	blx	r8
 8009abe:	4306      	orrs	r6, r0
 8009ac0:	3568      	adds	r5, #104	@ 0x68
 8009ac2:	e7e9      	b.n	8009a98 <_fwalk_sglue+0x10>

08009ac4 <sniprintf>:
 8009ac4:	b40c      	push	{r2, r3}
 8009ac6:	b530      	push	{r4, r5, lr}
 8009ac8:	4b17      	ldr	r3, [pc, #92]	@ (8009b28 <sniprintf+0x64>)
 8009aca:	1e0c      	subs	r4, r1, #0
 8009acc:	681d      	ldr	r5, [r3, #0]
 8009ace:	b09d      	sub	sp, #116	@ 0x74
 8009ad0:	da08      	bge.n	8009ae4 <sniprintf+0x20>
 8009ad2:	238b      	movs	r3, #139	@ 0x8b
 8009ad4:	602b      	str	r3, [r5, #0]
 8009ad6:	f04f 30ff 	mov.w	r0, #4294967295
 8009ada:	b01d      	add	sp, #116	@ 0x74
 8009adc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009ae0:	b002      	add	sp, #8
 8009ae2:	4770      	bx	lr
 8009ae4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009ae8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009aec:	bf14      	ite	ne
 8009aee:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009af2:	4623      	moveq	r3, r4
 8009af4:	9304      	str	r3, [sp, #16]
 8009af6:	9307      	str	r3, [sp, #28]
 8009af8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009afc:	9002      	str	r0, [sp, #8]
 8009afe:	9006      	str	r0, [sp, #24]
 8009b00:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009b04:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009b06:	ab21      	add	r3, sp, #132	@ 0x84
 8009b08:	a902      	add	r1, sp, #8
 8009b0a:	4628      	mov	r0, r5
 8009b0c:	9301      	str	r3, [sp, #4]
 8009b0e:	f002 fb13 	bl	800c138 <_svfiprintf_r>
 8009b12:	1c43      	adds	r3, r0, #1
 8009b14:	bfbc      	itt	lt
 8009b16:	238b      	movlt	r3, #139	@ 0x8b
 8009b18:	602b      	strlt	r3, [r5, #0]
 8009b1a:	2c00      	cmp	r4, #0
 8009b1c:	d0dd      	beq.n	8009ada <sniprintf+0x16>
 8009b1e:	9b02      	ldr	r3, [sp, #8]
 8009b20:	2200      	movs	r2, #0
 8009b22:	701a      	strb	r2, [r3, #0]
 8009b24:	e7d9      	b.n	8009ada <sniprintf+0x16>
 8009b26:	bf00      	nop
 8009b28:	2400001c 	.word	0x2400001c

08009b2c <siprintf>:
 8009b2c:	b40e      	push	{r1, r2, r3}
 8009b2e:	b500      	push	{lr}
 8009b30:	b09c      	sub	sp, #112	@ 0x70
 8009b32:	ab1d      	add	r3, sp, #116	@ 0x74
 8009b34:	9002      	str	r0, [sp, #8]
 8009b36:	9006      	str	r0, [sp, #24]
 8009b38:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009b3c:	4809      	ldr	r0, [pc, #36]	@ (8009b64 <siprintf+0x38>)
 8009b3e:	9107      	str	r1, [sp, #28]
 8009b40:	9104      	str	r1, [sp, #16]
 8009b42:	4909      	ldr	r1, [pc, #36]	@ (8009b68 <siprintf+0x3c>)
 8009b44:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b48:	9105      	str	r1, [sp, #20]
 8009b4a:	6800      	ldr	r0, [r0, #0]
 8009b4c:	9301      	str	r3, [sp, #4]
 8009b4e:	a902      	add	r1, sp, #8
 8009b50:	f002 faf2 	bl	800c138 <_svfiprintf_r>
 8009b54:	9b02      	ldr	r3, [sp, #8]
 8009b56:	2200      	movs	r2, #0
 8009b58:	701a      	strb	r2, [r3, #0]
 8009b5a:	b01c      	add	sp, #112	@ 0x70
 8009b5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b60:	b003      	add	sp, #12
 8009b62:	4770      	bx	lr
 8009b64:	2400001c 	.word	0x2400001c
 8009b68:	ffff0208 	.word	0xffff0208

08009b6c <__sread>:
 8009b6c:	b510      	push	{r4, lr}
 8009b6e:	460c      	mov	r4, r1
 8009b70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b74:	f000 f86c 	bl	8009c50 <_read_r>
 8009b78:	2800      	cmp	r0, #0
 8009b7a:	bfab      	itete	ge
 8009b7c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009b7e:	89a3      	ldrhlt	r3, [r4, #12]
 8009b80:	181b      	addge	r3, r3, r0
 8009b82:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009b86:	bfac      	ite	ge
 8009b88:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009b8a:	81a3      	strhlt	r3, [r4, #12]
 8009b8c:	bd10      	pop	{r4, pc}

08009b8e <__swrite>:
 8009b8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b92:	461f      	mov	r7, r3
 8009b94:	898b      	ldrh	r3, [r1, #12]
 8009b96:	05db      	lsls	r3, r3, #23
 8009b98:	4605      	mov	r5, r0
 8009b9a:	460c      	mov	r4, r1
 8009b9c:	4616      	mov	r6, r2
 8009b9e:	d505      	bpl.n	8009bac <__swrite+0x1e>
 8009ba0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ba4:	2302      	movs	r3, #2
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	f000 f840 	bl	8009c2c <_lseek_r>
 8009bac:	89a3      	ldrh	r3, [r4, #12]
 8009bae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009bb2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009bb6:	81a3      	strh	r3, [r4, #12]
 8009bb8:	4632      	mov	r2, r6
 8009bba:	463b      	mov	r3, r7
 8009bbc:	4628      	mov	r0, r5
 8009bbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009bc2:	f000 b857 	b.w	8009c74 <_write_r>

08009bc6 <__sseek>:
 8009bc6:	b510      	push	{r4, lr}
 8009bc8:	460c      	mov	r4, r1
 8009bca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bce:	f000 f82d 	bl	8009c2c <_lseek_r>
 8009bd2:	1c43      	adds	r3, r0, #1
 8009bd4:	89a3      	ldrh	r3, [r4, #12]
 8009bd6:	bf15      	itete	ne
 8009bd8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009bda:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009bde:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009be2:	81a3      	strheq	r3, [r4, #12]
 8009be4:	bf18      	it	ne
 8009be6:	81a3      	strhne	r3, [r4, #12]
 8009be8:	bd10      	pop	{r4, pc}

08009bea <__sclose>:
 8009bea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bee:	f000 b80d 	b.w	8009c0c <_close_r>

08009bf2 <memset>:
 8009bf2:	4402      	add	r2, r0
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	4293      	cmp	r3, r2
 8009bf8:	d100      	bne.n	8009bfc <memset+0xa>
 8009bfa:	4770      	bx	lr
 8009bfc:	f803 1b01 	strb.w	r1, [r3], #1
 8009c00:	e7f9      	b.n	8009bf6 <memset+0x4>
	...

08009c04 <_localeconv_r>:
 8009c04:	4800      	ldr	r0, [pc, #0]	@ (8009c08 <_localeconv_r+0x4>)
 8009c06:	4770      	bx	lr
 8009c08:	2400015c 	.word	0x2400015c

08009c0c <_close_r>:
 8009c0c:	b538      	push	{r3, r4, r5, lr}
 8009c0e:	4d06      	ldr	r5, [pc, #24]	@ (8009c28 <_close_r+0x1c>)
 8009c10:	2300      	movs	r3, #0
 8009c12:	4604      	mov	r4, r0
 8009c14:	4608      	mov	r0, r1
 8009c16:	602b      	str	r3, [r5, #0]
 8009c18:	f7f8 f823 	bl	8001c62 <_close>
 8009c1c:	1c43      	adds	r3, r0, #1
 8009c1e:	d102      	bne.n	8009c26 <_close_r+0x1a>
 8009c20:	682b      	ldr	r3, [r5, #0]
 8009c22:	b103      	cbz	r3, 8009c26 <_close_r+0x1a>
 8009c24:	6023      	str	r3, [r4, #0]
 8009c26:	bd38      	pop	{r3, r4, r5, pc}
 8009c28:	2400061c 	.word	0x2400061c

08009c2c <_lseek_r>:
 8009c2c:	b538      	push	{r3, r4, r5, lr}
 8009c2e:	4d07      	ldr	r5, [pc, #28]	@ (8009c4c <_lseek_r+0x20>)
 8009c30:	4604      	mov	r4, r0
 8009c32:	4608      	mov	r0, r1
 8009c34:	4611      	mov	r1, r2
 8009c36:	2200      	movs	r2, #0
 8009c38:	602a      	str	r2, [r5, #0]
 8009c3a:	461a      	mov	r2, r3
 8009c3c:	f7f8 f838 	bl	8001cb0 <_lseek>
 8009c40:	1c43      	adds	r3, r0, #1
 8009c42:	d102      	bne.n	8009c4a <_lseek_r+0x1e>
 8009c44:	682b      	ldr	r3, [r5, #0]
 8009c46:	b103      	cbz	r3, 8009c4a <_lseek_r+0x1e>
 8009c48:	6023      	str	r3, [r4, #0]
 8009c4a:	bd38      	pop	{r3, r4, r5, pc}
 8009c4c:	2400061c 	.word	0x2400061c

08009c50 <_read_r>:
 8009c50:	b538      	push	{r3, r4, r5, lr}
 8009c52:	4d07      	ldr	r5, [pc, #28]	@ (8009c70 <_read_r+0x20>)
 8009c54:	4604      	mov	r4, r0
 8009c56:	4608      	mov	r0, r1
 8009c58:	4611      	mov	r1, r2
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	602a      	str	r2, [r5, #0]
 8009c5e:	461a      	mov	r2, r3
 8009c60:	f7f7 ffc6 	bl	8001bf0 <_read>
 8009c64:	1c43      	adds	r3, r0, #1
 8009c66:	d102      	bne.n	8009c6e <_read_r+0x1e>
 8009c68:	682b      	ldr	r3, [r5, #0]
 8009c6a:	b103      	cbz	r3, 8009c6e <_read_r+0x1e>
 8009c6c:	6023      	str	r3, [r4, #0]
 8009c6e:	bd38      	pop	{r3, r4, r5, pc}
 8009c70:	2400061c 	.word	0x2400061c

08009c74 <_write_r>:
 8009c74:	b538      	push	{r3, r4, r5, lr}
 8009c76:	4d07      	ldr	r5, [pc, #28]	@ (8009c94 <_write_r+0x20>)
 8009c78:	4604      	mov	r4, r0
 8009c7a:	4608      	mov	r0, r1
 8009c7c:	4611      	mov	r1, r2
 8009c7e:	2200      	movs	r2, #0
 8009c80:	602a      	str	r2, [r5, #0]
 8009c82:	461a      	mov	r2, r3
 8009c84:	f7f7 ffd1 	bl	8001c2a <_write>
 8009c88:	1c43      	adds	r3, r0, #1
 8009c8a:	d102      	bne.n	8009c92 <_write_r+0x1e>
 8009c8c:	682b      	ldr	r3, [r5, #0]
 8009c8e:	b103      	cbz	r3, 8009c92 <_write_r+0x1e>
 8009c90:	6023      	str	r3, [r4, #0]
 8009c92:	bd38      	pop	{r3, r4, r5, pc}
 8009c94:	2400061c 	.word	0x2400061c

08009c98 <__errno>:
 8009c98:	4b01      	ldr	r3, [pc, #4]	@ (8009ca0 <__errno+0x8>)
 8009c9a:	6818      	ldr	r0, [r3, #0]
 8009c9c:	4770      	bx	lr
 8009c9e:	bf00      	nop
 8009ca0:	2400001c 	.word	0x2400001c

08009ca4 <__libc_init_array>:
 8009ca4:	b570      	push	{r4, r5, r6, lr}
 8009ca6:	4d0d      	ldr	r5, [pc, #52]	@ (8009cdc <__libc_init_array+0x38>)
 8009ca8:	4c0d      	ldr	r4, [pc, #52]	@ (8009ce0 <__libc_init_array+0x3c>)
 8009caa:	1b64      	subs	r4, r4, r5
 8009cac:	10a4      	asrs	r4, r4, #2
 8009cae:	2600      	movs	r6, #0
 8009cb0:	42a6      	cmp	r6, r4
 8009cb2:	d109      	bne.n	8009cc8 <__libc_init_array+0x24>
 8009cb4:	4d0b      	ldr	r5, [pc, #44]	@ (8009ce4 <__libc_init_array+0x40>)
 8009cb6:	4c0c      	ldr	r4, [pc, #48]	@ (8009ce8 <__libc_init_array+0x44>)
 8009cb8:	f003 fab0 	bl	800d21c <_init>
 8009cbc:	1b64      	subs	r4, r4, r5
 8009cbe:	10a4      	asrs	r4, r4, #2
 8009cc0:	2600      	movs	r6, #0
 8009cc2:	42a6      	cmp	r6, r4
 8009cc4:	d105      	bne.n	8009cd2 <__libc_init_array+0x2e>
 8009cc6:	bd70      	pop	{r4, r5, r6, pc}
 8009cc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ccc:	4798      	blx	r3
 8009cce:	3601      	adds	r6, #1
 8009cd0:	e7ee      	b.n	8009cb0 <__libc_init_array+0xc>
 8009cd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8009cd6:	4798      	blx	r3
 8009cd8:	3601      	adds	r6, #1
 8009cda:	e7f2      	b.n	8009cc2 <__libc_init_array+0x1e>
 8009cdc:	0800d8a0 	.word	0x0800d8a0
 8009ce0:	0800d8a0 	.word	0x0800d8a0
 8009ce4:	0800d8a0 	.word	0x0800d8a0
 8009ce8:	0800d8a4 	.word	0x0800d8a4

08009cec <__retarget_lock_init_recursive>:
 8009cec:	4770      	bx	lr

08009cee <__retarget_lock_acquire_recursive>:
 8009cee:	4770      	bx	lr

08009cf0 <__retarget_lock_release_recursive>:
 8009cf0:	4770      	bx	lr
	...

08009cf4 <nanf>:
 8009cf4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009cfc <nanf+0x8>
 8009cf8:	4770      	bx	lr
 8009cfa:	bf00      	nop
 8009cfc:	7fc00000 	.word	0x7fc00000

08009d00 <quorem>:
 8009d00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d04:	6903      	ldr	r3, [r0, #16]
 8009d06:	690c      	ldr	r4, [r1, #16]
 8009d08:	42a3      	cmp	r3, r4
 8009d0a:	4607      	mov	r7, r0
 8009d0c:	db7e      	blt.n	8009e0c <quorem+0x10c>
 8009d0e:	3c01      	subs	r4, #1
 8009d10:	f101 0814 	add.w	r8, r1, #20
 8009d14:	00a3      	lsls	r3, r4, #2
 8009d16:	f100 0514 	add.w	r5, r0, #20
 8009d1a:	9300      	str	r3, [sp, #0]
 8009d1c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009d20:	9301      	str	r3, [sp, #4]
 8009d22:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009d26:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009d2a:	3301      	adds	r3, #1
 8009d2c:	429a      	cmp	r2, r3
 8009d2e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009d32:	fbb2 f6f3 	udiv	r6, r2, r3
 8009d36:	d32e      	bcc.n	8009d96 <quorem+0x96>
 8009d38:	f04f 0a00 	mov.w	sl, #0
 8009d3c:	46c4      	mov	ip, r8
 8009d3e:	46ae      	mov	lr, r5
 8009d40:	46d3      	mov	fp, sl
 8009d42:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009d46:	b298      	uxth	r0, r3
 8009d48:	fb06 a000 	mla	r0, r6, r0, sl
 8009d4c:	0c02      	lsrs	r2, r0, #16
 8009d4e:	0c1b      	lsrs	r3, r3, #16
 8009d50:	fb06 2303 	mla	r3, r6, r3, r2
 8009d54:	f8de 2000 	ldr.w	r2, [lr]
 8009d58:	b280      	uxth	r0, r0
 8009d5a:	b292      	uxth	r2, r2
 8009d5c:	1a12      	subs	r2, r2, r0
 8009d5e:	445a      	add	r2, fp
 8009d60:	f8de 0000 	ldr.w	r0, [lr]
 8009d64:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009d68:	b29b      	uxth	r3, r3
 8009d6a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009d6e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009d72:	b292      	uxth	r2, r2
 8009d74:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009d78:	45e1      	cmp	r9, ip
 8009d7a:	f84e 2b04 	str.w	r2, [lr], #4
 8009d7e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009d82:	d2de      	bcs.n	8009d42 <quorem+0x42>
 8009d84:	9b00      	ldr	r3, [sp, #0]
 8009d86:	58eb      	ldr	r3, [r5, r3]
 8009d88:	b92b      	cbnz	r3, 8009d96 <quorem+0x96>
 8009d8a:	9b01      	ldr	r3, [sp, #4]
 8009d8c:	3b04      	subs	r3, #4
 8009d8e:	429d      	cmp	r5, r3
 8009d90:	461a      	mov	r2, r3
 8009d92:	d32f      	bcc.n	8009df4 <quorem+0xf4>
 8009d94:	613c      	str	r4, [r7, #16]
 8009d96:	4638      	mov	r0, r7
 8009d98:	f001 f954 	bl	800b044 <__mcmp>
 8009d9c:	2800      	cmp	r0, #0
 8009d9e:	db25      	blt.n	8009dec <quorem+0xec>
 8009da0:	4629      	mov	r1, r5
 8009da2:	2000      	movs	r0, #0
 8009da4:	f858 2b04 	ldr.w	r2, [r8], #4
 8009da8:	f8d1 c000 	ldr.w	ip, [r1]
 8009dac:	fa1f fe82 	uxth.w	lr, r2
 8009db0:	fa1f f38c 	uxth.w	r3, ip
 8009db4:	eba3 030e 	sub.w	r3, r3, lr
 8009db8:	4403      	add	r3, r0
 8009dba:	0c12      	lsrs	r2, r2, #16
 8009dbc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009dc0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009dc4:	b29b      	uxth	r3, r3
 8009dc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009dca:	45c1      	cmp	r9, r8
 8009dcc:	f841 3b04 	str.w	r3, [r1], #4
 8009dd0:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009dd4:	d2e6      	bcs.n	8009da4 <quorem+0xa4>
 8009dd6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009dda:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009dde:	b922      	cbnz	r2, 8009dea <quorem+0xea>
 8009de0:	3b04      	subs	r3, #4
 8009de2:	429d      	cmp	r5, r3
 8009de4:	461a      	mov	r2, r3
 8009de6:	d30b      	bcc.n	8009e00 <quorem+0x100>
 8009de8:	613c      	str	r4, [r7, #16]
 8009dea:	3601      	adds	r6, #1
 8009dec:	4630      	mov	r0, r6
 8009dee:	b003      	add	sp, #12
 8009df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009df4:	6812      	ldr	r2, [r2, #0]
 8009df6:	3b04      	subs	r3, #4
 8009df8:	2a00      	cmp	r2, #0
 8009dfa:	d1cb      	bne.n	8009d94 <quorem+0x94>
 8009dfc:	3c01      	subs	r4, #1
 8009dfe:	e7c6      	b.n	8009d8e <quorem+0x8e>
 8009e00:	6812      	ldr	r2, [r2, #0]
 8009e02:	3b04      	subs	r3, #4
 8009e04:	2a00      	cmp	r2, #0
 8009e06:	d1ef      	bne.n	8009de8 <quorem+0xe8>
 8009e08:	3c01      	subs	r4, #1
 8009e0a:	e7ea      	b.n	8009de2 <quorem+0xe2>
 8009e0c:	2000      	movs	r0, #0
 8009e0e:	e7ee      	b.n	8009dee <quorem+0xee>

08009e10 <_dtoa_r>:
 8009e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e14:	ed2d 8b02 	vpush	{d8}
 8009e18:	69c7      	ldr	r7, [r0, #28]
 8009e1a:	b091      	sub	sp, #68	@ 0x44
 8009e1c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009e20:	ec55 4b10 	vmov	r4, r5, d0
 8009e24:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8009e26:	9107      	str	r1, [sp, #28]
 8009e28:	4681      	mov	r9, r0
 8009e2a:	9209      	str	r2, [sp, #36]	@ 0x24
 8009e2c:	930d      	str	r3, [sp, #52]	@ 0x34
 8009e2e:	b97f      	cbnz	r7, 8009e50 <_dtoa_r+0x40>
 8009e30:	2010      	movs	r0, #16
 8009e32:	f000 fd8d 	bl	800a950 <malloc>
 8009e36:	4602      	mov	r2, r0
 8009e38:	f8c9 001c 	str.w	r0, [r9, #28]
 8009e3c:	b920      	cbnz	r0, 8009e48 <_dtoa_r+0x38>
 8009e3e:	4ba0      	ldr	r3, [pc, #640]	@ (800a0c0 <_dtoa_r+0x2b0>)
 8009e40:	21ef      	movs	r1, #239	@ 0xef
 8009e42:	48a0      	ldr	r0, [pc, #640]	@ (800a0c4 <_dtoa_r+0x2b4>)
 8009e44:	f002 fb74 	bl	800c530 <__assert_func>
 8009e48:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009e4c:	6007      	str	r7, [r0, #0]
 8009e4e:	60c7      	str	r7, [r0, #12]
 8009e50:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009e54:	6819      	ldr	r1, [r3, #0]
 8009e56:	b159      	cbz	r1, 8009e70 <_dtoa_r+0x60>
 8009e58:	685a      	ldr	r2, [r3, #4]
 8009e5a:	604a      	str	r2, [r1, #4]
 8009e5c:	2301      	movs	r3, #1
 8009e5e:	4093      	lsls	r3, r2
 8009e60:	608b      	str	r3, [r1, #8]
 8009e62:	4648      	mov	r0, r9
 8009e64:	f000 fe6a 	bl	800ab3c <_Bfree>
 8009e68:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	601a      	str	r2, [r3, #0]
 8009e70:	1e2b      	subs	r3, r5, #0
 8009e72:	bfbb      	ittet	lt
 8009e74:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009e78:	9303      	strlt	r3, [sp, #12]
 8009e7a:	2300      	movge	r3, #0
 8009e7c:	2201      	movlt	r2, #1
 8009e7e:	bfac      	ite	ge
 8009e80:	6033      	strge	r3, [r6, #0]
 8009e82:	6032      	strlt	r2, [r6, #0]
 8009e84:	4b90      	ldr	r3, [pc, #576]	@ (800a0c8 <_dtoa_r+0x2b8>)
 8009e86:	9e03      	ldr	r6, [sp, #12]
 8009e88:	43b3      	bics	r3, r6
 8009e8a:	d110      	bne.n	8009eae <_dtoa_r+0x9e>
 8009e8c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009e8e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009e92:	6013      	str	r3, [r2, #0]
 8009e94:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8009e98:	4323      	orrs	r3, r4
 8009e9a:	f000 84de 	beq.w	800a85a <_dtoa_r+0xa4a>
 8009e9e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009ea0:	4f8a      	ldr	r7, [pc, #552]	@ (800a0cc <_dtoa_r+0x2bc>)
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	f000 84e0 	beq.w	800a868 <_dtoa_r+0xa58>
 8009ea8:	1cfb      	adds	r3, r7, #3
 8009eaa:	f000 bcdb 	b.w	800a864 <_dtoa_r+0xa54>
 8009eae:	ed9d 8b02 	vldr	d8, [sp, #8]
 8009eb2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009eb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009eba:	d10a      	bne.n	8009ed2 <_dtoa_r+0xc2>
 8009ebc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	6013      	str	r3, [r2, #0]
 8009ec2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009ec4:	b113      	cbz	r3, 8009ecc <_dtoa_r+0xbc>
 8009ec6:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8009ec8:	4b81      	ldr	r3, [pc, #516]	@ (800a0d0 <_dtoa_r+0x2c0>)
 8009eca:	6013      	str	r3, [r2, #0]
 8009ecc:	4f81      	ldr	r7, [pc, #516]	@ (800a0d4 <_dtoa_r+0x2c4>)
 8009ece:	f000 bccb 	b.w	800a868 <_dtoa_r+0xa58>
 8009ed2:	aa0e      	add	r2, sp, #56	@ 0x38
 8009ed4:	a90f      	add	r1, sp, #60	@ 0x3c
 8009ed6:	4648      	mov	r0, r9
 8009ed8:	eeb0 0b48 	vmov.f64	d0, d8
 8009edc:	f001 f9d2 	bl	800b284 <__d2b>
 8009ee0:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8009ee4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009ee6:	9001      	str	r0, [sp, #4]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d045      	beq.n	8009f78 <_dtoa_r+0x168>
 8009eec:	eeb0 7b48 	vmov.f64	d7, d8
 8009ef0:	ee18 1a90 	vmov	r1, s17
 8009ef4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8009ef8:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8009efc:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8009f00:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8009f04:	2500      	movs	r5, #0
 8009f06:	ee07 1a90 	vmov	s15, r1
 8009f0a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8009f0e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800a0a8 <_dtoa_r+0x298>
 8009f12:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009f16:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800a0b0 <_dtoa_r+0x2a0>
 8009f1a:	eea7 6b05 	vfma.f64	d6, d7, d5
 8009f1e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800a0b8 <_dtoa_r+0x2a8>
 8009f22:	ee07 3a90 	vmov	s15, r3
 8009f26:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8009f2a:	eeb0 7b46 	vmov.f64	d7, d6
 8009f2e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8009f32:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8009f36:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8009f3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f3e:	ee16 8a90 	vmov	r8, s13
 8009f42:	d508      	bpl.n	8009f56 <_dtoa_r+0x146>
 8009f44:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8009f48:	eeb4 6b47 	vcmp.f64	d6, d7
 8009f4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f50:	bf18      	it	ne
 8009f52:	f108 38ff 	addne.w	r8, r8, #4294967295
 8009f56:	f1b8 0f16 	cmp.w	r8, #22
 8009f5a:	d82b      	bhi.n	8009fb4 <_dtoa_r+0x1a4>
 8009f5c:	495e      	ldr	r1, [pc, #376]	@ (800a0d8 <_dtoa_r+0x2c8>)
 8009f5e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8009f62:	ed91 7b00 	vldr	d7, [r1]
 8009f66:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8009f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f6e:	d501      	bpl.n	8009f74 <_dtoa_r+0x164>
 8009f70:	f108 38ff 	add.w	r8, r8, #4294967295
 8009f74:	2100      	movs	r1, #0
 8009f76:	e01e      	b.n	8009fb6 <_dtoa_r+0x1a6>
 8009f78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f7a:	4413      	add	r3, r2
 8009f7c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8009f80:	2920      	cmp	r1, #32
 8009f82:	bfc1      	itttt	gt
 8009f84:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8009f88:	408e      	lslgt	r6, r1
 8009f8a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8009f8e:	fa24 f101 	lsrgt.w	r1, r4, r1
 8009f92:	bfd6      	itet	le
 8009f94:	f1c1 0120 	rsble	r1, r1, #32
 8009f98:	4331      	orrgt	r1, r6
 8009f9a:	fa04 f101 	lslle.w	r1, r4, r1
 8009f9e:	ee07 1a90 	vmov	s15, r1
 8009fa2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8009fa6:	3b01      	subs	r3, #1
 8009fa8:	ee17 1a90 	vmov	r1, s15
 8009fac:	2501      	movs	r5, #1
 8009fae:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8009fb2:	e7a8      	b.n	8009f06 <_dtoa_r+0xf6>
 8009fb4:	2101      	movs	r1, #1
 8009fb6:	1ad2      	subs	r2, r2, r3
 8009fb8:	1e53      	subs	r3, r2, #1
 8009fba:	9306      	str	r3, [sp, #24]
 8009fbc:	bf45      	ittet	mi
 8009fbe:	f1c2 0301 	rsbmi	r3, r2, #1
 8009fc2:	9305      	strmi	r3, [sp, #20]
 8009fc4:	2300      	movpl	r3, #0
 8009fc6:	2300      	movmi	r3, #0
 8009fc8:	bf4c      	ite	mi
 8009fca:	9306      	strmi	r3, [sp, #24]
 8009fcc:	9305      	strpl	r3, [sp, #20]
 8009fce:	f1b8 0f00 	cmp.w	r8, #0
 8009fd2:	910c      	str	r1, [sp, #48]	@ 0x30
 8009fd4:	db18      	blt.n	800a008 <_dtoa_r+0x1f8>
 8009fd6:	9b06      	ldr	r3, [sp, #24]
 8009fd8:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8009fdc:	4443      	add	r3, r8
 8009fde:	9306      	str	r3, [sp, #24]
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	9a07      	ldr	r2, [sp, #28]
 8009fe4:	2a09      	cmp	r2, #9
 8009fe6:	d849      	bhi.n	800a07c <_dtoa_r+0x26c>
 8009fe8:	2a05      	cmp	r2, #5
 8009fea:	bfc4      	itt	gt
 8009fec:	3a04      	subgt	r2, #4
 8009fee:	9207      	strgt	r2, [sp, #28]
 8009ff0:	9a07      	ldr	r2, [sp, #28]
 8009ff2:	f1a2 0202 	sub.w	r2, r2, #2
 8009ff6:	bfcc      	ite	gt
 8009ff8:	2400      	movgt	r4, #0
 8009ffa:	2401      	movle	r4, #1
 8009ffc:	2a03      	cmp	r2, #3
 8009ffe:	d848      	bhi.n	800a092 <_dtoa_r+0x282>
 800a000:	e8df f002 	tbb	[pc, r2]
 800a004:	3a2c2e0b 	.word	0x3a2c2e0b
 800a008:	9b05      	ldr	r3, [sp, #20]
 800a00a:	2200      	movs	r2, #0
 800a00c:	eba3 0308 	sub.w	r3, r3, r8
 800a010:	9305      	str	r3, [sp, #20]
 800a012:	920a      	str	r2, [sp, #40]	@ 0x28
 800a014:	f1c8 0300 	rsb	r3, r8, #0
 800a018:	e7e3      	b.n	8009fe2 <_dtoa_r+0x1d2>
 800a01a:	2200      	movs	r2, #0
 800a01c:	9208      	str	r2, [sp, #32]
 800a01e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a020:	2a00      	cmp	r2, #0
 800a022:	dc39      	bgt.n	800a098 <_dtoa_r+0x288>
 800a024:	f04f 0b01 	mov.w	fp, #1
 800a028:	46da      	mov	sl, fp
 800a02a:	465a      	mov	r2, fp
 800a02c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800a030:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800a034:	2100      	movs	r1, #0
 800a036:	2004      	movs	r0, #4
 800a038:	f100 0614 	add.w	r6, r0, #20
 800a03c:	4296      	cmp	r6, r2
 800a03e:	d930      	bls.n	800a0a2 <_dtoa_r+0x292>
 800a040:	6079      	str	r1, [r7, #4]
 800a042:	4648      	mov	r0, r9
 800a044:	9304      	str	r3, [sp, #16]
 800a046:	f000 fd39 	bl	800aabc <_Balloc>
 800a04a:	9b04      	ldr	r3, [sp, #16]
 800a04c:	4607      	mov	r7, r0
 800a04e:	2800      	cmp	r0, #0
 800a050:	d146      	bne.n	800a0e0 <_dtoa_r+0x2d0>
 800a052:	4b22      	ldr	r3, [pc, #136]	@ (800a0dc <_dtoa_r+0x2cc>)
 800a054:	4602      	mov	r2, r0
 800a056:	f240 11af 	movw	r1, #431	@ 0x1af
 800a05a:	e6f2      	b.n	8009e42 <_dtoa_r+0x32>
 800a05c:	2201      	movs	r2, #1
 800a05e:	e7dd      	b.n	800a01c <_dtoa_r+0x20c>
 800a060:	2200      	movs	r2, #0
 800a062:	9208      	str	r2, [sp, #32]
 800a064:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a066:	eb08 0b02 	add.w	fp, r8, r2
 800a06a:	f10b 0a01 	add.w	sl, fp, #1
 800a06e:	4652      	mov	r2, sl
 800a070:	2a01      	cmp	r2, #1
 800a072:	bfb8      	it	lt
 800a074:	2201      	movlt	r2, #1
 800a076:	e7db      	b.n	800a030 <_dtoa_r+0x220>
 800a078:	2201      	movs	r2, #1
 800a07a:	e7f2      	b.n	800a062 <_dtoa_r+0x252>
 800a07c:	2401      	movs	r4, #1
 800a07e:	2200      	movs	r2, #0
 800a080:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800a084:	f04f 3bff 	mov.w	fp, #4294967295
 800a088:	2100      	movs	r1, #0
 800a08a:	46da      	mov	sl, fp
 800a08c:	2212      	movs	r2, #18
 800a08e:	9109      	str	r1, [sp, #36]	@ 0x24
 800a090:	e7ce      	b.n	800a030 <_dtoa_r+0x220>
 800a092:	2201      	movs	r2, #1
 800a094:	9208      	str	r2, [sp, #32]
 800a096:	e7f5      	b.n	800a084 <_dtoa_r+0x274>
 800a098:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800a09c:	46da      	mov	sl, fp
 800a09e:	465a      	mov	r2, fp
 800a0a0:	e7c6      	b.n	800a030 <_dtoa_r+0x220>
 800a0a2:	3101      	adds	r1, #1
 800a0a4:	0040      	lsls	r0, r0, #1
 800a0a6:	e7c7      	b.n	800a038 <_dtoa_r+0x228>
 800a0a8:	636f4361 	.word	0x636f4361
 800a0ac:	3fd287a7 	.word	0x3fd287a7
 800a0b0:	8b60c8b3 	.word	0x8b60c8b3
 800a0b4:	3fc68a28 	.word	0x3fc68a28
 800a0b8:	509f79fb 	.word	0x509f79fb
 800a0bc:	3fd34413 	.word	0x3fd34413
 800a0c0:	0800d4b2 	.word	0x0800d4b2
 800a0c4:	0800d4c9 	.word	0x0800d4c9
 800a0c8:	7ff00000 	.word	0x7ff00000
 800a0cc:	0800d4ae 	.word	0x0800d4ae
 800a0d0:	0800d47d 	.word	0x0800d47d
 800a0d4:	0800d47c 	.word	0x0800d47c
 800a0d8:	0800d5c0 	.word	0x0800d5c0
 800a0dc:	0800d521 	.word	0x0800d521
 800a0e0:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800a0e4:	f1ba 0f0e 	cmp.w	sl, #14
 800a0e8:	6010      	str	r0, [r2, #0]
 800a0ea:	d86f      	bhi.n	800a1cc <_dtoa_r+0x3bc>
 800a0ec:	2c00      	cmp	r4, #0
 800a0ee:	d06d      	beq.n	800a1cc <_dtoa_r+0x3bc>
 800a0f0:	f1b8 0f00 	cmp.w	r8, #0
 800a0f4:	f340 80c2 	ble.w	800a27c <_dtoa_r+0x46c>
 800a0f8:	4aca      	ldr	r2, [pc, #808]	@ (800a424 <_dtoa_r+0x614>)
 800a0fa:	f008 010f 	and.w	r1, r8, #15
 800a0fe:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800a102:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800a106:	ed92 7b00 	vldr	d7, [r2]
 800a10a:	ea4f 1128 	mov.w	r1, r8, asr #4
 800a10e:	f000 80a9 	beq.w	800a264 <_dtoa_r+0x454>
 800a112:	4ac5      	ldr	r2, [pc, #788]	@ (800a428 <_dtoa_r+0x618>)
 800a114:	ed92 6b08 	vldr	d6, [r2, #32]
 800a118:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800a11c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800a120:	f001 010f 	and.w	r1, r1, #15
 800a124:	2203      	movs	r2, #3
 800a126:	48c0      	ldr	r0, [pc, #768]	@ (800a428 <_dtoa_r+0x618>)
 800a128:	2900      	cmp	r1, #0
 800a12a:	f040 809d 	bne.w	800a268 <_dtoa_r+0x458>
 800a12e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a132:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800a136:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a13a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a13c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a140:	2900      	cmp	r1, #0
 800a142:	f000 80c1 	beq.w	800a2c8 <_dtoa_r+0x4b8>
 800a146:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800a14a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a14e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a152:	f140 80b9 	bpl.w	800a2c8 <_dtoa_r+0x4b8>
 800a156:	f1ba 0f00 	cmp.w	sl, #0
 800a15a:	f000 80b5 	beq.w	800a2c8 <_dtoa_r+0x4b8>
 800a15e:	f1bb 0f00 	cmp.w	fp, #0
 800a162:	dd31      	ble.n	800a1c8 <_dtoa_r+0x3b8>
 800a164:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800a168:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a16c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a170:	f108 31ff 	add.w	r1, r8, #4294967295
 800a174:	9104      	str	r1, [sp, #16]
 800a176:	3201      	adds	r2, #1
 800a178:	465c      	mov	r4, fp
 800a17a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a17e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800a182:	ee07 2a90 	vmov	s15, r2
 800a186:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a18a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800a18e:	ee15 2a90 	vmov	r2, s11
 800a192:	ec51 0b15 	vmov	r0, r1, d5
 800a196:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800a19a:	2c00      	cmp	r4, #0
 800a19c:	f040 8098 	bne.w	800a2d0 <_dtoa_r+0x4c0>
 800a1a0:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800a1a4:	ee36 6b47 	vsub.f64	d6, d6, d7
 800a1a8:	ec41 0b17 	vmov	d7, r0, r1
 800a1ac:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a1b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1b4:	f300 8261 	bgt.w	800a67a <_dtoa_r+0x86a>
 800a1b8:	eeb1 7b47 	vneg.f64	d7, d7
 800a1bc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a1c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1c4:	f100 80f5 	bmi.w	800a3b2 <_dtoa_r+0x5a2>
 800a1c8:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a1cc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a1ce:	2a00      	cmp	r2, #0
 800a1d0:	f2c0 812c 	blt.w	800a42c <_dtoa_r+0x61c>
 800a1d4:	f1b8 0f0e 	cmp.w	r8, #14
 800a1d8:	f300 8128 	bgt.w	800a42c <_dtoa_r+0x61c>
 800a1dc:	4b91      	ldr	r3, [pc, #580]	@ (800a424 <_dtoa_r+0x614>)
 800a1de:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a1e2:	ed93 6b00 	vldr	d6, [r3]
 800a1e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	da03      	bge.n	800a1f4 <_dtoa_r+0x3e4>
 800a1ec:	f1ba 0f00 	cmp.w	sl, #0
 800a1f0:	f340 80d2 	ble.w	800a398 <_dtoa_r+0x588>
 800a1f4:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800a1f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a1fc:	463e      	mov	r6, r7
 800a1fe:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800a202:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800a206:	ee15 3a10 	vmov	r3, s10
 800a20a:	3330      	adds	r3, #48	@ 0x30
 800a20c:	f806 3b01 	strb.w	r3, [r6], #1
 800a210:	1bf3      	subs	r3, r6, r7
 800a212:	459a      	cmp	sl, r3
 800a214:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800a218:	eea3 7b46 	vfms.f64	d7, d3, d6
 800a21c:	f040 80f8 	bne.w	800a410 <_dtoa_r+0x600>
 800a220:	ee37 7b07 	vadd.f64	d7, d7, d7
 800a224:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a22c:	f300 80dd 	bgt.w	800a3ea <_dtoa_r+0x5da>
 800a230:	eeb4 7b46 	vcmp.f64	d7, d6
 800a234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a238:	d104      	bne.n	800a244 <_dtoa_r+0x434>
 800a23a:	ee15 3a10 	vmov	r3, s10
 800a23e:	07db      	lsls	r3, r3, #31
 800a240:	f100 80d3 	bmi.w	800a3ea <_dtoa_r+0x5da>
 800a244:	9901      	ldr	r1, [sp, #4]
 800a246:	4648      	mov	r0, r9
 800a248:	f000 fc78 	bl	800ab3c <_Bfree>
 800a24c:	2300      	movs	r3, #0
 800a24e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a250:	7033      	strb	r3, [r6, #0]
 800a252:	f108 0301 	add.w	r3, r8, #1
 800a256:	6013      	str	r3, [r2, #0]
 800a258:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	f000 8304 	beq.w	800a868 <_dtoa_r+0xa58>
 800a260:	601e      	str	r6, [r3, #0]
 800a262:	e301      	b.n	800a868 <_dtoa_r+0xa58>
 800a264:	2202      	movs	r2, #2
 800a266:	e75e      	b.n	800a126 <_dtoa_r+0x316>
 800a268:	07cc      	lsls	r4, r1, #31
 800a26a:	d504      	bpl.n	800a276 <_dtoa_r+0x466>
 800a26c:	ed90 6b00 	vldr	d6, [r0]
 800a270:	3201      	adds	r2, #1
 800a272:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a276:	1049      	asrs	r1, r1, #1
 800a278:	3008      	adds	r0, #8
 800a27a:	e755      	b.n	800a128 <_dtoa_r+0x318>
 800a27c:	d022      	beq.n	800a2c4 <_dtoa_r+0x4b4>
 800a27e:	f1c8 0100 	rsb	r1, r8, #0
 800a282:	4a68      	ldr	r2, [pc, #416]	@ (800a424 <_dtoa_r+0x614>)
 800a284:	f001 000f 	and.w	r0, r1, #15
 800a288:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800a28c:	ed92 7b00 	vldr	d7, [r2]
 800a290:	ee28 7b07 	vmul.f64	d7, d8, d7
 800a294:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a298:	4863      	ldr	r0, [pc, #396]	@ (800a428 <_dtoa_r+0x618>)
 800a29a:	1109      	asrs	r1, r1, #4
 800a29c:	2400      	movs	r4, #0
 800a29e:	2202      	movs	r2, #2
 800a2a0:	b929      	cbnz	r1, 800a2ae <_dtoa_r+0x49e>
 800a2a2:	2c00      	cmp	r4, #0
 800a2a4:	f43f af49 	beq.w	800a13a <_dtoa_r+0x32a>
 800a2a8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a2ac:	e745      	b.n	800a13a <_dtoa_r+0x32a>
 800a2ae:	07ce      	lsls	r6, r1, #31
 800a2b0:	d505      	bpl.n	800a2be <_dtoa_r+0x4ae>
 800a2b2:	ed90 6b00 	vldr	d6, [r0]
 800a2b6:	3201      	adds	r2, #1
 800a2b8:	2401      	movs	r4, #1
 800a2ba:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a2be:	1049      	asrs	r1, r1, #1
 800a2c0:	3008      	adds	r0, #8
 800a2c2:	e7ed      	b.n	800a2a0 <_dtoa_r+0x490>
 800a2c4:	2202      	movs	r2, #2
 800a2c6:	e738      	b.n	800a13a <_dtoa_r+0x32a>
 800a2c8:	f8cd 8010 	str.w	r8, [sp, #16]
 800a2cc:	4654      	mov	r4, sl
 800a2ce:	e754      	b.n	800a17a <_dtoa_r+0x36a>
 800a2d0:	4a54      	ldr	r2, [pc, #336]	@ (800a424 <_dtoa_r+0x614>)
 800a2d2:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800a2d6:	ed12 4b02 	vldr	d4, [r2, #-8]
 800a2da:	9a08      	ldr	r2, [sp, #32]
 800a2dc:	ec41 0b17 	vmov	d7, r0, r1
 800a2e0:	443c      	add	r4, r7
 800a2e2:	b34a      	cbz	r2, 800a338 <_dtoa_r+0x528>
 800a2e4:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800a2e8:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800a2ec:	463e      	mov	r6, r7
 800a2ee:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800a2f2:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800a2f6:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a2fa:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a2fe:	ee14 2a90 	vmov	r2, s9
 800a302:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a306:	3230      	adds	r2, #48	@ 0x30
 800a308:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a30c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a314:	f806 2b01 	strb.w	r2, [r6], #1
 800a318:	d438      	bmi.n	800a38c <_dtoa_r+0x57c>
 800a31a:	ee32 5b46 	vsub.f64	d5, d2, d6
 800a31e:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800a322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a326:	d462      	bmi.n	800a3ee <_dtoa_r+0x5de>
 800a328:	42a6      	cmp	r6, r4
 800a32a:	f43f af4d 	beq.w	800a1c8 <_dtoa_r+0x3b8>
 800a32e:	ee27 7b03 	vmul.f64	d7, d7, d3
 800a332:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a336:	e7e0      	b.n	800a2fa <_dtoa_r+0x4ea>
 800a338:	4621      	mov	r1, r4
 800a33a:	463e      	mov	r6, r7
 800a33c:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a340:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800a344:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a348:	ee14 2a90 	vmov	r2, s9
 800a34c:	3230      	adds	r2, #48	@ 0x30
 800a34e:	f806 2b01 	strb.w	r2, [r6], #1
 800a352:	42a6      	cmp	r6, r4
 800a354:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a358:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a35c:	d119      	bne.n	800a392 <_dtoa_r+0x582>
 800a35e:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800a362:	ee37 4b05 	vadd.f64	d4, d7, d5
 800a366:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800a36a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a36e:	dc3e      	bgt.n	800a3ee <_dtoa_r+0x5de>
 800a370:	ee35 5b47 	vsub.f64	d5, d5, d7
 800a374:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800a378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a37c:	f57f af24 	bpl.w	800a1c8 <_dtoa_r+0x3b8>
 800a380:	460e      	mov	r6, r1
 800a382:	3901      	subs	r1, #1
 800a384:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a388:	2b30      	cmp	r3, #48	@ 0x30
 800a38a:	d0f9      	beq.n	800a380 <_dtoa_r+0x570>
 800a38c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a390:	e758      	b.n	800a244 <_dtoa_r+0x434>
 800a392:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a396:	e7d5      	b.n	800a344 <_dtoa_r+0x534>
 800a398:	d10b      	bne.n	800a3b2 <_dtoa_r+0x5a2>
 800a39a:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800a39e:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a3a2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a3a6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a3aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3ae:	f2c0 8161 	blt.w	800a674 <_dtoa_r+0x864>
 800a3b2:	2400      	movs	r4, #0
 800a3b4:	4625      	mov	r5, r4
 800a3b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3b8:	43db      	mvns	r3, r3
 800a3ba:	9304      	str	r3, [sp, #16]
 800a3bc:	463e      	mov	r6, r7
 800a3be:	f04f 0800 	mov.w	r8, #0
 800a3c2:	4621      	mov	r1, r4
 800a3c4:	4648      	mov	r0, r9
 800a3c6:	f000 fbb9 	bl	800ab3c <_Bfree>
 800a3ca:	2d00      	cmp	r5, #0
 800a3cc:	d0de      	beq.n	800a38c <_dtoa_r+0x57c>
 800a3ce:	f1b8 0f00 	cmp.w	r8, #0
 800a3d2:	d005      	beq.n	800a3e0 <_dtoa_r+0x5d0>
 800a3d4:	45a8      	cmp	r8, r5
 800a3d6:	d003      	beq.n	800a3e0 <_dtoa_r+0x5d0>
 800a3d8:	4641      	mov	r1, r8
 800a3da:	4648      	mov	r0, r9
 800a3dc:	f000 fbae 	bl	800ab3c <_Bfree>
 800a3e0:	4629      	mov	r1, r5
 800a3e2:	4648      	mov	r0, r9
 800a3e4:	f000 fbaa 	bl	800ab3c <_Bfree>
 800a3e8:	e7d0      	b.n	800a38c <_dtoa_r+0x57c>
 800a3ea:	f8cd 8010 	str.w	r8, [sp, #16]
 800a3ee:	4633      	mov	r3, r6
 800a3f0:	461e      	mov	r6, r3
 800a3f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a3f6:	2a39      	cmp	r2, #57	@ 0x39
 800a3f8:	d106      	bne.n	800a408 <_dtoa_r+0x5f8>
 800a3fa:	429f      	cmp	r7, r3
 800a3fc:	d1f8      	bne.n	800a3f0 <_dtoa_r+0x5e0>
 800a3fe:	9a04      	ldr	r2, [sp, #16]
 800a400:	3201      	adds	r2, #1
 800a402:	9204      	str	r2, [sp, #16]
 800a404:	2230      	movs	r2, #48	@ 0x30
 800a406:	703a      	strb	r2, [r7, #0]
 800a408:	781a      	ldrb	r2, [r3, #0]
 800a40a:	3201      	adds	r2, #1
 800a40c:	701a      	strb	r2, [r3, #0]
 800a40e:	e7bd      	b.n	800a38c <_dtoa_r+0x57c>
 800a410:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a414:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a41c:	f47f aeef 	bne.w	800a1fe <_dtoa_r+0x3ee>
 800a420:	e710      	b.n	800a244 <_dtoa_r+0x434>
 800a422:	bf00      	nop
 800a424:	0800d5c0 	.word	0x0800d5c0
 800a428:	0800d598 	.word	0x0800d598
 800a42c:	9908      	ldr	r1, [sp, #32]
 800a42e:	2900      	cmp	r1, #0
 800a430:	f000 80e3 	beq.w	800a5fa <_dtoa_r+0x7ea>
 800a434:	9907      	ldr	r1, [sp, #28]
 800a436:	2901      	cmp	r1, #1
 800a438:	f300 80c8 	bgt.w	800a5cc <_dtoa_r+0x7bc>
 800a43c:	2d00      	cmp	r5, #0
 800a43e:	f000 80c1 	beq.w	800a5c4 <_dtoa_r+0x7b4>
 800a442:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a446:	9e05      	ldr	r6, [sp, #20]
 800a448:	461c      	mov	r4, r3
 800a44a:	9304      	str	r3, [sp, #16]
 800a44c:	9b05      	ldr	r3, [sp, #20]
 800a44e:	4413      	add	r3, r2
 800a450:	9305      	str	r3, [sp, #20]
 800a452:	9b06      	ldr	r3, [sp, #24]
 800a454:	2101      	movs	r1, #1
 800a456:	4413      	add	r3, r2
 800a458:	4648      	mov	r0, r9
 800a45a:	9306      	str	r3, [sp, #24]
 800a45c:	f000 fc6c 	bl	800ad38 <__i2b>
 800a460:	9b04      	ldr	r3, [sp, #16]
 800a462:	4605      	mov	r5, r0
 800a464:	b166      	cbz	r6, 800a480 <_dtoa_r+0x670>
 800a466:	9a06      	ldr	r2, [sp, #24]
 800a468:	2a00      	cmp	r2, #0
 800a46a:	dd09      	ble.n	800a480 <_dtoa_r+0x670>
 800a46c:	42b2      	cmp	r2, r6
 800a46e:	9905      	ldr	r1, [sp, #20]
 800a470:	bfa8      	it	ge
 800a472:	4632      	movge	r2, r6
 800a474:	1a89      	subs	r1, r1, r2
 800a476:	9105      	str	r1, [sp, #20]
 800a478:	9906      	ldr	r1, [sp, #24]
 800a47a:	1ab6      	subs	r6, r6, r2
 800a47c:	1a8a      	subs	r2, r1, r2
 800a47e:	9206      	str	r2, [sp, #24]
 800a480:	b1fb      	cbz	r3, 800a4c2 <_dtoa_r+0x6b2>
 800a482:	9a08      	ldr	r2, [sp, #32]
 800a484:	2a00      	cmp	r2, #0
 800a486:	f000 80bc 	beq.w	800a602 <_dtoa_r+0x7f2>
 800a48a:	b19c      	cbz	r4, 800a4b4 <_dtoa_r+0x6a4>
 800a48c:	4629      	mov	r1, r5
 800a48e:	4622      	mov	r2, r4
 800a490:	4648      	mov	r0, r9
 800a492:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a494:	f000 fd10 	bl	800aeb8 <__pow5mult>
 800a498:	9a01      	ldr	r2, [sp, #4]
 800a49a:	4601      	mov	r1, r0
 800a49c:	4605      	mov	r5, r0
 800a49e:	4648      	mov	r0, r9
 800a4a0:	f000 fc60 	bl	800ad64 <__multiply>
 800a4a4:	9901      	ldr	r1, [sp, #4]
 800a4a6:	9004      	str	r0, [sp, #16]
 800a4a8:	4648      	mov	r0, r9
 800a4aa:	f000 fb47 	bl	800ab3c <_Bfree>
 800a4ae:	9a04      	ldr	r2, [sp, #16]
 800a4b0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a4b2:	9201      	str	r2, [sp, #4]
 800a4b4:	1b1a      	subs	r2, r3, r4
 800a4b6:	d004      	beq.n	800a4c2 <_dtoa_r+0x6b2>
 800a4b8:	9901      	ldr	r1, [sp, #4]
 800a4ba:	4648      	mov	r0, r9
 800a4bc:	f000 fcfc 	bl	800aeb8 <__pow5mult>
 800a4c0:	9001      	str	r0, [sp, #4]
 800a4c2:	2101      	movs	r1, #1
 800a4c4:	4648      	mov	r0, r9
 800a4c6:	f000 fc37 	bl	800ad38 <__i2b>
 800a4ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a4cc:	4604      	mov	r4, r0
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	f000 81d0 	beq.w	800a874 <_dtoa_r+0xa64>
 800a4d4:	461a      	mov	r2, r3
 800a4d6:	4601      	mov	r1, r0
 800a4d8:	4648      	mov	r0, r9
 800a4da:	f000 fced 	bl	800aeb8 <__pow5mult>
 800a4de:	9b07      	ldr	r3, [sp, #28]
 800a4e0:	2b01      	cmp	r3, #1
 800a4e2:	4604      	mov	r4, r0
 800a4e4:	f300 8095 	bgt.w	800a612 <_dtoa_r+0x802>
 800a4e8:	9b02      	ldr	r3, [sp, #8]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	f040 808b 	bne.w	800a606 <_dtoa_r+0x7f6>
 800a4f0:	9b03      	ldr	r3, [sp, #12]
 800a4f2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800a4f6:	2a00      	cmp	r2, #0
 800a4f8:	f040 8087 	bne.w	800a60a <_dtoa_r+0x7fa>
 800a4fc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800a500:	0d12      	lsrs	r2, r2, #20
 800a502:	0512      	lsls	r2, r2, #20
 800a504:	2a00      	cmp	r2, #0
 800a506:	f000 8082 	beq.w	800a60e <_dtoa_r+0x7fe>
 800a50a:	9b05      	ldr	r3, [sp, #20]
 800a50c:	3301      	adds	r3, #1
 800a50e:	9305      	str	r3, [sp, #20]
 800a510:	9b06      	ldr	r3, [sp, #24]
 800a512:	3301      	adds	r3, #1
 800a514:	9306      	str	r3, [sp, #24]
 800a516:	2301      	movs	r3, #1
 800a518:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a51a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	f000 81af 	beq.w	800a880 <_dtoa_r+0xa70>
 800a522:	6922      	ldr	r2, [r4, #16]
 800a524:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a528:	6910      	ldr	r0, [r2, #16]
 800a52a:	f000 fbb9 	bl	800aca0 <__hi0bits>
 800a52e:	f1c0 0020 	rsb	r0, r0, #32
 800a532:	9b06      	ldr	r3, [sp, #24]
 800a534:	4418      	add	r0, r3
 800a536:	f010 001f 	ands.w	r0, r0, #31
 800a53a:	d076      	beq.n	800a62a <_dtoa_r+0x81a>
 800a53c:	f1c0 0220 	rsb	r2, r0, #32
 800a540:	2a04      	cmp	r2, #4
 800a542:	dd69      	ble.n	800a618 <_dtoa_r+0x808>
 800a544:	9b05      	ldr	r3, [sp, #20]
 800a546:	f1c0 001c 	rsb	r0, r0, #28
 800a54a:	4403      	add	r3, r0
 800a54c:	9305      	str	r3, [sp, #20]
 800a54e:	9b06      	ldr	r3, [sp, #24]
 800a550:	4406      	add	r6, r0
 800a552:	4403      	add	r3, r0
 800a554:	9306      	str	r3, [sp, #24]
 800a556:	9b05      	ldr	r3, [sp, #20]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	dd05      	ble.n	800a568 <_dtoa_r+0x758>
 800a55c:	9901      	ldr	r1, [sp, #4]
 800a55e:	461a      	mov	r2, r3
 800a560:	4648      	mov	r0, r9
 800a562:	f000 fd03 	bl	800af6c <__lshift>
 800a566:	9001      	str	r0, [sp, #4]
 800a568:	9b06      	ldr	r3, [sp, #24]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	dd05      	ble.n	800a57a <_dtoa_r+0x76a>
 800a56e:	4621      	mov	r1, r4
 800a570:	461a      	mov	r2, r3
 800a572:	4648      	mov	r0, r9
 800a574:	f000 fcfa 	bl	800af6c <__lshift>
 800a578:	4604      	mov	r4, r0
 800a57a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d056      	beq.n	800a62e <_dtoa_r+0x81e>
 800a580:	9801      	ldr	r0, [sp, #4]
 800a582:	4621      	mov	r1, r4
 800a584:	f000 fd5e 	bl	800b044 <__mcmp>
 800a588:	2800      	cmp	r0, #0
 800a58a:	da50      	bge.n	800a62e <_dtoa_r+0x81e>
 800a58c:	f108 33ff 	add.w	r3, r8, #4294967295
 800a590:	9304      	str	r3, [sp, #16]
 800a592:	9901      	ldr	r1, [sp, #4]
 800a594:	2300      	movs	r3, #0
 800a596:	220a      	movs	r2, #10
 800a598:	4648      	mov	r0, r9
 800a59a:	f000 faf1 	bl	800ab80 <__multadd>
 800a59e:	9b08      	ldr	r3, [sp, #32]
 800a5a0:	9001      	str	r0, [sp, #4]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	f000 816e 	beq.w	800a884 <_dtoa_r+0xa74>
 800a5a8:	4629      	mov	r1, r5
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	220a      	movs	r2, #10
 800a5ae:	4648      	mov	r0, r9
 800a5b0:	f000 fae6 	bl	800ab80 <__multadd>
 800a5b4:	f1bb 0f00 	cmp.w	fp, #0
 800a5b8:	4605      	mov	r5, r0
 800a5ba:	dc64      	bgt.n	800a686 <_dtoa_r+0x876>
 800a5bc:	9b07      	ldr	r3, [sp, #28]
 800a5be:	2b02      	cmp	r3, #2
 800a5c0:	dc3e      	bgt.n	800a640 <_dtoa_r+0x830>
 800a5c2:	e060      	b.n	800a686 <_dtoa_r+0x876>
 800a5c4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a5c6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a5ca:	e73c      	b.n	800a446 <_dtoa_r+0x636>
 800a5cc:	f10a 34ff 	add.w	r4, sl, #4294967295
 800a5d0:	42a3      	cmp	r3, r4
 800a5d2:	bfbf      	itttt	lt
 800a5d4:	1ae2      	sublt	r2, r4, r3
 800a5d6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a5d8:	189b      	addlt	r3, r3, r2
 800a5da:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800a5dc:	bfae      	itee	ge
 800a5de:	1b1c      	subge	r4, r3, r4
 800a5e0:	4623      	movlt	r3, r4
 800a5e2:	2400      	movlt	r4, #0
 800a5e4:	f1ba 0f00 	cmp.w	sl, #0
 800a5e8:	bfb5      	itete	lt
 800a5ea:	9a05      	ldrlt	r2, [sp, #20]
 800a5ec:	9e05      	ldrge	r6, [sp, #20]
 800a5ee:	eba2 060a 	sublt.w	r6, r2, sl
 800a5f2:	4652      	movge	r2, sl
 800a5f4:	bfb8      	it	lt
 800a5f6:	2200      	movlt	r2, #0
 800a5f8:	e727      	b.n	800a44a <_dtoa_r+0x63a>
 800a5fa:	9e05      	ldr	r6, [sp, #20]
 800a5fc:	9d08      	ldr	r5, [sp, #32]
 800a5fe:	461c      	mov	r4, r3
 800a600:	e730      	b.n	800a464 <_dtoa_r+0x654>
 800a602:	461a      	mov	r2, r3
 800a604:	e758      	b.n	800a4b8 <_dtoa_r+0x6a8>
 800a606:	2300      	movs	r3, #0
 800a608:	e786      	b.n	800a518 <_dtoa_r+0x708>
 800a60a:	9b02      	ldr	r3, [sp, #8]
 800a60c:	e784      	b.n	800a518 <_dtoa_r+0x708>
 800a60e:	920b      	str	r2, [sp, #44]	@ 0x2c
 800a610:	e783      	b.n	800a51a <_dtoa_r+0x70a>
 800a612:	2300      	movs	r3, #0
 800a614:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a616:	e784      	b.n	800a522 <_dtoa_r+0x712>
 800a618:	d09d      	beq.n	800a556 <_dtoa_r+0x746>
 800a61a:	9b05      	ldr	r3, [sp, #20]
 800a61c:	321c      	adds	r2, #28
 800a61e:	4413      	add	r3, r2
 800a620:	9305      	str	r3, [sp, #20]
 800a622:	9b06      	ldr	r3, [sp, #24]
 800a624:	4416      	add	r6, r2
 800a626:	4413      	add	r3, r2
 800a628:	e794      	b.n	800a554 <_dtoa_r+0x744>
 800a62a:	4602      	mov	r2, r0
 800a62c:	e7f5      	b.n	800a61a <_dtoa_r+0x80a>
 800a62e:	f1ba 0f00 	cmp.w	sl, #0
 800a632:	f8cd 8010 	str.w	r8, [sp, #16]
 800a636:	46d3      	mov	fp, sl
 800a638:	dc21      	bgt.n	800a67e <_dtoa_r+0x86e>
 800a63a:	9b07      	ldr	r3, [sp, #28]
 800a63c:	2b02      	cmp	r3, #2
 800a63e:	dd1e      	ble.n	800a67e <_dtoa_r+0x86e>
 800a640:	f1bb 0f00 	cmp.w	fp, #0
 800a644:	f47f aeb7 	bne.w	800a3b6 <_dtoa_r+0x5a6>
 800a648:	4621      	mov	r1, r4
 800a64a:	465b      	mov	r3, fp
 800a64c:	2205      	movs	r2, #5
 800a64e:	4648      	mov	r0, r9
 800a650:	f000 fa96 	bl	800ab80 <__multadd>
 800a654:	4601      	mov	r1, r0
 800a656:	4604      	mov	r4, r0
 800a658:	9801      	ldr	r0, [sp, #4]
 800a65a:	f000 fcf3 	bl	800b044 <__mcmp>
 800a65e:	2800      	cmp	r0, #0
 800a660:	f77f aea9 	ble.w	800a3b6 <_dtoa_r+0x5a6>
 800a664:	463e      	mov	r6, r7
 800a666:	2331      	movs	r3, #49	@ 0x31
 800a668:	f806 3b01 	strb.w	r3, [r6], #1
 800a66c:	9b04      	ldr	r3, [sp, #16]
 800a66e:	3301      	adds	r3, #1
 800a670:	9304      	str	r3, [sp, #16]
 800a672:	e6a4      	b.n	800a3be <_dtoa_r+0x5ae>
 800a674:	f8cd 8010 	str.w	r8, [sp, #16]
 800a678:	4654      	mov	r4, sl
 800a67a:	4625      	mov	r5, r4
 800a67c:	e7f2      	b.n	800a664 <_dtoa_r+0x854>
 800a67e:	9b08      	ldr	r3, [sp, #32]
 800a680:	2b00      	cmp	r3, #0
 800a682:	f000 8103 	beq.w	800a88c <_dtoa_r+0xa7c>
 800a686:	2e00      	cmp	r6, #0
 800a688:	dd05      	ble.n	800a696 <_dtoa_r+0x886>
 800a68a:	4629      	mov	r1, r5
 800a68c:	4632      	mov	r2, r6
 800a68e:	4648      	mov	r0, r9
 800a690:	f000 fc6c 	bl	800af6c <__lshift>
 800a694:	4605      	mov	r5, r0
 800a696:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d058      	beq.n	800a74e <_dtoa_r+0x93e>
 800a69c:	6869      	ldr	r1, [r5, #4]
 800a69e:	4648      	mov	r0, r9
 800a6a0:	f000 fa0c 	bl	800aabc <_Balloc>
 800a6a4:	4606      	mov	r6, r0
 800a6a6:	b928      	cbnz	r0, 800a6b4 <_dtoa_r+0x8a4>
 800a6a8:	4b82      	ldr	r3, [pc, #520]	@ (800a8b4 <_dtoa_r+0xaa4>)
 800a6aa:	4602      	mov	r2, r0
 800a6ac:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a6b0:	f7ff bbc7 	b.w	8009e42 <_dtoa_r+0x32>
 800a6b4:	692a      	ldr	r2, [r5, #16]
 800a6b6:	3202      	adds	r2, #2
 800a6b8:	0092      	lsls	r2, r2, #2
 800a6ba:	f105 010c 	add.w	r1, r5, #12
 800a6be:	300c      	adds	r0, #12
 800a6c0:	f001 ff1e 	bl	800c500 <memcpy>
 800a6c4:	2201      	movs	r2, #1
 800a6c6:	4631      	mov	r1, r6
 800a6c8:	4648      	mov	r0, r9
 800a6ca:	f000 fc4f 	bl	800af6c <__lshift>
 800a6ce:	1c7b      	adds	r3, r7, #1
 800a6d0:	9305      	str	r3, [sp, #20]
 800a6d2:	eb07 030b 	add.w	r3, r7, fp
 800a6d6:	9309      	str	r3, [sp, #36]	@ 0x24
 800a6d8:	9b02      	ldr	r3, [sp, #8]
 800a6da:	f003 0301 	and.w	r3, r3, #1
 800a6de:	46a8      	mov	r8, r5
 800a6e0:	9308      	str	r3, [sp, #32]
 800a6e2:	4605      	mov	r5, r0
 800a6e4:	9b05      	ldr	r3, [sp, #20]
 800a6e6:	9801      	ldr	r0, [sp, #4]
 800a6e8:	4621      	mov	r1, r4
 800a6ea:	f103 3bff 	add.w	fp, r3, #4294967295
 800a6ee:	f7ff fb07 	bl	8009d00 <quorem>
 800a6f2:	4641      	mov	r1, r8
 800a6f4:	9002      	str	r0, [sp, #8]
 800a6f6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800a6fa:	9801      	ldr	r0, [sp, #4]
 800a6fc:	f000 fca2 	bl	800b044 <__mcmp>
 800a700:	462a      	mov	r2, r5
 800a702:	9006      	str	r0, [sp, #24]
 800a704:	4621      	mov	r1, r4
 800a706:	4648      	mov	r0, r9
 800a708:	f000 fcb8 	bl	800b07c <__mdiff>
 800a70c:	68c2      	ldr	r2, [r0, #12]
 800a70e:	4606      	mov	r6, r0
 800a710:	b9fa      	cbnz	r2, 800a752 <_dtoa_r+0x942>
 800a712:	4601      	mov	r1, r0
 800a714:	9801      	ldr	r0, [sp, #4]
 800a716:	f000 fc95 	bl	800b044 <__mcmp>
 800a71a:	4602      	mov	r2, r0
 800a71c:	4631      	mov	r1, r6
 800a71e:	4648      	mov	r0, r9
 800a720:	920a      	str	r2, [sp, #40]	@ 0x28
 800a722:	f000 fa0b 	bl	800ab3c <_Bfree>
 800a726:	9b07      	ldr	r3, [sp, #28]
 800a728:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a72a:	9e05      	ldr	r6, [sp, #20]
 800a72c:	ea43 0102 	orr.w	r1, r3, r2
 800a730:	9b08      	ldr	r3, [sp, #32]
 800a732:	4319      	orrs	r1, r3
 800a734:	d10f      	bne.n	800a756 <_dtoa_r+0x946>
 800a736:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800a73a:	d028      	beq.n	800a78e <_dtoa_r+0x97e>
 800a73c:	9b06      	ldr	r3, [sp, #24]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	dd02      	ble.n	800a748 <_dtoa_r+0x938>
 800a742:	9b02      	ldr	r3, [sp, #8]
 800a744:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800a748:	f88b a000 	strb.w	sl, [fp]
 800a74c:	e639      	b.n	800a3c2 <_dtoa_r+0x5b2>
 800a74e:	4628      	mov	r0, r5
 800a750:	e7bd      	b.n	800a6ce <_dtoa_r+0x8be>
 800a752:	2201      	movs	r2, #1
 800a754:	e7e2      	b.n	800a71c <_dtoa_r+0x90c>
 800a756:	9b06      	ldr	r3, [sp, #24]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	db04      	blt.n	800a766 <_dtoa_r+0x956>
 800a75c:	9907      	ldr	r1, [sp, #28]
 800a75e:	430b      	orrs	r3, r1
 800a760:	9908      	ldr	r1, [sp, #32]
 800a762:	430b      	orrs	r3, r1
 800a764:	d120      	bne.n	800a7a8 <_dtoa_r+0x998>
 800a766:	2a00      	cmp	r2, #0
 800a768:	ddee      	ble.n	800a748 <_dtoa_r+0x938>
 800a76a:	9901      	ldr	r1, [sp, #4]
 800a76c:	2201      	movs	r2, #1
 800a76e:	4648      	mov	r0, r9
 800a770:	f000 fbfc 	bl	800af6c <__lshift>
 800a774:	4621      	mov	r1, r4
 800a776:	9001      	str	r0, [sp, #4]
 800a778:	f000 fc64 	bl	800b044 <__mcmp>
 800a77c:	2800      	cmp	r0, #0
 800a77e:	dc03      	bgt.n	800a788 <_dtoa_r+0x978>
 800a780:	d1e2      	bne.n	800a748 <_dtoa_r+0x938>
 800a782:	f01a 0f01 	tst.w	sl, #1
 800a786:	d0df      	beq.n	800a748 <_dtoa_r+0x938>
 800a788:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800a78c:	d1d9      	bne.n	800a742 <_dtoa_r+0x932>
 800a78e:	2339      	movs	r3, #57	@ 0x39
 800a790:	f88b 3000 	strb.w	r3, [fp]
 800a794:	4633      	mov	r3, r6
 800a796:	461e      	mov	r6, r3
 800a798:	3b01      	subs	r3, #1
 800a79a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a79e:	2a39      	cmp	r2, #57	@ 0x39
 800a7a0:	d053      	beq.n	800a84a <_dtoa_r+0xa3a>
 800a7a2:	3201      	adds	r2, #1
 800a7a4:	701a      	strb	r2, [r3, #0]
 800a7a6:	e60c      	b.n	800a3c2 <_dtoa_r+0x5b2>
 800a7a8:	2a00      	cmp	r2, #0
 800a7aa:	dd07      	ble.n	800a7bc <_dtoa_r+0x9ac>
 800a7ac:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800a7b0:	d0ed      	beq.n	800a78e <_dtoa_r+0x97e>
 800a7b2:	f10a 0301 	add.w	r3, sl, #1
 800a7b6:	f88b 3000 	strb.w	r3, [fp]
 800a7ba:	e602      	b.n	800a3c2 <_dtoa_r+0x5b2>
 800a7bc:	9b05      	ldr	r3, [sp, #20]
 800a7be:	9a05      	ldr	r2, [sp, #20]
 800a7c0:	f803 ac01 	strb.w	sl, [r3, #-1]
 800a7c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7c6:	4293      	cmp	r3, r2
 800a7c8:	d029      	beq.n	800a81e <_dtoa_r+0xa0e>
 800a7ca:	9901      	ldr	r1, [sp, #4]
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	220a      	movs	r2, #10
 800a7d0:	4648      	mov	r0, r9
 800a7d2:	f000 f9d5 	bl	800ab80 <__multadd>
 800a7d6:	45a8      	cmp	r8, r5
 800a7d8:	9001      	str	r0, [sp, #4]
 800a7da:	f04f 0300 	mov.w	r3, #0
 800a7de:	f04f 020a 	mov.w	r2, #10
 800a7e2:	4641      	mov	r1, r8
 800a7e4:	4648      	mov	r0, r9
 800a7e6:	d107      	bne.n	800a7f8 <_dtoa_r+0x9e8>
 800a7e8:	f000 f9ca 	bl	800ab80 <__multadd>
 800a7ec:	4680      	mov	r8, r0
 800a7ee:	4605      	mov	r5, r0
 800a7f0:	9b05      	ldr	r3, [sp, #20]
 800a7f2:	3301      	adds	r3, #1
 800a7f4:	9305      	str	r3, [sp, #20]
 800a7f6:	e775      	b.n	800a6e4 <_dtoa_r+0x8d4>
 800a7f8:	f000 f9c2 	bl	800ab80 <__multadd>
 800a7fc:	4629      	mov	r1, r5
 800a7fe:	4680      	mov	r8, r0
 800a800:	2300      	movs	r3, #0
 800a802:	220a      	movs	r2, #10
 800a804:	4648      	mov	r0, r9
 800a806:	f000 f9bb 	bl	800ab80 <__multadd>
 800a80a:	4605      	mov	r5, r0
 800a80c:	e7f0      	b.n	800a7f0 <_dtoa_r+0x9e0>
 800a80e:	f1bb 0f00 	cmp.w	fp, #0
 800a812:	bfcc      	ite	gt
 800a814:	465e      	movgt	r6, fp
 800a816:	2601      	movle	r6, #1
 800a818:	443e      	add	r6, r7
 800a81a:	f04f 0800 	mov.w	r8, #0
 800a81e:	9901      	ldr	r1, [sp, #4]
 800a820:	2201      	movs	r2, #1
 800a822:	4648      	mov	r0, r9
 800a824:	f000 fba2 	bl	800af6c <__lshift>
 800a828:	4621      	mov	r1, r4
 800a82a:	9001      	str	r0, [sp, #4]
 800a82c:	f000 fc0a 	bl	800b044 <__mcmp>
 800a830:	2800      	cmp	r0, #0
 800a832:	dcaf      	bgt.n	800a794 <_dtoa_r+0x984>
 800a834:	d102      	bne.n	800a83c <_dtoa_r+0xa2c>
 800a836:	f01a 0f01 	tst.w	sl, #1
 800a83a:	d1ab      	bne.n	800a794 <_dtoa_r+0x984>
 800a83c:	4633      	mov	r3, r6
 800a83e:	461e      	mov	r6, r3
 800a840:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a844:	2a30      	cmp	r2, #48	@ 0x30
 800a846:	d0fa      	beq.n	800a83e <_dtoa_r+0xa2e>
 800a848:	e5bb      	b.n	800a3c2 <_dtoa_r+0x5b2>
 800a84a:	429f      	cmp	r7, r3
 800a84c:	d1a3      	bne.n	800a796 <_dtoa_r+0x986>
 800a84e:	9b04      	ldr	r3, [sp, #16]
 800a850:	3301      	adds	r3, #1
 800a852:	9304      	str	r3, [sp, #16]
 800a854:	2331      	movs	r3, #49	@ 0x31
 800a856:	703b      	strb	r3, [r7, #0]
 800a858:	e5b3      	b.n	800a3c2 <_dtoa_r+0x5b2>
 800a85a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a85c:	4f16      	ldr	r7, [pc, #88]	@ (800a8b8 <_dtoa_r+0xaa8>)
 800a85e:	b11b      	cbz	r3, 800a868 <_dtoa_r+0xa58>
 800a860:	f107 0308 	add.w	r3, r7, #8
 800a864:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800a866:	6013      	str	r3, [r2, #0]
 800a868:	4638      	mov	r0, r7
 800a86a:	b011      	add	sp, #68	@ 0x44
 800a86c:	ecbd 8b02 	vpop	{d8}
 800a870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a874:	9b07      	ldr	r3, [sp, #28]
 800a876:	2b01      	cmp	r3, #1
 800a878:	f77f ae36 	ble.w	800a4e8 <_dtoa_r+0x6d8>
 800a87c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a87e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a880:	2001      	movs	r0, #1
 800a882:	e656      	b.n	800a532 <_dtoa_r+0x722>
 800a884:	f1bb 0f00 	cmp.w	fp, #0
 800a888:	f77f aed7 	ble.w	800a63a <_dtoa_r+0x82a>
 800a88c:	463e      	mov	r6, r7
 800a88e:	9801      	ldr	r0, [sp, #4]
 800a890:	4621      	mov	r1, r4
 800a892:	f7ff fa35 	bl	8009d00 <quorem>
 800a896:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800a89a:	f806 ab01 	strb.w	sl, [r6], #1
 800a89e:	1bf2      	subs	r2, r6, r7
 800a8a0:	4593      	cmp	fp, r2
 800a8a2:	ddb4      	ble.n	800a80e <_dtoa_r+0x9fe>
 800a8a4:	9901      	ldr	r1, [sp, #4]
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	220a      	movs	r2, #10
 800a8aa:	4648      	mov	r0, r9
 800a8ac:	f000 f968 	bl	800ab80 <__multadd>
 800a8b0:	9001      	str	r0, [sp, #4]
 800a8b2:	e7ec      	b.n	800a88e <_dtoa_r+0xa7e>
 800a8b4:	0800d521 	.word	0x0800d521
 800a8b8:	0800d4a5 	.word	0x0800d4a5

0800a8bc <_free_r>:
 800a8bc:	b538      	push	{r3, r4, r5, lr}
 800a8be:	4605      	mov	r5, r0
 800a8c0:	2900      	cmp	r1, #0
 800a8c2:	d041      	beq.n	800a948 <_free_r+0x8c>
 800a8c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8c8:	1f0c      	subs	r4, r1, #4
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	bfb8      	it	lt
 800a8ce:	18e4      	addlt	r4, r4, r3
 800a8d0:	f000 f8e8 	bl	800aaa4 <__malloc_lock>
 800a8d4:	4a1d      	ldr	r2, [pc, #116]	@ (800a94c <_free_r+0x90>)
 800a8d6:	6813      	ldr	r3, [r2, #0]
 800a8d8:	b933      	cbnz	r3, 800a8e8 <_free_r+0x2c>
 800a8da:	6063      	str	r3, [r4, #4]
 800a8dc:	6014      	str	r4, [r2, #0]
 800a8de:	4628      	mov	r0, r5
 800a8e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a8e4:	f000 b8e4 	b.w	800aab0 <__malloc_unlock>
 800a8e8:	42a3      	cmp	r3, r4
 800a8ea:	d908      	bls.n	800a8fe <_free_r+0x42>
 800a8ec:	6820      	ldr	r0, [r4, #0]
 800a8ee:	1821      	adds	r1, r4, r0
 800a8f0:	428b      	cmp	r3, r1
 800a8f2:	bf01      	itttt	eq
 800a8f4:	6819      	ldreq	r1, [r3, #0]
 800a8f6:	685b      	ldreq	r3, [r3, #4]
 800a8f8:	1809      	addeq	r1, r1, r0
 800a8fa:	6021      	streq	r1, [r4, #0]
 800a8fc:	e7ed      	b.n	800a8da <_free_r+0x1e>
 800a8fe:	461a      	mov	r2, r3
 800a900:	685b      	ldr	r3, [r3, #4]
 800a902:	b10b      	cbz	r3, 800a908 <_free_r+0x4c>
 800a904:	42a3      	cmp	r3, r4
 800a906:	d9fa      	bls.n	800a8fe <_free_r+0x42>
 800a908:	6811      	ldr	r1, [r2, #0]
 800a90a:	1850      	adds	r0, r2, r1
 800a90c:	42a0      	cmp	r0, r4
 800a90e:	d10b      	bne.n	800a928 <_free_r+0x6c>
 800a910:	6820      	ldr	r0, [r4, #0]
 800a912:	4401      	add	r1, r0
 800a914:	1850      	adds	r0, r2, r1
 800a916:	4283      	cmp	r3, r0
 800a918:	6011      	str	r1, [r2, #0]
 800a91a:	d1e0      	bne.n	800a8de <_free_r+0x22>
 800a91c:	6818      	ldr	r0, [r3, #0]
 800a91e:	685b      	ldr	r3, [r3, #4]
 800a920:	6053      	str	r3, [r2, #4]
 800a922:	4408      	add	r0, r1
 800a924:	6010      	str	r0, [r2, #0]
 800a926:	e7da      	b.n	800a8de <_free_r+0x22>
 800a928:	d902      	bls.n	800a930 <_free_r+0x74>
 800a92a:	230c      	movs	r3, #12
 800a92c:	602b      	str	r3, [r5, #0]
 800a92e:	e7d6      	b.n	800a8de <_free_r+0x22>
 800a930:	6820      	ldr	r0, [r4, #0]
 800a932:	1821      	adds	r1, r4, r0
 800a934:	428b      	cmp	r3, r1
 800a936:	bf04      	itt	eq
 800a938:	6819      	ldreq	r1, [r3, #0]
 800a93a:	685b      	ldreq	r3, [r3, #4]
 800a93c:	6063      	str	r3, [r4, #4]
 800a93e:	bf04      	itt	eq
 800a940:	1809      	addeq	r1, r1, r0
 800a942:	6021      	streq	r1, [r4, #0]
 800a944:	6054      	str	r4, [r2, #4]
 800a946:	e7ca      	b.n	800a8de <_free_r+0x22>
 800a948:	bd38      	pop	{r3, r4, r5, pc}
 800a94a:	bf00      	nop
 800a94c:	24000628 	.word	0x24000628

0800a950 <malloc>:
 800a950:	4b02      	ldr	r3, [pc, #8]	@ (800a95c <malloc+0xc>)
 800a952:	4601      	mov	r1, r0
 800a954:	6818      	ldr	r0, [r3, #0]
 800a956:	f000 b825 	b.w	800a9a4 <_malloc_r>
 800a95a:	bf00      	nop
 800a95c:	2400001c 	.word	0x2400001c

0800a960 <sbrk_aligned>:
 800a960:	b570      	push	{r4, r5, r6, lr}
 800a962:	4e0f      	ldr	r6, [pc, #60]	@ (800a9a0 <sbrk_aligned+0x40>)
 800a964:	460c      	mov	r4, r1
 800a966:	6831      	ldr	r1, [r6, #0]
 800a968:	4605      	mov	r5, r0
 800a96a:	b911      	cbnz	r1, 800a972 <sbrk_aligned+0x12>
 800a96c:	f001 fdb8 	bl	800c4e0 <_sbrk_r>
 800a970:	6030      	str	r0, [r6, #0]
 800a972:	4621      	mov	r1, r4
 800a974:	4628      	mov	r0, r5
 800a976:	f001 fdb3 	bl	800c4e0 <_sbrk_r>
 800a97a:	1c43      	adds	r3, r0, #1
 800a97c:	d103      	bne.n	800a986 <sbrk_aligned+0x26>
 800a97e:	f04f 34ff 	mov.w	r4, #4294967295
 800a982:	4620      	mov	r0, r4
 800a984:	bd70      	pop	{r4, r5, r6, pc}
 800a986:	1cc4      	adds	r4, r0, #3
 800a988:	f024 0403 	bic.w	r4, r4, #3
 800a98c:	42a0      	cmp	r0, r4
 800a98e:	d0f8      	beq.n	800a982 <sbrk_aligned+0x22>
 800a990:	1a21      	subs	r1, r4, r0
 800a992:	4628      	mov	r0, r5
 800a994:	f001 fda4 	bl	800c4e0 <_sbrk_r>
 800a998:	3001      	adds	r0, #1
 800a99a:	d1f2      	bne.n	800a982 <sbrk_aligned+0x22>
 800a99c:	e7ef      	b.n	800a97e <sbrk_aligned+0x1e>
 800a99e:	bf00      	nop
 800a9a0:	24000624 	.word	0x24000624

0800a9a4 <_malloc_r>:
 800a9a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9a8:	1ccd      	adds	r5, r1, #3
 800a9aa:	f025 0503 	bic.w	r5, r5, #3
 800a9ae:	3508      	adds	r5, #8
 800a9b0:	2d0c      	cmp	r5, #12
 800a9b2:	bf38      	it	cc
 800a9b4:	250c      	movcc	r5, #12
 800a9b6:	2d00      	cmp	r5, #0
 800a9b8:	4606      	mov	r6, r0
 800a9ba:	db01      	blt.n	800a9c0 <_malloc_r+0x1c>
 800a9bc:	42a9      	cmp	r1, r5
 800a9be:	d904      	bls.n	800a9ca <_malloc_r+0x26>
 800a9c0:	230c      	movs	r3, #12
 800a9c2:	6033      	str	r3, [r6, #0]
 800a9c4:	2000      	movs	r0, #0
 800a9c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9ca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800aaa0 <_malloc_r+0xfc>
 800a9ce:	f000 f869 	bl	800aaa4 <__malloc_lock>
 800a9d2:	f8d8 3000 	ldr.w	r3, [r8]
 800a9d6:	461c      	mov	r4, r3
 800a9d8:	bb44      	cbnz	r4, 800aa2c <_malloc_r+0x88>
 800a9da:	4629      	mov	r1, r5
 800a9dc:	4630      	mov	r0, r6
 800a9de:	f7ff ffbf 	bl	800a960 <sbrk_aligned>
 800a9e2:	1c43      	adds	r3, r0, #1
 800a9e4:	4604      	mov	r4, r0
 800a9e6:	d158      	bne.n	800aa9a <_malloc_r+0xf6>
 800a9e8:	f8d8 4000 	ldr.w	r4, [r8]
 800a9ec:	4627      	mov	r7, r4
 800a9ee:	2f00      	cmp	r7, #0
 800a9f0:	d143      	bne.n	800aa7a <_malloc_r+0xd6>
 800a9f2:	2c00      	cmp	r4, #0
 800a9f4:	d04b      	beq.n	800aa8e <_malloc_r+0xea>
 800a9f6:	6823      	ldr	r3, [r4, #0]
 800a9f8:	4639      	mov	r1, r7
 800a9fa:	4630      	mov	r0, r6
 800a9fc:	eb04 0903 	add.w	r9, r4, r3
 800aa00:	f001 fd6e 	bl	800c4e0 <_sbrk_r>
 800aa04:	4581      	cmp	r9, r0
 800aa06:	d142      	bne.n	800aa8e <_malloc_r+0xea>
 800aa08:	6821      	ldr	r1, [r4, #0]
 800aa0a:	1a6d      	subs	r5, r5, r1
 800aa0c:	4629      	mov	r1, r5
 800aa0e:	4630      	mov	r0, r6
 800aa10:	f7ff ffa6 	bl	800a960 <sbrk_aligned>
 800aa14:	3001      	adds	r0, #1
 800aa16:	d03a      	beq.n	800aa8e <_malloc_r+0xea>
 800aa18:	6823      	ldr	r3, [r4, #0]
 800aa1a:	442b      	add	r3, r5
 800aa1c:	6023      	str	r3, [r4, #0]
 800aa1e:	f8d8 3000 	ldr.w	r3, [r8]
 800aa22:	685a      	ldr	r2, [r3, #4]
 800aa24:	bb62      	cbnz	r2, 800aa80 <_malloc_r+0xdc>
 800aa26:	f8c8 7000 	str.w	r7, [r8]
 800aa2a:	e00f      	b.n	800aa4c <_malloc_r+0xa8>
 800aa2c:	6822      	ldr	r2, [r4, #0]
 800aa2e:	1b52      	subs	r2, r2, r5
 800aa30:	d420      	bmi.n	800aa74 <_malloc_r+0xd0>
 800aa32:	2a0b      	cmp	r2, #11
 800aa34:	d917      	bls.n	800aa66 <_malloc_r+0xc2>
 800aa36:	1961      	adds	r1, r4, r5
 800aa38:	42a3      	cmp	r3, r4
 800aa3a:	6025      	str	r5, [r4, #0]
 800aa3c:	bf18      	it	ne
 800aa3e:	6059      	strne	r1, [r3, #4]
 800aa40:	6863      	ldr	r3, [r4, #4]
 800aa42:	bf08      	it	eq
 800aa44:	f8c8 1000 	streq.w	r1, [r8]
 800aa48:	5162      	str	r2, [r4, r5]
 800aa4a:	604b      	str	r3, [r1, #4]
 800aa4c:	4630      	mov	r0, r6
 800aa4e:	f000 f82f 	bl	800aab0 <__malloc_unlock>
 800aa52:	f104 000b 	add.w	r0, r4, #11
 800aa56:	1d23      	adds	r3, r4, #4
 800aa58:	f020 0007 	bic.w	r0, r0, #7
 800aa5c:	1ac2      	subs	r2, r0, r3
 800aa5e:	bf1c      	itt	ne
 800aa60:	1a1b      	subne	r3, r3, r0
 800aa62:	50a3      	strne	r3, [r4, r2]
 800aa64:	e7af      	b.n	800a9c6 <_malloc_r+0x22>
 800aa66:	6862      	ldr	r2, [r4, #4]
 800aa68:	42a3      	cmp	r3, r4
 800aa6a:	bf0c      	ite	eq
 800aa6c:	f8c8 2000 	streq.w	r2, [r8]
 800aa70:	605a      	strne	r2, [r3, #4]
 800aa72:	e7eb      	b.n	800aa4c <_malloc_r+0xa8>
 800aa74:	4623      	mov	r3, r4
 800aa76:	6864      	ldr	r4, [r4, #4]
 800aa78:	e7ae      	b.n	800a9d8 <_malloc_r+0x34>
 800aa7a:	463c      	mov	r4, r7
 800aa7c:	687f      	ldr	r7, [r7, #4]
 800aa7e:	e7b6      	b.n	800a9ee <_malloc_r+0x4a>
 800aa80:	461a      	mov	r2, r3
 800aa82:	685b      	ldr	r3, [r3, #4]
 800aa84:	42a3      	cmp	r3, r4
 800aa86:	d1fb      	bne.n	800aa80 <_malloc_r+0xdc>
 800aa88:	2300      	movs	r3, #0
 800aa8a:	6053      	str	r3, [r2, #4]
 800aa8c:	e7de      	b.n	800aa4c <_malloc_r+0xa8>
 800aa8e:	230c      	movs	r3, #12
 800aa90:	6033      	str	r3, [r6, #0]
 800aa92:	4630      	mov	r0, r6
 800aa94:	f000 f80c 	bl	800aab0 <__malloc_unlock>
 800aa98:	e794      	b.n	800a9c4 <_malloc_r+0x20>
 800aa9a:	6005      	str	r5, [r0, #0]
 800aa9c:	e7d6      	b.n	800aa4c <_malloc_r+0xa8>
 800aa9e:	bf00      	nop
 800aaa0:	24000628 	.word	0x24000628

0800aaa4 <__malloc_lock>:
 800aaa4:	4801      	ldr	r0, [pc, #4]	@ (800aaac <__malloc_lock+0x8>)
 800aaa6:	f7ff b922 	b.w	8009cee <__retarget_lock_acquire_recursive>
 800aaaa:	bf00      	nop
 800aaac:	24000620 	.word	0x24000620

0800aab0 <__malloc_unlock>:
 800aab0:	4801      	ldr	r0, [pc, #4]	@ (800aab8 <__malloc_unlock+0x8>)
 800aab2:	f7ff b91d 	b.w	8009cf0 <__retarget_lock_release_recursive>
 800aab6:	bf00      	nop
 800aab8:	24000620 	.word	0x24000620

0800aabc <_Balloc>:
 800aabc:	b570      	push	{r4, r5, r6, lr}
 800aabe:	69c6      	ldr	r6, [r0, #28]
 800aac0:	4604      	mov	r4, r0
 800aac2:	460d      	mov	r5, r1
 800aac4:	b976      	cbnz	r6, 800aae4 <_Balloc+0x28>
 800aac6:	2010      	movs	r0, #16
 800aac8:	f7ff ff42 	bl	800a950 <malloc>
 800aacc:	4602      	mov	r2, r0
 800aace:	61e0      	str	r0, [r4, #28]
 800aad0:	b920      	cbnz	r0, 800aadc <_Balloc+0x20>
 800aad2:	4b18      	ldr	r3, [pc, #96]	@ (800ab34 <_Balloc+0x78>)
 800aad4:	4818      	ldr	r0, [pc, #96]	@ (800ab38 <_Balloc+0x7c>)
 800aad6:	216b      	movs	r1, #107	@ 0x6b
 800aad8:	f001 fd2a 	bl	800c530 <__assert_func>
 800aadc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aae0:	6006      	str	r6, [r0, #0]
 800aae2:	60c6      	str	r6, [r0, #12]
 800aae4:	69e6      	ldr	r6, [r4, #28]
 800aae6:	68f3      	ldr	r3, [r6, #12]
 800aae8:	b183      	cbz	r3, 800ab0c <_Balloc+0x50>
 800aaea:	69e3      	ldr	r3, [r4, #28]
 800aaec:	68db      	ldr	r3, [r3, #12]
 800aaee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800aaf2:	b9b8      	cbnz	r0, 800ab24 <_Balloc+0x68>
 800aaf4:	2101      	movs	r1, #1
 800aaf6:	fa01 f605 	lsl.w	r6, r1, r5
 800aafa:	1d72      	adds	r2, r6, #5
 800aafc:	0092      	lsls	r2, r2, #2
 800aafe:	4620      	mov	r0, r4
 800ab00:	f001 fd34 	bl	800c56c <_calloc_r>
 800ab04:	b160      	cbz	r0, 800ab20 <_Balloc+0x64>
 800ab06:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ab0a:	e00e      	b.n	800ab2a <_Balloc+0x6e>
 800ab0c:	2221      	movs	r2, #33	@ 0x21
 800ab0e:	2104      	movs	r1, #4
 800ab10:	4620      	mov	r0, r4
 800ab12:	f001 fd2b 	bl	800c56c <_calloc_r>
 800ab16:	69e3      	ldr	r3, [r4, #28]
 800ab18:	60f0      	str	r0, [r6, #12]
 800ab1a:	68db      	ldr	r3, [r3, #12]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d1e4      	bne.n	800aaea <_Balloc+0x2e>
 800ab20:	2000      	movs	r0, #0
 800ab22:	bd70      	pop	{r4, r5, r6, pc}
 800ab24:	6802      	ldr	r2, [r0, #0]
 800ab26:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ab30:	e7f7      	b.n	800ab22 <_Balloc+0x66>
 800ab32:	bf00      	nop
 800ab34:	0800d4b2 	.word	0x0800d4b2
 800ab38:	0800d532 	.word	0x0800d532

0800ab3c <_Bfree>:
 800ab3c:	b570      	push	{r4, r5, r6, lr}
 800ab3e:	69c6      	ldr	r6, [r0, #28]
 800ab40:	4605      	mov	r5, r0
 800ab42:	460c      	mov	r4, r1
 800ab44:	b976      	cbnz	r6, 800ab64 <_Bfree+0x28>
 800ab46:	2010      	movs	r0, #16
 800ab48:	f7ff ff02 	bl	800a950 <malloc>
 800ab4c:	4602      	mov	r2, r0
 800ab4e:	61e8      	str	r0, [r5, #28]
 800ab50:	b920      	cbnz	r0, 800ab5c <_Bfree+0x20>
 800ab52:	4b09      	ldr	r3, [pc, #36]	@ (800ab78 <_Bfree+0x3c>)
 800ab54:	4809      	ldr	r0, [pc, #36]	@ (800ab7c <_Bfree+0x40>)
 800ab56:	218f      	movs	r1, #143	@ 0x8f
 800ab58:	f001 fcea 	bl	800c530 <__assert_func>
 800ab5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ab60:	6006      	str	r6, [r0, #0]
 800ab62:	60c6      	str	r6, [r0, #12]
 800ab64:	b13c      	cbz	r4, 800ab76 <_Bfree+0x3a>
 800ab66:	69eb      	ldr	r3, [r5, #28]
 800ab68:	6862      	ldr	r2, [r4, #4]
 800ab6a:	68db      	ldr	r3, [r3, #12]
 800ab6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ab70:	6021      	str	r1, [r4, #0]
 800ab72:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ab76:	bd70      	pop	{r4, r5, r6, pc}
 800ab78:	0800d4b2 	.word	0x0800d4b2
 800ab7c:	0800d532 	.word	0x0800d532

0800ab80 <__multadd>:
 800ab80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab84:	690d      	ldr	r5, [r1, #16]
 800ab86:	4607      	mov	r7, r0
 800ab88:	460c      	mov	r4, r1
 800ab8a:	461e      	mov	r6, r3
 800ab8c:	f101 0c14 	add.w	ip, r1, #20
 800ab90:	2000      	movs	r0, #0
 800ab92:	f8dc 3000 	ldr.w	r3, [ip]
 800ab96:	b299      	uxth	r1, r3
 800ab98:	fb02 6101 	mla	r1, r2, r1, r6
 800ab9c:	0c1e      	lsrs	r6, r3, #16
 800ab9e:	0c0b      	lsrs	r3, r1, #16
 800aba0:	fb02 3306 	mla	r3, r2, r6, r3
 800aba4:	b289      	uxth	r1, r1
 800aba6:	3001      	adds	r0, #1
 800aba8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800abac:	4285      	cmp	r5, r0
 800abae:	f84c 1b04 	str.w	r1, [ip], #4
 800abb2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800abb6:	dcec      	bgt.n	800ab92 <__multadd+0x12>
 800abb8:	b30e      	cbz	r6, 800abfe <__multadd+0x7e>
 800abba:	68a3      	ldr	r3, [r4, #8]
 800abbc:	42ab      	cmp	r3, r5
 800abbe:	dc19      	bgt.n	800abf4 <__multadd+0x74>
 800abc0:	6861      	ldr	r1, [r4, #4]
 800abc2:	4638      	mov	r0, r7
 800abc4:	3101      	adds	r1, #1
 800abc6:	f7ff ff79 	bl	800aabc <_Balloc>
 800abca:	4680      	mov	r8, r0
 800abcc:	b928      	cbnz	r0, 800abda <__multadd+0x5a>
 800abce:	4602      	mov	r2, r0
 800abd0:	4b0c      	ldr	r3, [pc, #48]	@ (800ac04 <__multadd+0x84>)
 800abd2:	480d      	ldr	r0, [pc, #52]	@ (800ac08 <__multadd+0x88>)
 800abd4:	21ba      	movs	r1, #186	@ 0xba
 800abd6:	f001 fcab 	bl	800c530 <__assert_func>
 800abda:	6922      	ldr	r2, [r4, #16]
 800abdc:	3202      	adds	r2, #2
 800abde:	f104 010c 	add.w	r1, r4, #12
 800abe2:	0092      	lsls	r2, r2, #2
 800abe4:	300c      	adds	r0, #12
 800abe6:	f001 fc8b 	bl	800c500 <memcpy>
 800abea:	4621      	mov	r1, r4
 800abec:	4638      	mov	r0, r7
 800abee:	f7ff ffa5 	bl	800ab3c <_Bfree>
 800abf2:	4644      	mov	r4, r8
 800abf4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800abf8:	3501      	adds	r5, #1
 800abfa:	615e      	str	r6, [r3, #20]
 800abfc:	6125      	str	r5, [r4, #16]
 800abfe:	4620      	mov	r0, r4
 800ac00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac04:	0800d521 	.word	0x0800d521
 800ac08:	0800d532 	.word	0x0800d532

0800ac0c <__s2b>:
 800ac0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac10:	460c      	mov	r4, r1
 800ac12:	4615      	mov	r5, r2
 800ac14:	461f      	mov	r7, r3
 800ac16:	2209      	movs	r2, #9
 800ac18:	3308      	adds	r3, #8
 800ac1a:	4606      	mov	r6, r0
 800ac1c:	fb93 f3f2 	sdiv	r3, r3, r2
 800ac20:	2100      	movs	r1, #0
 800ac22:	2201      	movs	r2, #1
 800ac24:	429a      	cmp	r2, r3
 800ac26:	db09      	blt.n	800ac3c <__s2b+0x30>
 800ac28:	4630      	mov	r0, r6
 800ac2a:	f7ff ff47 	bl	800aabc <_Balloc>
 800ac2e:	b940      	cbnz	r0, 800ac42 <__s2b+0x36>
 800ac30:	4602      	mov	r2, r0
 800ac32:	4b19      	ldr	r3, [pc, #100]	@ (800ac98 <__s2b+0x8c>)
 800ac34:	4819      	ldr	r0, [pc, #100]	@ (800ac9c <__s2b+0x90>)
 800ac36:	21d3      	movs	r1, #211	@ 0xd3
 800ac38:	f001 fc7a 	bl	800c530 <__assert_func>
 800ac3c:	0052      	lsls	r2, r2, #1
 800ac3e:	3101      	adds	r1, #1
 800ac40:	e7f0      	b.n	800ac24 <__s2b+0x18>
 800ac42:	9b08      	ldr	r3, [sp, #32]
 800ac44:	6143      	str	r3, [r0, #20]
 800ac46:	2d09      	cmp	r5, #9
 800ac48:	f04f 0301 	mov.w	r3, #1
 800ac4c:	6103      	str	r3, [r0, #16]
 800ac4e:	dd16      	ble.n	800ac7e <__s2b+0x72>
 800ac50:	f104 0909 	add.w	r9, r4, #9
 800ac54:	46c8      	mov	r8, r9
 800ac56:	442c      	add	r4, r5
 800ac58:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ac5c:	4601      	mov	r1, r0
 800ac5e:	3b30      	subs	r3, #48	@ 0x30
 800ac60:	220a      	movs	r2, #10
 800ac62:	4630      	mov	r0, r6
 800ac64:	f7ff ff8c 	bl	800ab80 <__multadd>
 800ac68:	45a0      	cmp	r8, r4
 800ac6a:	d1f5      	bne.n	800ac58 <__s2b+0x4c>
 800ac6c:	f1a5 0408 	sub.w	r4, r5, #8
 800ac70:	444c      	add	r4, r9
 800ac72:	1b2d      	subs	r5, r5, r4
 800ac74:	1963      	adds	r3, r4, r5
 800ac76:	42bb      	cmp	r3, r7
 800ac78:	db04      	blt.n	800ac84 <__s2b+0x78>
 800ac7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac7e:	340a      	adds	r4, #10
 800ac80:	2509      	movs	r5, #9
 800ac82:	e7f6      	b.n	800ac72 <__s2b+0x66>
 800ac84:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ac88:	4601      	mov	r1, r0
 800ac8a:	3b30      	subs	r3, #48	@ 0x30
 800ac8c:	220a      	movs	r2, #10
 800ac8e:	4630      	mov	r0, r6
 800ac90:	f7ff ff76 	bl	800ab80 <__multadd>
 800ac94:	e7ee      	b.n	800ac74 <__s2b+0x68>
 800ac96:	bf00      	nop
 800ac98:	0800d521 	.word	0x0800d521
 800ac9c:	0800d532 	.word	0x0800d532

0800aca0 <__hi0bits>:
 800aca0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800aca4:	4603      	mov	r3, r0
 800aca6:	bf36      	itet	cc
 800aca8:	0403      	lslcc	r3, r0, #16
 800acaa:	2000      	movcs	r0, #0
 800acac:	2010      	movcc	r0, #16
 800acae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800acb2:	bf3c      	itt	cc
 800acb4:	021b      	lslcc	r3, r3, #8
 800acb6:	3008      	addcc	r0, #8
 800acb8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800acbc:	bf3c      	itt	cc
 800acbe:	011b      	lslcc	r3, r3, #4
 800acc0:	3004      	addcc	r0, #4
 800acc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800acc6:	bf3c      	itt	cc
 800acc8:	009b      	lslcc	r3, r3, #2
 800acca:	3002      	addcc	r0, #2
 800accc:	2b00      	cmp	r3, #0
 800acce:	db05      	blt.n	800acdc <__hi0bits+0x3c>
 800acd0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800acd4:	f100 0001 	add.w	r0, r0, #1
 800acd8:	bf08      	it	eq
 800acda:	2020      	moveq	r0, #32
 800acdc:	4770      	bx	lr

0800acde <__lo0bits>:
 800acde:	6803      	ldr	r3, [r0, #0]
 800ace0:	4602      	mov	r2, r0
 800ace2:	f013 0007 	ands.w	r0, r3, #7
 800ace6:	d00b      	beq.n	800ad00 <__lo0bits+0x22>
 800ace8:	07d9      	lsls	r1, r3, #31
 800acea:	d421      	bmi.n	800ad30 <__lo0bits+0x52>
 800acec:	0798      	lsls	r0, r3, #30
 800acee:	bf49      	itett	mi
 800acf0:	085b      	lsrmi	r3, r3, #1
 800acf2:	089b      	lsrpl	r3, r3, #2
 800acf4:	2001      	movmi	r0, #1
 800acf6:	6013      	strmi	r3, [r2, #0]
 800acf8:	bf5c      	itt	pl
 800acfa:	6013      	strpl	r3, [r2, #0]
 800acfc:	2002      	movpl	r0, #2
 800acfe:	4770      	bx	lr
 800ad00:	b299      	uxth	r1, r3
 800ad02:	b909      	cbnz	r1, 800ad08 <__lo0bits+0x2a>
 800ad04:	0c1b      	lsrs	r3, r3, #16
 800ad06:	2010      	movs	r0, #16
 800ad08:	b2d9      	uxtb	r1, r3
 800ad0a:	b909      	cbnz	r1, 800ad10 <__lo0bits+0x32>
 800ad0c:	3008      	adds	r0, #8
 800ad0e:	0a1b      	lsrs	r3, r3, #8
 800ad10:	0719      	lsls	r1, r3, #28
 800ad12:	bf04      	itt	eq
 800ad14:	091b      	lsreq	r3, r3, #4
 800ad16:	3004      	addeq	r0, #4
 800ad18:	0799      	lsls	r1, r3, #30
 800ad1a:	bf04      	itt	eq
 800ad1c:	089b      	lsreq	r3, r3, #2
 800ad1e:	3002      	addeq	r0, #2
 800ad20:	07d9      	lsls	r1, r3, #31
 800ad22:	d403      	bmi.n	800ad2c <__lo0bits+0x4e>
 800ad24:	085b      	lsrs	r3, r3, #1
 800ad26:	f100 0001 	add.w	r0, r0, #1
 800ad2a:	d003      	beq.n	800ad34 <__lo0bits+0x56>
 800ad2c:	6013      	str	r3, [r2, #0]
 800ad2e:	4770      	bx	lr
 800ad30:	2000      	movs	r0, #0
 800ad32:	4770      	bx	lr
 800ad34:	2020      	movs	r0, #32
 800ad36:	4770      	bx	lr

0800ad38 <__i2b>:
 800ad38:	b510      	push	{r4, lr}
 800ad3a:	460c      	mov	r4, r1
 800ad3c:	2101      	movs	r1, #1
 800ad3e:	f7ff febd 	bl	800aabc <_Balloc>
 800ad42:	4602      	mov	r2, r0
 800ad44:	b928      	cbnz	r0, 800ad52 <__i2b+0x1a>
 800ad46:	4b05      	ldr	r3, [pc, #20]	@ (800ad5c <__i2b+0x24>)
 800ad48:	4805      	ldr	r0, [pc, #20]	@ (800ad60 <__i2b+0x28>)
 800ad4a:	f240 1145 	movw	r1, #325	@ 0x145
 800ad4e:	f001 fbef 	bl	800c530 <__assert_func>
 800ad52:	2301      	movs	r3, #1
 800ad54:	6144      	str	r4, [r0, #20]
 800ad56:	6103      	str	r3, [r0, #16]
 800ad58:	bd10      	pop	{r4, pc}
 800ad5a:	bf00      	nop
 800ad5c:	0800d521 	.word	0x0800d521
 800ad60:	0800d532 	.word	0x0800d532

0800ad64 <__multiply>:
 800ad64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad68:	4614      	mov	r4, r2
 800ad6a:	690a      	ldr	r2, [r1, #16]
 800ad6c:	6923      	ldr	r3, [r4, #16]
 800ad6e:	429a      	cmp	r2, r3
 800ad70:	bfa8      	it	ge
 800ad72:	4623      	movge	r3, r4
 800ad74:	460f      	mov	r7, r1
 800ad76:	bfa4      	itt	ge
 800ad78:	460c      	movge	r4, r1
 800ad7a:	461f      	movge	r7, r3
 800ad7c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ad80:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ad84:	68a3      	ldr	r3, [r4, #8]
 800ad86:	6861      	ldr	r1, [r4, #4]
 800ad88:	eb0a 0609 	add.w	r6, sl, r9
 800ad8c:	42b3      	cmp	r3, r6
 800ad8e:	b085      	sub	sp, #20
 800ad90:	bfb8      	it	lt
 800ad92:	3101      	addlt	r1, #1
 800ad94:	f7ff fe92 	bl	800aabc <_Balloc>
 800ad98:	b930      	cbnz	r0, 800ada8 <__multiply+0x44>
 800ad9a:	4602      	mov	r2, r0
 800ad9c:	4b44      	ldr	r3, [pc, #272]	@ (800aeb0 <__multiply+0x14c>)
 800ad9e:	4845      	ldr	r0, [pc, #276]	@ (800aeb4 <__multiply+0x150>)
 800ada0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ada4:	f001 fbc4 	bl	800c530 <__assert_func>
 800ada8:	f100 0514 	add.w	r5, r0, #20
 800adac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800adb0:	462b      	mov	r3, r5
 800adb2:	2200      	movs	r2, #0
 800adb4:	4543      	cmp	r3, r8
 800adb6:	d321      	bcc.n	800adfc <__multiply+0x98>
 800adb8:	f107 0114 	add.w	r1, r7, #20
 800adbc:	f104 0214 	add.w	r2, r4, #20
 800adc0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800adc4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800adc8:	9302      	str	r3, [sp, #8]
 800adca:	1b13      	subs	r3, r2, r4
 800adcc:	3b15      	subs	r3, #21
 800adce:	f023 0303 	bic.w	r3, r3, #3
 800add2:	3304      	adds	r3, #4
 800add4:	f104 0715 	add.w	r7, r4, #21
 800add8:	42ba      	cmp	r2, r7
 800adda:	bf38      	it	cc
 800addc:	2304      	movcc	r3, #4
 800adde:	9301      	str	r3, [sp, #4]
 800ade0:	9b02      	ldr	r3, [sp, #8]
 800ade2:	9103      	str	r1, [sp, #12]
 800ade4:	428b      	cmp	r3, r1
 800ade6:	d80c      	bhi.n	800ae02 <__multiply+0x9e>
 800ade8:	2e00      	cmp	r6, #0
 800adea:	dd03      	ble.n	800adf4 <__multiply+0x90>
 800adec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d05b      	beq.n	800aeac <__multiply+0x148>
 800adf4:	6106      	str	r6, [r0, #16]
 800adf6:	b005      	add	sp, #20
 800adf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adfc:	f843 2b04 	str.w	r2, [r3], #4
 800ae00:	e7d8      	b.n	800adb4 <__multiply+0x50>
 800ae02:	f8b1 a000 	ldrh.w	sl, [r1]
 800ae06:	f1ba 0f00 	cmp.w	sl, #0
 800ae0a:	d024      	beq.n	800ae56 <__multiply+0xf2>
 800ae0c:	f104 0e14 	add.w	lr, r4, #20
 800ae10:	46a9      	mov	r9, r5
 800ae12:	f04f 0c00 	mov.w	ip, #0
 800ae16:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ae1a:	f8d9 3000 	ldr.w	r3, [r9]
 800ae1e:	fa1f fb87 	uxth.w	fp, r7
 800ae22:	b29b      	uxth	r3, r3
 800ae24:	fb0a 330b 	mla	r3, sl, fp, r3
 800ae28:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800ae2c:	f8d9 7000 	ldr.w	r7, [r9]
 800ae30:	4463      	add	r3, ip
 800ae32:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ae36:	fb0a c70b 	mla	r7, sl, fp, ip
 800ae3a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ae3e:	b29b      	uxth	r3, r3
 800ae40:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ae44:	4572      	cmp	r2, lr
 800ae46:	f849 3b04 	str.w	r3, [r9], #4
 800ae4a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ae4e:	d8e2      	bhi.n	800ae16 <__multiply+0xb2>
 800ae50:	9b01      	ldr	r3, [sp, #4]
 800ae52:	f845 c003 	str.w	ip, [r5, r3]
 800ae56:	9b03      	ldr	r3, [sp, #12]
 800ae58:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ae5c:	3104      	adds	r1, #4
 800ae5e:	f1b9 0f00 	cmp.w	r9, #0
 800ae62:	d021      	beq.n	800aea8 <__multiply+0x144>
 800ae64:	682b      	ldr	r3, [r5, #0]
 800ae66:	f104 0c14 	add.w	ip, r4, #20
 800ae6a:	46ae      	mov	lr, r5
 800ae6c:	f04f 0a00 	mov.w	sl, #0
 800ae70:	f8bc b000 	ldrh.w	fp, [ip]
 800ae74:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ae78:	fb09 770b 	mla	r7, r9, fp, r7
 800ae7c:	4457      	add	r7, sl
 800ae7e:	b29b      	uxth	r3, r3
 800ae80:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ae84:	f84e 3b04 	str.w	r3, [lr], #4
 800ae88:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ae8c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ae90:	f8be 3000 	ldrh.w	r3, [lr]
 800ae94:	fb09 330a 	mla	r3, r9, sl, r3
 800ae98:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800ae9c:	4562      	cmp	r2, ip
 800ae9e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aea2:	d8e5      	bhi.n	800ae70 <__multiply+0x10c>
 800aea4:	9f01      	ldr	r7, [sp, #4]
 800aea6:	51eb      	str	r3, [r5, r7]
 800aea8:	3504      	adds	r5, #4
 800aeaa:	e799      	b.n	800ade0 <__multiply+0x7c>
 800aeac:	3e01      	subs	r6, #1
 800aeae:	e79b      	b.n	800ade8 <__multiply+0x84>
 800aeb0:	0800d521 	.word	0x0800d521
 800aeb4:	0800d532 	.word	0x0800d532

0800aeb8 <__pow5mult>:
 800aeb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aebc:	4615      	mov	r5, r2
 800aebe:	f012 0203 	ands.w	r2, r2, #3
 800aec2:	4607      	mov	r7, r0
 800aec4:	460e      	mov	r6, r1
 800aec6:	d007      	beq.n	800aed8 <__pow5mult+0x20>
 800aec8:	4c25      	ldr	r4, [pc, #148]	@ (800af60 <__pow5mult+0xa8>)
 800aeca:	3a01      	subs	r2, #1
 800aecc:	2300      	movs	r3, #0
 800aece:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800aed2:	f7ff fe55 	bl	800ab80 <__multadd>
 800aed6:	4606      	mov	r6, r0
 800aed8:	10ad      	asrs	r5, r5, #2
 800aeda:	d03d      	beq.n	800af58 <__pow5mult+0xa0>
 800aedc:	69fc      	ldr	r4, [r7, #28]
 800aede:	b97c      	cbnz	r4, 800af00 <__pow5mult+0x48>
 800aee0:	2010      	movs	r0, #16
 800aee2:	f7ff fd35 	bl	800a950 <malloc>
 800aee6:	4602      	mov	r2, r0
 800aee8:	61f8      	str	r0, [r7, #28]
 800aeea:	b928      	cbnz	r0, 800aef8 <__pow5mult+0x40>
 800aeec:	4b1d      	ldr	r3, [pc, #116]	@ (800af64 <__pow5mult+0xac>)
 800aeee:	481e      	ldr	r0, [pc, #120]	@ (800af68 <__pow5mult+0xb0>)
 800aef0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800aef4:	f001 fb1c 	bl	800c530 <__assert_func>
 800aef8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aefc:	6004      	str	r4, [r0, #0]
 800aefe:	60c4      	str	r4, [r0, #12]
 800af00:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800af04:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800af08:	b94c      	cbnz	r4, 800af1e <__pow5mult+0x66>
 800af0a:	f240 2171 	movw	r1, #625	@ 0x271
 800af0e:	4638      	mov	r0, r7
 800af10:	f7ff ff12 	bl	800ad38 <__i2b>
 800af14:	2300      	movs	r3, #0
 800af16:	f8c8 0008 	str.w	r0, [r8, #8]
 800af1a:	4604      	mov	r4, r0
 800af1c:	6003      	str	r3, [r0, #0]
 800af1e:	f04f 0900 	mov.w	r9, #0
 800af22:	07eb      	lsls	r3, r5, #31
 800af24:	d50a      	bpl.n	800af3c <__pow5mult+0x84>
 800af26:	4631      	mov	r1, r6
 800af28:	4622      	mov	r2, r4
 800af2a:	4638      	mov	r0, r7
 800af2c:	f7ff ff1a 	bl	800ad64 <__multiply>
 800af30:	4631      	mov	r1, r6
 800af32:	4680      	mov	r8, r0
 800af34:	4638      	mov	r0, r7
 800af36:	f7ff fe01 	bl	800ab3c <_Bfree>
 800af3a:	4646      	mov	r6, r8
 800af3c:	106d      	asrs	r5, r5, #1
 800af3e:	d00b      	beq.n	800af58 <__pow5mult+0xa0>
 800af40:	6820      	ldr	r0, [r4, #0]
 800af42:	b938      	cbnz	r0, 800af54 <__pow5mult+0x9c>
 800af44:	4622      	mov	r2, r4
 800af46:	4621      	mov	r1, r4
 800af48:	4638      	mov	r0, r7
 800af4a:	f7ff ff0b 	bl	800ad64 <__multiply>
 800af4e:	6020      	str	r0, [r4, #0]
 800af50:	f8c0 9000 	str.w	r9, [r0]
 800af54:	4604      	mov	r4, r0
 800af56:	e7e4      	b.n	800af22 <__pow5mult+0x6a>
 800af58:	4630      	mov	r0, r6
 800af5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af5e:	bf00      	nop
 800af60:	0800d58c 	.word	0x0800d58c
 800af64:	0800d4b2 	.word	0x0800d4b2
 800af68:	0800d532 	.word	0x0800d532

0800af6c <__lshift>:
 800af6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af70:	460c      	mov	r4, r1
 800af72:	6849      	ldr	r1, [r1, #4]
 800af74:	6923      	ldr	r3, [r4, #16]
 800af76:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800af7a:	68a3      	ldr	r3, [r4, #8]
 800af7c:	4607      	mov	r7, r0
 800af7e:	4691      	mov	r9, r2
 800af80:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800af84:	f108 0601 	add.w	r6, r8, #1
 800af88:	42b3      	cmp	r3, r6
 800af8a:	db0b      	blt.n	800afa4 <__lshift+0x38>
 800af8c:	4638      	mov	r0, r7
 800af8e:	f7ff fd95 	bl	800aabc <_Balloc>
 800af92:	4605      	mov	r5, r0
 800af94:	b948      	cbnz	r0, 800afaa <__lshift+0x3e>
 800af96:	4602      	mov	r2, r0
 800af98:	4b28      	ldr	r3, [pc, #160]	@ (800b03c <__lshift+0xd0>)
 800af9a:	4829      	ldr	r0, [pc, #164]	@ (800b040 <__lshift+0xd4>)
 800af9c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800afa0:	f001 fac6 	bl	800c530 <__assert_func>
 800afa4:	3101      	adds	r1, #1
 800afa6:	005b      	lsls	r3, r3, #1
 800afa8:	e7ee      	b.n	800af88 <__lshift+0x1c>
 800afaa:	2300      	movs	r3, #0
 800afac:	f100 0114 	add.w	r1, r0, #20
 800afb0:	f100 0210 	add.w	r2, r0, #16
 800afb4:	4618      	mov	r0, r3
 800afb6:	4553      	cmp	r3, sl
 800afb8:	db33      	blt.n	800b022 <__lshift+0xb6>
 800afba:	6920      	ldr	r0, [r4, #16]
 800afbc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800afc0:	f104 0314 	add.w	r3, r4, #20
 800afc4:	f019 091f 	ands.w	r9, r9, #31
 800afc8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800afcc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800afd0:	d02b      	beq.n	800b02a <__lshift+0xbe>
 800afd2:	f1c9 0e20 	rsb	lr, r9, #32
 800afd6:	468a      	mov	sl, r1
 800afd8:	2200      	movs	r2, #0
 800afda:	6818      	ldr	r0, [r3, #0]
 800afdc:	fa00 f009 	lsl.w	r0, r0, r9
 800afe0:	4310      	orrs	r0, r2
 800afe2:	f84a 0b04 	str.w	r0, [sl], #4
 800afe6:	f853 2b04 	ldr.w	r2, [r3], #4
 800afea:	459c      	cmp	ip, r3
 800afec:	fa22 f20e 	lsr.w	r2, r2, lr
 800aff0:	d8f3      	bhi.n	800afda <__lshift+0x6e>
 800aff2:	ebac 0304 	sub.w	r3, ip, r4
 800aff6:	3b15      	subs	r3, #21
 800aff8:	f023 0303 	bic.w	r3, r3, #3
 800affc:	3304      	adds	r3, #4
 800affe:	f104 0015 	add.w	r0, r4, #21
 800b002:	4584      	cmp	ip, r0
 800b004:	bf38      	it	cc
 800b006:	2304      	movcc	r3, #4
 800b008:	50ca      	str	r2, [r1, r3]
 800b00a:	b10a      	cbz	r2, 800b010 <__lshift+0xa4>
 800b00c:	f108 0602 	add.w	r6, r8, #2
 800b010:	3e01      	subs	r6, #1
 800b012:	4638      	mov	r0, r7
 800b014:	612e      	str	r6, [r5, #16]
 800b016:	4621      	mov	r1, r4
 800b018:	f7ff fd90 	bl	800ab3c <_Bfree>
 800b01c:	4628      	mov	r0, r5
 800b01e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b022:	f842 0f04 	str.w	r0, [r2, #4]!
 800b026:	3301      	adds	r3, #1
 800b028:	e7c5      	b.n	800afb6 <__lshift+0x4a>
 800b02a:	3904      	subs	r1, #4
 800b02c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b030:	f841 2f04 	str.w	r2, [r1, #4]!
 800b034:	459c      	cmp	ip, r3
 800b036:	d8f9      	bhi.n	800b02c <__lshift+0xc0>
 800b038:	e7ea      	b.n	800b010 <__lshift+0xa4>
 800b03a:	bf00      	nop
 800b03c:	0800d521 	.word	0x0800d521
 800b040:	0800d532 	.word	0x0800d532

0800b044 <__mcmp>:
 800b044:	690a      	ldr	r2, [r1, #16]
 800b046:	4603      	mov	r3, r0
 800b048:	6900      	ldr	r0, [r0, #16]
 800b04a:	1a80      	subs	r0, r0, r2
 800b04c:	b530      	push	{r4, r5, lr}
 800b04e:	d10e      	bne.n	800b06e <__mcmp+0x2a>
 800b050:	3314      	adds	r3, #20
 800b052:	3114      	adds	r1, #20
 800b054:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b058:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b05c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b060:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b064:	4295      	cmp	r5, r2
 800b066:	d003      	beq.n	800b070 <__mcmp+0x2c>
 800b068:	d205      	bcs.n	800b076 <__mcmp+0x32>
 800b06a:	f04f 30ff 	mov.w	r0, #4294967295
 800b06e:	bd30      	pop	{r4, r5, pc}
 800b070:	42a3      	cmp	r3, r4
 800b072:	d3f3      	bcc.n	800b05c <__mcmp+0x18>
 800b074:	e7fb      	b.n	800b06e <__mcmp+0x2a>
 800b076:	2001      	movs	r0, #1
 800b078:	e7f9      	b.n	800b06e <__mcmp+0x2a>
	...

0800b07c <__mdiff>:
 800b07c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b080:	4689      	mov	r9, r1
 800b082:	4606      	mov	r6, r0
 800b084:	4611      	mov	r1, r2
 800b086:	4648      	mov	r0, r9
 800b088:	4614      	mov	r4, r2
 800b08a:	f7ff ffdb 	bl	800b044 <__mcmp>
 800b08e:	1e05      	subs	r5, r0, #0
 800b090:	d112      	bne.n	800b0b8 <__mdiff+0x3c>
 800b092:	4629      	mov	r1, r5
 800b094:	4630      	mov	r0, r6
 800b096:	f7ff fd11 	bl	800aabc <_Balloc>
 800b09a:	4602      	mov	r2, r0
 800b09c:	b928      	cbnz	r0, 800b0aa <__mdiff+0x2e>
 800b09e:	4b3f      	ldr	r3, [pc, #252]	@ (800b19c <__mdiff+0x120>)
 800b0a0:	f240 2137 	movw	r1, #567	@ 0x237
 800b0a4:	483e      	ldr	r0, [pc, #248]	@ (800b1a0 <__mdiff+0x124>)
 800b0a6:	f001 fa43 	bl	800c530 <__assert_func>
 800b0aa:	2301      	movs	r3, #1
 800b0ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b0b0:	4610      	mov	r0, r2
 800b0b2:	b003      	add	sp, #12
 800b0b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0b8:	bfbc      	itt	lt
 800b0ba:	464b      	movlt	r3, r9
 800b0bc:	46a1      	movlt	r9, r4
 800b0be:	4630      	mov	r0, r6
 800b0c0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b0c4:	bfba      	itte	lt
 800b0c6:	461c      	movlt	r4, r3
 800b0c8:	2501      	movlt	r5, #1
 800b0ca:	2500      	movge	r5, #0
 800b0cc:	f7ff fcf6 	bl	800aabc <_Balloc>
 800b0d0:	4602      	mov	r2, r0
 800b0d2:	b918      	cbnz	r0, 800b0dc <__mdiff+0x60>
 800b0d4:	4b31      	ldr	r3, [pc, #196]	@ (800b19c <__mdiff+0x120>)
 800b0d6:	f240 2145 	movw	r1, #581	@ 0x245
 800b0da:	e7e3      	b.n	800b0a4 <__mdiff+0x28>
 800b0dc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b0e0:	6926      	ldr	r6, [r4, #16]
 800b0e2:	60c5      	str	r5, [r0, #12]
 800b0e4:	f109 0310 	add.w	r3, r9, #16
 800b0e8:	f109 0514 	add.w	r5, r9, #20
 800b0ec:	f104 0e14 	add.w	lr, r4, #20
 800b0f0:	f100 0b14 	add.w	fp, r0, #20
 800b0f4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b0f8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b0fc:	9301      	str	r3, [sp, #4]
 800b0fe:	46d9      	mov	r9, fp
 800b100:	f04f 0c00 	mov.w	ip, #0
 800b104:	9b01      	ldr	r3, [sp, #4]
 800b106:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b10a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b10e:	9301      	str	r3, [sp, #4]
 800b110:	fa1f f38a 	uxth.w	r3, sl
 800b114:	4619      	mov	r1, r3
 800b116:	b283      	uxth	r3, r0
 800b118:	1acb      	subs	r3, r1, r3
 800b11a:	0c00      	lsrs	r0, r0, #16
 800b11c:	4463      	add	r3, ip
 800b11e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b122:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b126:	b29b      	uxth	r3, r3
 800b128:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b12c:	4576      	cmp	r6, lr
 800b12e:	f849 3b04 	str.w	r3, [r9], #4
 800b132:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b136:	d8e5      	bhi.n	800b104 <__mdiff+0x88>
 800b138:	1b33      	subs	r3, r6, r4
 800b13a:	3b15      	subs	r3, #21
 800b13c:	f023 0303 	bic.w	r3, r3, #3
 800b140:	3415      	adds	r4, #21
 800b142:	3304      	adds	r3, #4
 800b144:	42a6      	cmp	r6, r4
 800b146:	bf38      	it	cc
 800b148:	2304      	movcc	r3, #4
 800b14a:	441d      	add	r5, r3
 800b14c:	445b      	add	r3, fp
 800b14e:	461e      	mov	r6, r3
 800b150:	462c      	mov	r4, r5
 800b152:	4544      	cmp	r4, r8
 800b154:	d30e      	bcc.n	800b174 <__mdiff+0xf8>
 800b156:	f108 0103 	add.w	r1, r8, #3
 800b15a:	1b49      	subs	r1, r1, r5
 800b15c:	f021 0103 	bic.w	r1, r1, #3
 800b160:	3d03      	subs	r5, #3
 800b162:	45a8      	cmp	r8, r5
 800b164:	bf38      	it	cc
 800b166:	2100      	movcc	r1, #0
 800b168:	440b      	add	r3, r1
 800b16a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b16e:	b191      	cbz	r1, 800b196 <__mdiff+0x11a>
 800b170:	6117      	str	r7, [r2, #16]
 800b172:	e79d      	b.n	800b0b0 <__mdiff+0x34>
 800b174:	f854 1b04 	ldr.w	r1, [r4], #4
 800b178:	46e6      	mov	lr, ip
 800b17a:	0c08      	lsrs	r0, r1, #16
 800b17c:	fa1c fc81 	uxtah	ip, ip, r1
 800b180:	4471      	add	r1, lr
 800b182:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b186:	b289      	uxth	r1, r1
 800b188:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b18c:	f846 1b04 	str.w	r1, [r6], #4
 800b190:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b194:	e7dd      	b.n	800b152 <__mdiff+0xd6>
 800b196:	3f01      	subs	r7, #1
 800b198:	e7e7      	b.n	800b16a <__mdiff+0xee>
 800b19a:	bf00      	nop
 800b19c:	0800d521 	.word	0x0800d521
 800b1a0:	0800d532 	.word	0x0800d532

0800b1a4 <__ulp>:
 800b1a4:	b082      	sub	sp, #8
 800b1a6:	ed8d 0b00 	vstr	d0, [sp]
 800b1aa:	9a01      	ldr	r2, [sp, #4]
 800b1ac:	4b0f      	ldr	r3, [pc, #60]	@ (800b1ec <__ulp+0x48>)
 800b1ae:	4013      	ands	r3, r2
 800b1b0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	dc08      	bgt.n	800b1ca <__ulp+0x26>
 800b1b8:	425b      	negs	r3, r3
 800b1ba:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800b1be:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b1c2:	da04      	bge.n	800b1ce <__ulp+0x2a>
 800b1c4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b1c8:	4113      	asrs	r3, r2
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	e008      	b.n	800b1e0 <__ulp+0x3c>
 800b1ce:	f1a2 0314 	sub.w	r3, r2, #20
 800b1d2:	2b1e      	cmp	r3, #30
 800b1d4:	bfda      	itte	le
 800b1d6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800b1da:	40da      	lsrle	r2, r3
 800b1dc:	2201      	movgt	r2, #1
 800b1de:	2300      	movs	r3, #0
 800b1e0:	4619      	mov	r1, r3
 800b1e2:	4610      	mov	r0, r2
 800b1e4:	ec41 0b10 	vmov	d0, r0, r1
 800b1e8:	b002      	add	sp, #8
 800b1ea:	4770      	bx	lr
 800b1ec:	7ff00000 	.word	0x7ff00000

0800b1f0 <__b2d>:
 800b1f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1f4:	6906      	ldr	r6, [r0, #16]
 800b1f6:	f100 0814 	add.w	r8, r0, #20
 800b1fa:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b1fe:	1f37      	subs	r7, r6, #4
 800b200:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b204:	4610      	mov	r0, r2
 800b206:	f7ff fd4b 	bl	800aca0 <__hi0bits>
 800b20a:	f1c0 0320 	rsb	r3, r0, #32
 800b20e:	280a      	cmp	r0, #10
 800b210:	600b      	str	r3, [r1, #0]
 800b212:	491b      	ldr	r1, [pc, #108]	@ (800b280 <__b2d+0x90>)
 800b214:	dc15      	bgt.n	800b242 <__b2d+0x52>
 800b216:	f1c0 0c0b 	rsb	ip, r0, #11
 800b21a:	fa22 f30c 	lsr.w	r3, r2, ip
 800b21e:	45b8      	cmp	r8, r7
 800b220:	ea43 0501 	orr.w	r5, r3, r1
 800b224:	bf34      	ite	cc
 800b226:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b22a:	2300      	movcs	r3, #0
 800b22c:	3015      	adds	r0, #21
 800b22e:	fa02 f000 	lsl.w	r0, r2, r0
 800b232:	fa23 f30c 	lsr.w	r3, r3, ip
 800b236:	4303      	orrs	r3, r0
 800b238:	461c      	mov	r4, r3
 800b23a:	ec45 4b10 	vmov	d0, r4, r5
 800b23e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b242:	45b8      	cmp	r8, r7
 800b244:	bf3a      	itte	cc
 800b246:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b24a:	f1a6 0708 	subcc.w	r7, r6, #8
 800b24e:	2300      	movcs	r3, #0
 800b250:	380b      	subs	r0, #11
 800b252:	d012      	beq.n	800b27a <__b2d+0x8a>
 800b254:	f1c0 0120 	rsb	r1, r0, #32
 800b258:	fa23 f401 	lsr.w	r4, r3, r1
 800b25c:	4082      	lsls	r2, r0
 800b25e:	4322      	orrs	r2, r4
 800b260:	4547      	cmp	r7, r8
 800b262:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800b266:	bf8c      	ite	hi
 800b268:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b26c:	2200      	movls	r2, #0
 800b26e:	4083      	lsls	r3, r0
 800b270:	40ca      	lsrs	r2, r1
 800b272:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800b276:	4313      	orrs	r3, r2
 800b278:	e7de      	b.n	800b238 <__b2d+0x48>
 800b27a:	ea42 0501 	orr.w	r5, r2, r1
 800b27e:	e7db      	b.n	800b238 <__b2d+0x48>
 800b280:	3ff00000 	.word	0x3ff00000

0800b284 <__d2b>:
 800b284:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b288:	460f      	mov	r7, r1
 800b28a:	2101      	movs	r1, #1
 800b28c:	ec59 8b10 	vmov	r8, r9, d0
 800b290:	4616      	mov	r6, r2
 800b292:	f7ff fc13 	bl	800aabc <_Balloc>
 800b296:	4604      	mov	r4, r0
 800b298:	b930      	cbnz	r0, 800b2a8 <__d2b+0x24>
 800b29a:	4602      	mov	r2, r0
 800b29c:	4b23      	ldr	r3, [pc, #140]	@ (800b32c <__d2b+0xa8>)
 800b29e:	4824      	ldr	r0, [pc, #144]	@ (800b330 <__d2b+0xac>)
 800b2a0:	f240 310f 	movw	r1, #783	@ 0x30f
 800b2a4:	f001 f944 	bl	800c530 <__assert_func>
 800b2a8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b2ac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b2b0:	b10d      	cbz	r5, 800b2b6 <__d2b+0x32>
 800b2b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b2b6:	9301      	str	r3, [sp, #4]
 800b2b8:	f1b8 0300 	subs.w	r3, r8, #0
 800b2bc:	d023      	beq.n	800b306 <__d2b+0x82>
 800b2be:	4668      	mov	r0, sp
 800b2c0:	9300      	str	r3, [sp, #0]
 800b2c2:	f7ff fd0c 	bl	800acde <__lo0bits>
 800b2c6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b2ca:	b1d0      	cbz	r0, 800b302 <__d2b+0x7e>
 800b2cc:	f1c0 0320 	rsb	r3, r0, #32
 800b2d0:	fa02 f303 	lsl.w	r3, r2, r3
 800b2d4:	430b      	orrs	r3, r1
 800b2d6:	40c2      	lsrs	r2, r0
 800b2d8:	6163      	str	r3, [r4, #20]
 800b2da:	9201      	str	r2, [sp, #4]
 800b2dc:	9b01      	ldr	r3, [sp, #4]
 800b2de:	61a3      	str	r3, [r4, #24]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	bf0c      	ite	eq
 800b2e4:	2201      	moveq	r2, #1
 800b2e6:	2202      	movne	r2, #2
 800b2e8:	6122      	str	r2, [r4, #16]
 800b2ea:	b1a5      	cbz	r5, 800b316 <__d2b+0x92>
 800b2ec:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b2f0:	4405      	add	r5, r0
 800b2f2:	603d      	str	r5, [r7, #0]
 800b2f4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b2f8:	6030      	str	r0, [r6, #0]
 800b2fa:	4620      	mov	r0, r4
 800b2fc:	b003      	add	sp, #12
 800b2fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b302:	6161      	str	r1, [r4, #20]
 800b304:	e7ea      	b.n	800b2dc <__d2b+0x58>
 800b306:	a801      	add	r0, sp, #4
 800b308:	f7ff fce9 	bl	800acde <__lo0bits>
 800b30c:	9b01      	ldr	r3, [sp, #4]
 800b30e:	6163      	str	r3, [r4, #20]
 800b310:	3020      	adds	r0, #32
 800b312:	2201      	movs	r2, #1
 800b314:	e7e8      	b.n	800b2e8 <__d2b+0x64>
 800b316:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b31a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b31e:	6038      	str	r0, [r7, #0]
 800b320:	6918      	ldr	r0, [r3, #16]
 800b322:	f7ff fcbd 	bl	800aca0 <__hi0bits>
 800b326:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b32a:	e7e5      	b.n	800b2f8 <__d2b+0x74>
 800b32c:	0800d521 	.word	0x0800d521
 800b330:	0800d532 	.word	0x0800d532

0800b334 <__ratio>:
 800b334:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b338:	4688      	mov	r8, r1
 800b33a:	4669      	mov	r1, sp
 800b33c:	4681      	mov	r9, r0
 800b33e:	f7ff ff57 	bl	800b1f0 <__b2d>
 800b342:	a901      	add	r1, sp, #4
 800b344:	4640      	mov	r0, r8
 800b346:	ec55 4b10 	vmov	r4, r5, d0
 800b34a:	f7ff ff51 	bl	800b1f0 <__b2d>
 800b34e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800b352:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800b356:	1ad2      	subs	r2, r2, r3
 800b358:	e9dd 3100 	ldrd	r3, r1, [sp]
 800b35c:	1a5b      	subs	r3, r3, r1
 800b35e:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800b362:	ec57 6b10 	vmov	r6, r7, d0
 800b366:	2b00      	cmp	r3, #0
 800b368:	bfd6      	itet	le
 800b36a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b36e:	462a      	movgt	r2, r5
 800b370:	463a      	movle	r2, r7
 800b372:	46ab      	mov	fp, r5
 800b374:	46a2      	mov	sl, r4
 800b376:	bfce      	itee	gt
 800b378:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800b37c:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800b380:	ee00 3a90 	vmovle	s1, r3
 800b384:	ec4b ab17 	vmov	d7, sl, fp
 800b388:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800b38c:	b003      	add	sp, #12
 800b38e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b392 <__copybits>:
 800b392:	3901      	subs	r1, #1
 800b394:	b570      	push	{r4, r5, r6, lr}
 800b396:	1149      	asrs	r1, r1, #5
 800b398:	6914      	ldr	r4, [r2, #16]
 800b39a:	3101      	adds	r1, #1
 800b39c:	f102 0314 	add.w	r3, r2, #20
 800b3a0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b3a4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b3a8:	1f05      	subs	r5, r0, #4
 800b3aa:	42a3      	cmp	r3, r4
 800b3ac:	d30c      	bcc.n	800b3c8 <__copybits+0x36>
 800b3ae:	1aa3      	subs	r3, r4, r2
 800b3b0:	3b11      	subs	r3, #17
 800b3b2:	f023 0303 	bic.w	r3, r3, #3
 800b3b6:	3211      	adds	r2, #17
 800b3b8:	42a2      	cmp	r2, r4
 800b3ba:	bf88      	it	hi
 800b3bc:	2300      	movhi	r3, #0
 800b3be:	4418      	add	r0, r3
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	4288      	cmp	r0, r1
 800b3c4:	d305      	bcc.n	800b3d2 <__copybits+0x40>
 800b3c6:	bd70      	pop	{r4, r5, r6, pc}
 800b3c8:	f853 6b04 	ldr.w	r6, [r3], #4
 800b3cc:	f845 6f04 	str.w	r6, [r5, #4]!
 800b3d0:	e7eb      	b.n	800b3aa <__copybits+0x18>
 800b3d2:	f840 3b04 	str.w	r3, [r0], #4
 800b3d6:	e7f4      	b.n	800b3c2 <__copybits+0x30>

0800b3d8 <__any_on>:
 800b3d8:	f100 0214 	add.w	r2, r0, #20
 800b3dc:	6900      	ldr	r0, [r0, #16]
 800b3de:	114b      	asrs	r3, r1, #5
 800b3e0:	4298      	cmp	r0, r3
 800b3e2:	b510      	push	{r4, lr}
 800b3e4:	db11      	blt.n	800b40a <__any_on+0x32>
 800b3e6:	dd0a      	ble.n	800b3fe <__any_on+0x26>
 800b3e8:	f011 011f 	ands.w	r1, r1, #31
 800b3ec:	d007      	beq.n	800b3fe <__any_on+0x26>
 800b3ee:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b3f2:	fa24 f001 	lsr.w	r0, r4, r1
 800b3f6:	fa00 f101 	lsl.w	r1, r0, r1
 800b3fa:	428c      	cmp	r4, r1
 800b3fc:	d10b      	bne.n	800b416 <__any_on+0x3e>
 800b3fe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b402:	4293      	cmp	r3, r2
 800b404:	d803      	bhi.n	800b40e <__any_on+0x36>
 800b406:	2000      	movs	r0, #0
 800b408:	bd10      	pop	{r4, pc}
 800b40a:	4603      	mov	r3, r0
 800b40c:	e7f7      	b.n	800b3fe <__any_on+0x26>
 800b40e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b412:	2900      	cmp	r1, #0
 800b414:	d0f5      	beq.n	800b402 <__any_on+0x2a>
 800b416:	2001      	movs	r0, #1
 800b418:	e7f6      	b.n	800b408 <__any_on+0x30>

0800b41a <sulp>:
 800b41a:	b570      	push	{r4, r5, r6, lr}
 800b41c:	4604      	mov	r4, r0
 800b41e:	460d      	mov	r5, r1
 800b420:	4616      	mov	r6, r2
 800b422:	ec45 4b10 	vmov	d0, r4, r5
 800b426:	f7ff febd 	bl	800b1a4 <__ulp>
 800b42a:	b17e      	cbz	r6, 800b44c <sulp+0x32>
 800b42c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b430:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b434:	2b00      	cmp	r3, #0
 800b436:	dd09      	ble.n	800b44c <sulp+0x32>
 800b438:	051b      	lsls	r3, r3, #20
 800b43a:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800b43e:	2000      	movs	r0, #0
 800b440:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800b444:	ec41 0b17 	vmov	d7, r0, r1
 800b448:	ee20 0b07 	vmul.f64	d0, d0, d7
 800b44c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b450 <_strtod_l>:
 800b450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b454:	ed2d 8b0a 	vpush	{d8-d12}
 800b458:	b097      	sub	sp, #92	@ 0x5c
 800b45a:	4688      	mov	r8, r1
 800b45c:	920e      	str	r2, [sp, #56]	@ 0x38
 800b45e:	2200      	movs	r2, #0
 800b460:	9212      	str	r2, [sp, #72]	@ 0x48
 800b462:	9005      	str	r0, [sp, #20]
 800b464:	f04f 0a00 	mov.w	sl, #0
 800b468:	f04f 0b00 	mov.w	fp, #0
 800b46c:	460a      	mov	r2, r1
 800b46e:	9211      	str	r2, [sp, #68]	@ 0x44
 800b470:	7811      	ldrb	r1, [r2, #0]
 800b472:	292b      	cmp	r1, #43	@ 0x2b
 800b474:	d04c      	beq.n	800b510 <_strtod_l+0xc0>
 800b476:	d839      	bhi.n	800b4ec <_strtod_l+0x9c>
 800b478:	290d      	cmp	r1, #13
 800b47a:	d833      	bhi.n	800b4e4 <_strtod_l+0x94>
 800b47c:	2908      	cmp	r1, #8
 800b47e:	d833      	bhi.n	800b4e8 <_strtod_l+0x98>
 800b480:	2900      	cmp	r1, #0
 800b482:	d03c      	beq.n	800b4fe <_strtod_l+0xae>
 800b484:	2200      	movs	r2, #0
 800b486:	9208      	str	r2, [sp, #32]
 800b488:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800b48a:	782a      	ldrb	r2, [r5, #0]
 800b48c:	2a30      	cmp	r2, #48	@ 0x30
 800b48e:	f040 80b5 	bne.w	800b5fc <_strtod_l+0x1ac>
 800b492:	786a      	ldrb	r2, [r5, #1]
 800b494:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b498:	2a58      	cmp	r2, #88	@ 0x58
 800b49a:	d170      	bne.n	800b57e <_strtod_l+0x12e>
 800b49c:	9302      	str	r3, [sp, #8]
 800b49e:	9b08      	ldr	r3, [sp, #32]
 800b4a0:	9301      	str	r3, [sp, #4]
 800b4a2:	ab12      	add	r3, sp, #72	@ 0x48
 800b4a4:	9300      	str	r3, [sp, #0]
 800b4a6:	4a8b      	ldr	r2, [pc, #556]	@ (800b6d4 <_strtod_l+0x284>)
 800b4a8:	9805      	ldr	r0, [sp, #20]
 800b4aa:	ab13      	add	r3, sp, #76	@ 0x4c
 800b4ac:	a911      	add	r1, sp, #68	@ 0x44
 800b4ae:	f001 f8d9 	bl	800c664 <__gethex>
 800b4b2:	f010 060f 	ands.w	r6, r0, #15
 800b4b6:	4604      	mov	r4, r0
 800b4b8:	d005      	beq.n	800b4c6 <_strtod_l+0x76>
 800b4ba:	2e06      	cmp	r6, #6
 800b4bc:	d12a      	bne.n	800b514 <_strtod_l+0xc4>
 800b4be:	3501      	adds	r5, #1
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	9511      	str	r5, [sp, #68]	@ 0x44
 800b4c4:	9308      	str	r3, [sp, #32]
 800b4c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	f040 852f 	bne.w	800bf2c <_strtod_l+0xadc>
 800b4ce:	9b08      	ldr	r3, [sp, #32]
 800b4d0:	ec4b ab10 	vmov	d0, sl, fp
 800b4d4:	b1cb      	cbz	r3, 800b50a <_strtod_l+0xba>
 800b4d6:	eeb1 0b40 	vneg.f64	d0, d0
 800b4da:	b017      	add	sp, #92	@ 0x5c
 800b4dc:	ecbd 8b0a 	vpop	{d8-d12}
 800b4e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4e4:	2920      	cmp	r1, #32
 800b4e6:	d1cd      	bne.n	800b484 <_strtod_l+0x34>
 800b4e8:	3201      	adds	r2, #1
 800b4ea:	e7c0      	b.n	800b46e <_strtod_l+0x1e>
 800b4ec:	292d      	cmp	r1, #45	@ 0x2d
 800b4ee:	d1c9      	bne.n	800b484 <_strtod_l+0x34>
 800b4f0:	2101      	movs	r1, #1
 800b4f2:	9108      	str	r1, [sp, #32]
 800b4f4:	1c51      	adds	r1, r2, #1
 800b4f6:	9111      	str	r1, [sp, #68]	@ 0x44
 800b4f8:	7852      	ldrb	r2, [r2, #1]
 800b4fa:	2a00      	cmp	r2, #0
 800b4fc:	d1c4      	bne.n	800b488 <_strtod_l+0x38>
 800b4fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b500:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800b504:	2b00      	cmp	r3, #0
 800b506:	f040 850f 	bne.w	800bf28 <_strtod_l+0xad8>
 800b50a:	ec4b ab10 	vmov	d0, sl, fp
 800b50e:	e7e4      	b.n	800b4da <_strtod_l+0x8a>
 800b510:	2100      	movs	r1, #0
 800b512:	e7ee      	b.n	800b4f2 <_strtod_l+0xa2>
 800b514:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b516:	b13a      	cbz	r2, 800b528 <_strtod_l+0xd8>
 800b518:	2135      	movs	r1, #53	@ 0x35
 800b51a:	a814      	add	r0, sp, #80	@ 0x50
 800b51c:	f7ff ff39 	bl	800b392 <__copybits>
 800b520:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800b522:	9805      	ldr	r0, [sp, #20]
 800b524:	f7ff fb0a 	bl	800ab3c <_Bfree>
 800b528:	1e73      	subs	r3, r6, #1
 800b52a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b52c:	2b04      	cmp	r3, #4
 800b52e:	d806      	bhi.n	800b53e <_strtod_l+0xee>
 800b530:	e8df f003 	tbb	[pc, r3]
 800b534:	201d0314 	.word	0x201d0314
 800b538:	14          	.byte	0x14
 800b539:	00          	.byte	0x00
 800b53a:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 800b53e:	05e3      	lsls	r3, r4, #23
 800b540:	bf48      	it	mi
 800b542:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800b546:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b54a:	0d1b      	lsrs	r3, r3, #20
 800b54c:	051b      	lsls	r3, r3, #20
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d1b9      	bne.n	800b4c6 <_strtod_l+0x76>
 800b552:	f7fe fba1 	bl	8009c98 <__errno>
 800b556:	2322      	movs	r3, #34	@ 0x22
 800b558:	6003      	str	r3, [r0, #0]
 800b55a:	e7b4      	b.n	800b4c6 <_strtod_l+0x76>
 800b55c:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 800b560:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b564:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800b568:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b56c:	e7e7      	b.n	800b53e <_strtod_l+0xee>
 800b56e:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 800b6dc <_strtod_l+0x28c>
 800b572:	e7e4      	b.n	800b53e <_strtod_l+0xee>
 800b574:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800b578:	f04f 3aff 	mov.w	sl, #4294967295
 800b57c:	e7df      	b.n	800b53e <_strtod_l+0xee>
 800b57e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b580:	1c5a      	adds	r2, r3, #1
 800b582:	9211      	str	r2, [sp, #68]	@ 0x44
 800b584:	785b      	ldrb	r3, [r3, #1]
 800b586:	2b30      	cmp	r3, #48	@ 0x30
 800b588:	d0f9      	beq.n	800b57e <_strtod_l+0x12e>
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d09b      	beq.n	800b4c6 <_strtod_l+0x76>
 800b58e:	2301      	movs	r3, #1
 800b590:	2600      	movs	r6, #0
 800b592:	9307      	str	r3, [sp, #28]
 800b594:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b596:	930a      	str	r3, [sp, #40]	@ 0x28
 800b598:	46b1      	mov	r9, r6
 800b59a:	4635      	mov	r5, r6
 800b59c:	220a      	movs	r2, #10
 800b59e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800b5a0:	7804      	ldrb	r4, [r0, #0]
 800b5a2:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 800b5a6:	b2d9      	uxtb	r1, r3
 800b5a8:	2909      	cmp	r1, #9
 800b5aa:	d929      	bls.n	800b600 <_strtod_l+0x1b0>
 800b5ac:	494a      	ldr	r1, [pc, #296]	@ (800b6d8 <_strtod_l+0x288>)
 800b5ae:	2201      	movs	r2, #1
 800b5b0:	f000 ff84 	bl	800c4bc <strncmp>
 800b5b4:	b378      	cbz	r0, 800b616 <_strtod_l+0x1c6>
 800b5b6:	2000      	movs	r0, #0
 800b5b8:	4622      	mov	r2, r4
 800b5ba:	462b      	mov	r3, r5
 800b5bc:	4607      	mov	r7, r0
 800b5be:	9006      	str	r0, [sp, #24]
 800b5c0:	2a65      	cmp	r2, #101	@ 0x65
 800b5c2:	d001      	beq.n	800b5c8 <_strtod_l+0x178>
 800b5c4:	2a45      	cmp	r2, #69	@ 0x45
 800b5c6:	d117      	bne.n	800b5f8 <_strtod_l+0x1a8>
 800b5c8:	b91b      	cbnz	r3, 800b5d2 <_strtod_l+0x182>
 800b5ca:	9b07      	ldr	r3, [sp, #28]
 800b5cc:	4303      	orrs	r3, r0
 800b5ce:	d096      	beq.n	800b4fe <_strtod_l+0xae>
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 800b5d6:	f108 0201 	add.w	r2, r8, #1
 800b5da:	9211      	str	r2, [sp, #68]	@ 0x44
 800b5dc:	f898 2001 	ldrb.w	r2, [r8, #1]
 800b5e0:	2a2b      	cmp	r2, #43	@ 0x2b
 800b5e2:	d06b      	beq.n	800b6bc <_strtod_l+0x26c>
 800b5e4:	2a2d      	cmp	r2, #45	@ 0x2d
 800b5e6:	d071      	beq.n	800b6cc <_strtod_l+0x27c>
 800b5e8:	f04f 0e00 	mov.w	lr, #0
 800b5ec:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800b5f0:	2c09      	cmp	r4, #9
 800b5f2:	d979      	bls.n	800b6e8 <_strtod_l+0x298>
 800b5f4:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800b5f8:	2400      	movs	r4, #0
 800b5fa:	e094      	b.n	800b726 <_strtod_l+0x2d6>
 800b5fc:	2300      	movs	r3, #0
 800b5fe:	e7c7      	b.n	800b590 <_strtod_l+0x140>
 800b600:	2d08      	cmp	r5, #8
 800b602:	f100 0001 	add.w	r0, r0, #1
 800b606:	bfd4      	ite	le
 800b608:	fb02 3909 	mlale	r9, r2, r9, r3
 800b60c:	fb02 3606 	mlagt	r6, r2, r6, r3
 800b610:	3501      	adds	r5, #1
 800b612:	9011      	str	r0, [sp, #68]	@ 0x44
 800b614:	e7c3      	b.n	800b59e <_strtod_l+0x14e>
 800b616:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b618:	1c5a      	adds	r2, r3, #1
 800b61a:	9211      	str	r2, [sp, #68]	@ 0x44
 800b61c:	785a      	ldrb	r2, [r3, #1]
 800b61e:	b375      	cbz	r5, 800b67e <_strtod_l+0x22e>
 800b620:	4607      	mov	r7, r0
 800b622:	462b      	mov	r3, r5
 800b624:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800b628:	2909      	cmp	r1, #9
 800b62a:	d913      	bls.n	800b654 <_strtod_l+0x204>
 800b62c:	2101      	movs	r1, #1
 800b62e:	9106      	str	r1, [sp, #24]
 800b630:	e7c6      	b.n	800b5c0 <_strtod_l+0x170>
 800b632:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b634:	1c5a      	adds	r2, r3, #1
 800b636:	9211      	str	r2, [sp, #68]	@ 0x44
 800b638:	785a      	ldrb	r2, [r3, #1]
 800b63a:	3001      	adds	r0, #1
 800b63c:	2a30      	cmp	r2, #48	@ 0x30
 800b63e:	d0f8      	beq.n	800b632 <_strtod_l+0x1e2>
 800b640:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800b644:	2b08      	cmp	r3, #8
 800b646:	f200 8476 	bhi.w	800bf36 <_strtod_l+0xae6>
 800b64a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b64c:	930a      	str	r3, [sp, #40]	@ 0x28
 800b64e:	4607      	mov	r7, r0
 800b650:	2000      	movs	r0, #0
 800b652:	4603      	mov	r3, r0
 800b654:	3a30      	subs	r2, #48	@ 0x30
 800b656:	f100 0101 	add.w	r1, r0, #1
 800b65a:	d023      	beq.n	800b6a4 <_strtod_l+0x254>
 800b65c:	440f      	add	r7, r1
 800b65e:	eb00 0c03 	add.w	ip, r0, r3
 800b662:	4619      	mov	r1, r3
 800b664:	240a      	movs	r4, #10
 800b666:	4561      	cmp	r1, ip
 800b668:	d10b      	bne.n	800b682 <_strtod_l+0x232>
 800b66a:	1c5c      	adds	r4, r3, #1
 800b66c:	4403      	add	r3, r0
 800b66e:	2b08      	cmp	r3, #8
 800b670:	4404      	add	r4, r0
 800b672:	dc11      	bgt.n	800b698 <_strtod_l+0x248>
 800b674:	230a      	movs	r3, #10
 800b676:	fb03 2909 	mla	r9, r3, r9, r2
 800b67a:	2100      	movs	r1, #0
 800b67c:	e013      	b.n	800b6a6 <_strtod_l+0x256>
 800b67e:	4628      	mov	r0, r5
 800b680:	e7dc      	b.n	800b63c <_strtod_l+0x1ec>
 800b682:	2908      	cmp	r1, #8
 800b684:	f101 0101 	add.w	r1, r1, #1
 800b688:	dc02      	bgt.n	800b690 <_strtod_l+0x240>
 800b68a:	fb04 f909 	mul.w	r9, r4, r9
 800b68e:	e7ea      	b.n	800b666 <_strtod_l+0x216>
 800b690:	2910      	cmp	r1, #16
 800b692:	bfd8      	it	le
 800b694:	4366      	mulle	r6, r4
 800b696:	e7e6      	b.n	800b666 <_strtod_l+0x216>
 800b698:	2b0f      	cmp	r3, #15
 800b69a:	dcee      	bgt.n	800b67a <_strtod_l+0x22a>
 800b69c:	230a      	movs	r3, #10
 800b69e:	fb03 2606 	mla	r6, r3, r6, r2
 800b6a2:	e7ea      	b.n	800b67a <_strtod_l+0x22a>
 800b6a4:	461c      	mov	r4, r3
 800b6a6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b6a8:	1c5a      	adds	r2, r3, #1
 800b6aa:	9211      	str	r2, [sp, #68]	@ 0x44
 800b6ac:	785a      	ldrb	r2, [r3, #1]
 800b6ae:	4608      	mov	r0, r1
 800b6b0:	4623      	mov	r3, r4
 800b6b2:	e7b7      	b.n	800b624 <_strtod_l+0x1d4>
 800b6b4:	2301      	movs	r3, #1
 800b6b6:	2700      	movs	r7, #0
 800b6b8:	9306      	str	r3, [sp, #24]
 800b6ba:	e786      	b.n	800b5ca <_strtod_l+0x17a>
 800b6bc:	f04f 0e00 	mov.w	lr, #0
 800b6c0:	f108 0202 	add.w	r2, r8, #2
 800b6c4:	9211      	str	r2, [sp, #68]	@ 0x44
 800b6c6:	f898 2002 	ldrb.w	r2, [r8, #2]
 800b6ca:	e78f      	b.n	800b5ec <_strtod_l+0x19c>
 800b6cc:	f04f 0e01 	mov.w	lr, #1
 800b6d0:	e7f6      	b.n	800b6c0 <_strtod_l+0x270>
 800b6d2:	bf00      	nop
 800b6d4:	0800d6a0 	.word	0x0800d6a0
 800b6d8:	0800d688 	.word	0x0800d688
 800b6dc:	7ff00000 	.word	0x7ff00000
 800b6e0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b6e2:	1c54      	adds	r4, r2, #1
 800b6e4:	9411      	str	r4, [sp, #68]	@ 0x44
 800b6e6:	7852      	ldrb	r2, [r2, #1]
 800b6e8:	2a30      	cmp	r2, #48	@ 0x30
 800b6ea:	d0f9      	beq.n	800b6e0 <_strtod_l+0x290>
 800b6ec:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 800b6f0:	2c08      	cmp	r4, #8
 800b6f2:	d881      	bhi.n	800b5f8 <_strtod_l+0x1a8>
 800b6f4:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 800b6f8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b6fa:	9209      	str	r2, [sp, #36]	@ 0x24
 800b6fc:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b6fe:	1c51      	adds	r1, r2, #1
 800b700:	9111      	str	r1, [sp, #68]	@ 0x44
 800b702:	7852      	ldrb	r2, [r2, #1]
 800b704:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800b708:	2c09      	cmp	r4, #9
 800b70a:	d938      	bls.n	800b77e <_strtod_l+0x32e>
 800b70c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800b70e:	1b0c      	subs	r4, r1, r4
 800b710:	2c08      	cmp	r4, #8
 800b712:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 800b716:	dc02      	bgt.n	800b71e <_strtod_l+0x2ce>
 800b718:	4564      	cmp	r4, ip
 800b71a:	bfa8      	it	ge
 800b71c:	4664      	movge	r4, ip
 800b71e:	f1be 0f00 	cmp.w	lr, #0
 800b722:	d000      	beq.n	800b726 <_strtod_l+0x2d6>
 800b724:	4264      	negs	r4, r4
 800b726:	2b00      	cmp	r3, #0
 800b728:	d14e      	bne.n	800b7c8 <_strtod_l+0x378>
 800b72a:	9b07      	ldr	r3, [sp, #28]
 800b72c:	4318      	orrs	r0, r3
 800b72e:	f47f aeca 	bne.w	800b4c6 <_strtod_l+0x76>
 800b732:	9b06      	ldr	r3, [sp, #24]
 800b734:	2b00      	cmp	r3, #0
 800b736:	f47f aee2 	bne.w	800b4fe <_strtod_l+0xae>
 800b73a:	2a69      	cmp	r2, #105	@ 0x69
 800b73c:	d027      	beq.n	800b78e <_strtod_l+0x33e>
 800b73e:	dc24      	bgt.n	800b78a <_strtod_l+0x33a>
 800b740:	2a49      	cmp	r2, #73	@ 0x49
 800b742:	d024      	beq.n	800b78e <_strtod_l+0x33e>
 800b744:	2a4e      	cmp	r2, #78	@ 0x4e
 800b746:	f47f aeda 	bne.w	800b4fe <_strtod_l+0xae>
 800b74a:	4997      	ldr	r1, [pc, #604]	@ (800b9a8 <_strtod_l+0x558>)
 800b74c:	a811      	add	r0, sp, #68	@ 0x44
 800b74e:	f001 f9ab 	bl	800caa8 <__match>
 800b752:	2800      	cmp	r0, #0
 800b754:	f43f aed3 	beq.w	800b4fe <_strtod_l+0xae>
 800b758:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b75a:	781b      	ldrb	r3, [r3, #0]
 800b75c:	2b28      	cmp	r3, #40	@ 0x28
 800b75e:	d12d      	bne.n	800b7bc <_strtod_l+0x36c>
 800b760:	4992      	ldr	r1, [pc, #584]	@ (800b9ac <_strtod_l+0x55c>)
 800b762:	aa14      	add	r2, sp, #80	@ 0x50
 800b764:	a811      	add	r0, sp, #68	@ 0x44
 800b766:	f001 f9b3 	bl	800cad0 <__hexnan>
 800b76a:	2805      	cmp	r0, #5
 800b76c:	d126      	bne.n	800b7bc <_strtod_l+0x36c>
 800b76e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800b770:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 800b774:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800b778:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800b77c:	e6a3      	b.n	800b4c6 <_strtod_l+0x76>
 800b77e:	240a      	movs	r4, #10
 800b780:	fb04 2c0c 	mla	ip, r4, ip, r2
 800b784:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 800b788:	e7b8      	b.n	800b6fc <_strtod_l+0x2ac>
 800b78a:	2a6e      	cmp	r2, #110	@ 0x6e
 800b78c:	e7db      	b.n	800b746 <_strtod_l+0x2f6>
 800b78e:	4988      	ldr	r1, [pc, #544]	@ (800b9b0 <_strtod_l+0x560>)
 800b790:	a811      	add	r0, sp, #68	@ 0x44
 800b792:	f001 f989 	bl	800caa8 <__match>
 800b796:	2800      	cmp	r0, #0
 800b798:	f43f aeb1 	beq.w	800b4fe <_strtod_l+0xae>
 800b79c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b79e:	4985      	ldr	r1, [pc, #532]	@ (800b9b4 <_strtod_l+0x564>)
 800b7a0:	3b01      	subs	r3, #1
 800b7a2:	a811      	add	r0, sp, #68	@ 0x44
 800b7a4:	9311      	str	r3, [sp, #68]	@ 0x44
 800b7a6:	f001 f97f 	bl	800caa8 <__match>
 800b7aa:	b910      	cbnz	r0, 800b7b2 <_strtod_l+0x362>
 800b7ac:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b7ae:	3301      	adds	r3, #1
 800b7b0:	9311      	str	r3, [sp, #68]	@ 0x44
 800b7b2:	f8df b214 	ldr.w	fp, [pc, #532]	@ 800b9c8 <_strtod_l+0x578>
 800b7b6:	f04f 0a00 	mov.w	sl, #0
 800b7ba:	e684      	b.n	800b4c6 <_strtod_l+0x76>
 800b7bc:	487e      	ldr	r0, [pc, #504]	@ (800b9b8 <_strtod_l+0x568>)
 800b7be:	f000 feaf 	bl	800c520 <nan>
 800b7c2:	ec5b ab10 	vmov	sl, fp, d0
 800b7c6:	e67e      	b.n	800b4c6 <_strtod_l+0x76>
 800b7c8:	ee07 9a90 	vmov	s15, r9
 800b7cc:	1be2      	subs	r2, r4, r7
 800b7ce:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800b7d2:	2d00      	cmp	r5, #0
 800b7d4:	bf08      	it	eq
 800b7d6:	461d      	moveq	r5, r3
 800b7d8:	2b10      	cmp	r3, #16
 800b7da:	9209      	str	r2, [sp, #36]	@ 0x24
 800b7dc:	461a      	mov	r2, r3
 800b7de:	bfa8      	it	ge
 800b7e0:	2210      	movge	r2, #16
 800b7e2:	2b09      	cmp	r3, #9
 800b7e4:	ec5b ab17 	vmov	sl, fp, d7
 800b7e8:	dc15      	bgt.n	800b816 <_strtod_l+0x3c6>
 800b7ea:	1be1      	subs	r1, r4, r7
 800b7ec:	2900      	cmp	r1, #0
 800b7ee:	f43f ae6a 	beq.w	800b4c6 <_strtod_l+0x76>
 800b7f2:	eba4 0107 	sub.w	r1, r4, r7
 800b7f6:	dd72      	ble.n	800b8de <_strtod_l+0x48e>
 800b7f8:	2916      	cmp	r1, #22
 800b7fa:	dc59      	bgt.n	800b8b0 <_strtod_l+0x460>
 800b7fc:	4b6f      	ldr	r3, [pc, #444]	@ (800b9bc <_strtod_l+0x56c>)
 800b7fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b800:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b804:	ed93 7b00 	vldr	d7, [r3]
 800b808:	ec4b ab16 	vmov	d6, sl, fp
 800b80c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b810:	ec5b ab17 	vmov	sl, fp, d7
 800b814:	e657      	b.n	800b4c6 <_strtod_l+0x76>
 800b816:	4969      	ldr	r1, [pc, #420]	@ (800b9bc <_strtod_l+0x56c>)
 800b818:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800b81c:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 800b820:	ee06 6a90 	vmov	s13, r6
 800b824:	2b0f      	cmp	r3, #15
 800b826:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800b82a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800b82e:	ec5b ab16 	vmov	sl, fp, d6
 800b832:	ddda      	ble.n	800b7ea <_strtod_l+0x39a>
 800b834:	1a9a      	subs	r2, r3, r2
 800b836:	1be1      	subs	r1, r4, r7
 800b838:	440a      	add	r2, r1
 800b83a:	2a00      	cmp	r2, #0
 800b83c:	f340 8094 	ble.w	800b968 <_strtod_l+0x518>
 800b840:	f012 000f 	ands.w	r0, r2, #15
 800b844:	d00a      	beq.n	800b85c <_strtod_l+0x40c>
 800b846:	495d      	ldr	r1, [pc, #372]	@ (800b9bc <_strtod_l+0x56c>)
 800b848:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800b84c:	ed91 7b00 	vldr	d7, [r1]
 800b850:	ec4b ab16 	vmov	d6, sl, fp
 800b854:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b858:	ec5b ab17 	vmov	sl, fp, d7
 800b85c:	f032 020f 	bics.w	r2, r2, #15
 800b860:	d073      	beq.n	800b94a <_strtod_l+0x4fa>
 800b862:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 800b866:	dd47      	ble.n	800b8f8 <_strtod_l+0x4a8>
 800b868:	2400      	movs	r4, #0
 800b86a:	4625      	mov	r5, r4
 800b86c:	9407      	str	r4, [sp, #28]
 800b86e:	4626      	mov	r6, r4
 800b870:	9a05      	ldr	r2, [sp, #20]
 800b872:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800b9c8 <_strtod_l+0x578>
 800b876:	2322      	movs	r3, #34	@ 0x22
 800b878:	6013      	str	r3, [r2, #0]
 800b87a:	f04f 0a00 	mov.w	sl, #0
 800b87e:	9b07      	ldr	r3, [sp, #28]
 800b880:	2b00      	cmp	r3, #0
 800b882:	f43f ae20 	beq.w	800b4c6 <_strtod_l+0x76>
 800b886:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800b888:	9805      	ldr	r0, [sp, #20]
 800b88a:	f7ff f957 	bl	800ab3c <_Bfree>
 800b88e:	9805      	ldr	r0, [sp, #20]
 800b890:	4631      	mov	r1, r6
 800b892:	f7ff f953 	bl	800ab3c <_Bfree>
 800b896:	9805      	ldr	r0, [sp, #20]
 800b898:	4629      	mov	r1, r5
 800b89a:	f7ff f94f 	bl	800ab3c <_Bfree>
 800b89e:	9907      	ldr	r1, [sp, #28]
 800b8a0:	9805      	ldr	r0, [sp, #20]
 800b8a2:	f7ff f94b 	bl	800ab3c <_Bfree>
 800b8a6:	9805      	ldr	r0, [sp, #20]
 800b8a8:	4621      	mov	r1, r4
 800b8aa:	f7ff f947 	bl	800ab3c <_Bfree>
 800b8ae:	e60a      	b.n	800b4c6 <_strtod_l+0x76>
 800b8b0:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 800b8b4:	1be0      	subs	r0, r4, r7
 800b8b6:	4281      	cmp	r1, r0
 800b8b8:	dbbc      	blt.n	800b834 <_strtod_l+0x3e4>
 800b8ba:	4a40      	ldr	r2, [pc, #256]	@ (800b9bc <_strtod_l+0x56c>)
 800b8bc:	f1c3 030f 	rsb	r3, r3, #15
 800b8c0:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800b8c4:	ed91 7b00 	vldr	d7, [r1]
 800b8c8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b8ca:	ec4b ab16 	vmov	d6, sl, fp
 800b8ce:	1acb      	subs	r3, r1, r3
 800b8d0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800b8d4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b8d8:	ed92 6b00 	vldr	d6, [r2]
 800b8dc:	e796      	b.n	800b80c <_strtod_l+0x3bc>
 800b8de:	3116      	adds	r1, #22
 800b8e0:	dba8      	blt.n	800b834 <_strtod_l+0x3e4>
 800b8e2:	4b36      	ldr	r3, [pc, #216]	@ (800b9bc <_strtod_l+0x56c>)
 800b8e4:	1b3c      	subs	r4, r7, r4
 800b8e6:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800b8ea:	ed94 7b00 	vldr	d7, [r4]
 800b8ee:	ec4b ab16 	vmov	d6, sl, fp
 800b8f2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800b8f6:	e78b      	b.n	800b810 <_strtod_l+0x3c0>
 800b8f8:	2000      	movs	r0, #0
 800b8fa:	ec4b ab17 	vmov	d7, sl, fp
 800b8fe:	4e30      	ldr	r6, [pc, #192]	@ (800b9c0 <_strtod_l+0x570>)
 800b900:	1112      	asrs	r2, r2, #4
 800b902:	4601      	mov	r1, r0
 800b904:	2a01      	cmp	r2, #1
 800b906:	dc23      	bgt.n	800b950 <_strtod_l+0x500>
 800b908:	b108      	cbz	r0, 800b90e <_strtod_l+0x4be>
 800b90a:	ec5b ab17 	vmov	sl, fp, d7
 800b90e:	4a2c      	ldr	r2, [pc, #176]	@ (800b9c0 <_strtod_l+0x570>)
 800b910:	482c      	ldr	r0, [pc, #176]	@ (800b9c4 <_strtod_l+0x574>)
 800b912:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800b916:	ed92 7b00 	vldr	d7, [r2]
 800b91a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800b91e:	ec4b ab16 	vmov	d6, sl, fp
 800b922:	4a29      	ldr	r2, [pc, #164]	@ (800b9c8 <_strtod_l+0x578>)
 800b924:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b928:	ee17 1a90 	vmov	r1, s15
 800b92c:	400a      	ands	r2, r1
 800b92e:	4282      	cmp	r2, r0
 800b930:	ec5b ab17 	vmov	sl, fp, d7
 800b934:	d898      	bhi.n	800b868 <_strtod_l+0x418>
 800b936:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 800b93a:	4282      	cmp	r2, r0
 800b93c:	bf86      	itte	hi
 800b93e:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800b9cc <_strtod_l+0x57c>
 800b942:	f04f 3aff 	movhi.w	sl, #4294967295
 800b946:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 800b94a:	2200      	movs	r2, #0
 800b94c:	9206      	str	r2, [sp, #24]
 800b94e:	e076      	b.n	800ba3e <_strtod_l+0x5ee>
 800b950:	f012 0f01 	tst.w	r2, #1
 800b954:	d004      	beq.n	800b960 <_strtod_l+0x510>
 800b956:	ed96 6b00 	vldr	d6, [r6]
 800b95a:	2001      	movs	r0, #1
 800b95c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b960:	3101      	adds	r1, #1
 800b962:	1052      	asrs	r2, r2, #1
 800b964:	3608      	adds	r6, #8
 800b966:	e7cd      	b.n	800b904 <_strtod_l+0x4b4>
 800b968:	d0ef      	beq.n	800b94a <_strtod_l+0x4fa>
 800b96a:	4252      	negs	r2, r2
 800b96c:	f012 000f 	ands.w	r0, r2, #15
 800b970:	d00a      	beq.n	800b988 <_strtod_l+0x538>
 800b972:	4912      	ldr	r1, [pc, #72]	@ (800b9bc <_strtod_l+0x56c>)
 800b974:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800b978:	ed91 7b00 	vldr	d7, [r1]
 800b97c:	ec4b ab16 	vmov	d6, sl, fp
 800b980:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800b984:	ec5b ab17 	vmov	sl, fp, d7
 800b988:	1112      	asrs	r2, r2, #4
 800b98a:	d0de      	beq.n	800b94a <_strtod_l+0x4fa>
 800b98c:	2a1f      	cmp	r2, #31
 800b98e:	dd1f      	ble.n	800b9d0 <_strtod_l+0x580>
 800b990:	2400      	movs	r4, #0
 800b992:	4625      	mov	r5, r4
 800b994:	9407      	str	r4, [sp, #28]
 800b996:	4626      	mov	r6, r4
 800b998:	9a05      	ldr	r2, [sp, #20]
 800b99a:	2322      	movs	r3, #34	@ 0x22
 800b99c:	f04f 0a00 	mov.w	sl, #0
 800b9a0:	f04f 0b00 	mov.w	fp, #0
 800b9a4:	6013      	str	r3, [r2, #0]
 800b9a6:	e76a      	b.n	800b87e <_strtod_l+0x42e>
 800b9a8:	0800d479 	.word	0x0800d479
 800b9ac:	0800d68c 	.word	0x0800d68c
 800b9b0:	0800d471 	.word	0x0800d471
 800b9b4:	0800d4a8 	.word	0x0800d4a8
 800b9b8:	0800d835 	.word	0x0800d835
 800b9bc:	0800d5c0 	.word	0x0800d5c0
 800b9c0:	0800d598 	.word	0x0800d598
 800b9c4:	7ca00000 	.word	0x7ca00000
 800b9c8:	7ff00000 	.word	0x7ff00000
 800b9cc:	7fefffff 	.word	0x7fefffff
 800b9d0:	f012 0110 	ands.w	r1, r2, #16
 800b9d4:	bf18      	it	ne
 800b9d6:	216a      	movne	r1, #106	@ 0x6a
 800b9d8:	9106      	str	r1, [sp, #24]
 800b9da:	ec4b ab17 	vmov	d7, sl, fp
 800b9de:	49b0      	ldr	r1, [pc, #704]	@ (800bca0 <_strtod_l+0x850>)
 800b9e0:	2000      	movs	r0, #0
 800b9e2:	07d6      	lsls	r6, r2, #31
 800b9e4:	d504      	bpl.n	800b9f0 <_strtod_l+0x5a0>
 800b9e6:	ed91 6b00 	vldr	d6, [r1]
 800b9ea:	2001      	movs	r0, #1
 800b9ec:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b9f0:	1052      	asrs	r2, r2, #1
 800b9f2:	f101 0108 	add.w	r1, r1, #8
 800b9f6:	d1f4      	bne.n	800b9e2 <_strtod_l+0x592>
 800b9f8:	b108      	cbz	r0, 800b9fe <_strtod_l+0x5ae>
 800b9fa:	ec5b ab17 	vmov	sl, fp, d7
 800b9fe:	9a06      	ldr	r2, [sp, #24]
 800ba00:	b1b2      	cbz	r2, 800ba30 <_strtod_l+0x5e0>
 800ba02:	f3cb 510a 	ubfx	r1, fp, #20, #11
 800ba06:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 800ba0a:	2a00      	cmp	r2, #0
 800ba0c:	4658      	mov	r0, fp
 800ba0e:	dd0f      	ble.n	800ba30 <_strtod_l+0x5e0>
 800ba10:	2a1f      	cmp	r2, #31
 800ba12:	dd55      	ble.n	800bac0 <_strtod_l+0x670>
 800ba14:	2a34      	cmp	r2, #52	@ 0x34
 800ba16:	bfde      	ittt	le
 800ba18:	f04f 32ff 	movle.w	r2, #4294967295
 800ba1c:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 800ba20:	408a      	lslle	r2, r1
 800ba22:	f04f 0a00 	mov.w	sl, #0
 800ba26:	bfcc      	ite	gt
 800ba28:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800ba2c:	ea02 0b00 	andle.w	fp, r2, r0
 800ba30:	ec4b ab17 	vmov	d7, sl, fp
 800ba34:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ba38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba3c:	d0a8      	beq.n	800b990 <_strtod_l+0x540>
 800ba3e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ba40:	9805      	ldr	r0, [sp, #20]
 800ba42:	f8cd 9000 	str.w	r9, [sp]
 800ba46:	462a      	mov	r2, r5
 800ba48:	f7ff f8e0 	bl	800ac0c <__s2b>
 800ba4c:	9007      	str	r0, [sp, #28]
 800ba4e:	2800      	cmp	r0, #0
 800ba50:	f43f af0a 	beq.w	800b868 <_strtod_l+0x418>
 800ba54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba56:	1b3f      	subs	r7, r7, r4
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	bfb4      	ite	lt
 800ba5c:	463b      	movlt	r3, r7
 800ba5e:	2300      	movge	r3, #0
 800ba60:	930a      	str	r3, [sp, #40]	@ 0x28
 800ba62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba64:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 800bc90 <_strtod_l+0x840>
 800ba68:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ba6c:	2400      	movs	r4, #0
 800ba6e:	930d      	str	r3, [sp, #52]	@ 0x34
 800ba70:	4625      	mov	r5, r4
 800ba72:	9b07      	ldr	r3, [sp, #28]
 800ba74:	9805      	ldr	r0, [sp, #20]
 800ba76:	6859      	ldr	r1, [r3, #4]
 800ba78:	f7ff f820 	bl	800aabc <_Balloc>
 800ba7c:	4606      	mov	r6, r0
 800ba7e:	2800      	cmp	r0, #0
 800ba80:	f43f aef6 	beq.w	800b870 <_strtod_l+0x420>
 800ba84:	9b07      	ldr	r3, [sp, #28]
 800ba86:	691a      	ldr	r2, [r3, #16]
 800ba88:	ec4b ab19 	vmov	d9, sl, fp
 800ba8c:	3202      	adds	r2, #2
 800ba8e:	f103 010c 	add.w	r1, r3, #12
 800ba92:	0092      	lsls	r2, r2, #2
 800ba94:	300c      	adds	r0, #12
 800ba96:	f000 fd33 	bl	800c500 <memcpy>
 800ba9a:	eeb0 0b49 	vmov.f64	d0, d9
 800ba9e:	9805      	ldr	r0, [sp, #20]
 800baa0:	aa14      	add	r2, sp, #80	@ 0x50
 800baa2:	a913      	add	r1, sp, #76	@ 0x4c
 800baa4:	f7ff fbee 	bl	800b284 <__d2b>
 800baa8:	9012      	str	r0, [sp, #72]	@ 0x48
 800baaa:	2800      	cmp	r0, #0
 800baac:	f43f aee0 	beq.w	800b870 <_strtod_l+0x420>
 800bab0:	9805      	ldr	r0, [sp, #20]
 800bab2:	2101      	movs	r1, #1
 800bab4:	f7ff f940 	bl	800ad38 <__i2b>
 800bab8:	4605      	mov	r5, r0
 800baba:	b940      	cbnz	r0, 800bace <_strtod_l+0x67e>
 800babc:	2500      	movs	r5, #0
 800babe:	e6d7      	b.n	800b870 <_strtod_l+0x420>
 800bac0:	f04f 31ff 	mov.w	r1, #4294967295
 800bac4:	fa01 f202 	lsl.w	r2, r1, r2
 800bac8:	ea02 0a0a 	and.w	sl, r2, sl
 800bacc:	e7b0      	b.n	800ba30 <_strtod_l+0x5e0>
 800bace:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 800bad0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800bad2:	2f00      	cmp	r7, #0
 800bad4:	bfab      	itete	ge
 800bad6:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 800bad8:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 800bada:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 800bade:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 800bae2:	bfac      	ite	ge
 800bae4:	eb07 0903 	addge.w	r9, r7, r3
 800bae8:	eba3 0807 	sublt.w	r8, r3, r7
 800baec:	9b06      	ldr	r3, [sp, #24]
 800baee:	1aff      	subs	r7, r7, r3
 800baf0:	4417      	add	r7, r2
 800baf2:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 800baf6:	4a6b      	ldr	r2, [pc, #428]	@ (800bca4 <_strtod_l+0x854>)
 800baf8:	3f01      	subs	r7, #1
 800bafa:	4297      	cmp	r7, r2
 800bafc:	da51      	bge.n	800bba2 <_strtod_l+0x752>
 800bafe:	1bd1      	subs	r1, r2, r7
 800bb00:	291f      	cmp	r1, #31
 800bb02:	eba3 0301 	sub.w	r3, r3, r1
 800bb06:	f04f 0201 	mov.w	r2, #1
 800bb0a:	dc3e      	bgt.n	800bb8a <_strtod_l+0x73a>
 800bb0c:	408a      	lsls	r2, r1
 800bb0e:	920c      	str	r2, [sp, #48]	@ 0x30
 800bb10:	2200      	movs	r2, #0
 800bb12:	920b      	str	r2, [sp, #44]	@ 0x2c
 800bb14:	eb09 0703 	add.w	r7, r9, r3
 800bb18:	4498      	add	r8, r3
 800bb1a:	9b06      	ldr	r3, [sp, #24]
 800bb1c:	45b9      	cmp	r9, r7
 800bb1e:	4498      	add	r8, r3
 800bb20:	464b      	mov	r3, r9
 800bb22:	bfa8      	it	ge
 800bb24:	463b      	movge	r3, r7
 800bb26:	4543      	cmp	r3, r8
 800bb28:	bfa8      	it	ge
 800bb2a:	4643      	movge	r3, r8
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	bfc2      	ittt	gt
 800bb30:	1aff      	subgt	r7, r7, r3
 800bb32:	eba8 0803 	subgt.w	r8, r8, r3
 800bb36:	eba9 0903 	subgt.w	r9, r9, r3
 800bb3a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	dd16      	ble.n	800bb6e <_strtod_l+0x71e>
 800bb40:	4629      	mov	r1, r5
 800bb42:	9805      	ldr	r0, [sp, #20]
 800bb44:	461a      	mov	r2, r3
 800bb46:	f7ff f9b7 	bl	800aeb8 <__pow5mult>
 800bb4a:	4605      	mov	r5, r0
 800bb4c:	2800      	cmp	r0, #0
 800bb4e:	d0b5      	beq.n	800babc <_strtod_l+0x66c>
 800bb50:	4601      	mov	r1, r0
 800bb52:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800bb54:	9805      	ldr	r0, [sp, #20]
 800bb56:	f7ff f905 	bl	800ad64 <__multiply>
 800bb5a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800bb5c:	2800      	cmp	r0, #0
 800bb5e:	f43f ae87 	beq.w	800b870 <_strtod_l+0x420>
 800bb62:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800bb64:	9805      	ldr	r0, [sp, #20]
 800bb66:	f7fe ffe9 	bl	800ab3c <_Bfree>
 800bb6a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bb6c:	9312      	str	r3, [sp, #72]	@ 0x48
 800bb6e:	2f00      	cmp	r7, #0
 800bb70:	dc1b      	bgt.n	800bbaa <_strtod_l+0x75a>
 800bb72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	dd21      	ble.n	800bbbc <_strtod_l+0x76c>
 800bb78:	4631      	mov	r1, r6
 800bb7a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bb7c:	9805      	ldr	r0, [sp, #20]
 800bb7e:	f7ff f99b 	bl	800aeb8 <__pow5mult>
 800bb82:	4606      	mov	r6, r0
 800bb84:	b9d0      	cbnz	r0, 800bbbc <_strtod_l+0x76c>
 800bb86:	2600      	movs	r6, #0
 800bb88:	e672      	b.n	800b870 <_strtod_l+0x420>
 800bb8a:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 800bb8e:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 800bb92:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 800bb96:	37e2      	adds	r7, #226	@ 0xe2
 800bb98:	fa02 f107 	lsl.w	r1, r2, r7
 800bb9c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800bb9e:	920c      	str	r2, [sp, #48]	@ 0x30
 800bba0:	e7b8      	b.n	800bb14 <_strtod_l+0x6c4>
 800bba2:	2200      	movs	r2, #0
 800bba4:	920b      	str	r2, [sp, #44]	@ 0x2c
 800bba6:	2201      	movs	r2, #1
 800bba8:	e7f9      	b.n	800bb9e <_strtod_l+0x74e>
 800bbaa:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800bbac:	9805      	ldr	r0, [sp, #20]
 800bbae:	463a      	mov	r2, r7
 800bbb0:	f7ff f9dc 	bl	800af6c <__lshift>
 800bbb4:	9012      	str	r0, [sp, #72]	@ 0x48
 800bbb6:	2800      	cmp	r0, #0
 800bbb8:	d1db      	bne.n	800bb72 <_strtod_l+0x722>
 800bbba:	e659      	b.n	800b870 <_strtod_l+0x420>
 800bbbc:	f1b8 0f00 	cmp.w	r8, #0
 800bbc0:	dd07      	ble.n	800bbd2 <_strtod_l+0x782>
 800bbc2:	4631      	mov	r1, r6
 800bbc4:	9805      	ldr	r0, [sp, #20]
 800bbc6:	4642      	mov	r2, r8
 800bbc8:	f7ff f9d0 	bl	800af6c <__lshift>
 800bbcc:	4606      	mov	r6, r0
 800bbce:	2800      	cmp	r0, #0
 800bbd0:	d0d9      	beq.n	800bb86 <_strtod_l+0x736>
 800bbd2:	f1b9 0f00 	cmp.w	r9, #0
 800bbd6:	dd08      	ble.n	800bbea <_strtod_l+0x79a>
 800bbd8:	4629      	mov	r1, r5
 800bbda:	9805      	ldr	r0, [sp, #20]
 800bbdc:	464a      	mov	r2, r9
 800bbde:	f7ff f9c5 	bl	800af6c <__lshift>
 800bbe2:	4605      	mov	r5, r0
 800bbe4:	2800      	cmp	r0, #0
 800bbe6:	f43f ae43 	beq.w	800b870 <_strtod_l+0x420>
 800bbea:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800bbec:	9805      	ldr	r0, [sp, #20]
 800bbee:	4632      	mov	r2, r6
 800bbf0:	f7ff fa44 	bl	800b07c <__mdiff>
 800bbf4:	4604      	mov	r4, r0
 800bbf6:	2800      	cmp	r0, #0
 800bbf8:	f43f ae3a 	beq.w	800b870 <_strtod_l+0x420>
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800bc02:	60c3      	str	r3, [r0, #12]
 800bc04:	4629      	mov	r1, r5
 800bc06:	f7ff fa1d 	bl	800b044 <__mcmp>
 800bc0a:	2800      	cmp	r0, #0
 800bc0c:	da4e      	bge.n	800bcac <_strtod_l+0x85c>
 800bc0e:	ea58 080a 	orrs.w	r8, r8, sl
 800bc12:	d174      	bne.n	800bcfe <_strtod_l+0x8ae>
 800bc14:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d170      	bne.n	800bcfe <_strtod_l+0x8ae>
 800bc1c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bc20:	0d1b      	lsrs	r3, r3, #20
 800bc22:	051b      	lsls	r3, r3, #20
 800bc24:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800bc28:	d969      	bls.n	800bcfe <_strtod_l+0x8ae>
 800bc2a:	6963      	ldr	r3, [r4, #20]
 800bc2c:	b913      	cbnz	r3, 800bc34 <_strtod_l+0x7e4>
 800bc2e:	6923      	ldr	r3, [r4, #16]
 800bc30:	2b01      	cmp	r3, #1
 800bc32:	dd64      	ble.n	800bcfe <_strtod_l+0x8ae>
 800bc34:	4621      	mov	r1, r4
 800bc36:	2201      	movs	r2, #1
 800bc38:	9805      	ldr	r0, [sp, #20]
 800bc3a:	f7ff f997 	bl	800af6c <__lshift>
 800bc3e:	4629      	mov	r1, r5
 800bc40:	4604      	mov	r4, r0
 800bc42:	f7ff f9ff 	bl	800b044 <__mcmp>
 800bc46:	2800      	cmp	r0, #0
 800bc48:	dd59      	ble.n	800bcfe <_strtod_l+0x8ae>
 800bc4a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bc4e:	9a06      	ldr	r2, [sp, #24]
 800bc50:	0d1b      	lsrs	r3, r3, #20
 800bc52:	051b      	lsls	r3, r3, #20
 800bc54:	2a00      	cmp	r2, #0
 800bc56:	d070      	beq.n	800bd3a <_strtod_l+0x8ea>
 800bc58:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800bc5c:	d86d      	bhi.n	800bd3a <_strtod_l+0x8ea>
 800bc5e:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800bc62:	f67f ae99 	bls.w	800b998 <_strtod_l+0x548>
 800bc66:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 800bc98 <_strtod_l+0x848>
 800bc6a:	ec4b ab16 	vmov	d6, sl, fp
 800bc6e:	4b0e      	ldr	r3, [pc, #56]	@ (800bca8 <_strtod_l+0x858>)
 800bc70:	ee26 7b07 	vmul.f64	d7, d6, d7
 800bc74:	ee17 2a90 	vmov	r2, s15
 800bc78:	4013      	ands	r3, r2
 800bc7a:	ec5b ab17 	vmov	sl, fp, d7
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	f47f ae01 	bne.w	800b886 <_strtod_l+0x436>
 800bc84:	9a05      	ldr	r2, [sp, #20]
 800bc86:	2322      	movs	r3, #34	@ 0x22
 800bc88:	6013      	str	r3, [r2, #0]
 800bc8a:	e5fc      	b.n	800b886 <_strtod_l+0x436>
 800bc8c:	f3af 8000 	nop.w
 800bc90:	ffc00000 	.word	0xffc00000
 800bc94:	41dfffff 	.word	0x41dfffff
 800bc98:	00000000 	.word	0x00000000
 800bc9c:	39500000 	.word	0x39500000
 800bca0:	0800d6b8 	.word	0x0800d6b8
 800bca4:	fffffc02 	.word	0xfffffc02
 800bca8:	7ff00000 	.word	0x7ff00000
 800bcac:	46d9      	mov	r9, fp
 800bcae:	d15d      	bne.n	800bd6c <_strtod_l+0x91c>
 800bcb0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bcb4:	f1b8 0f00 	cmp.w	r8, #0
 800bcb8:	d02a      	beq.n	800bd10 <_strtod_l+0x8c0>
 800bcba:	4aab      	ldr	r2, [pc, #684]	@ (800bf68 <_strtod_l+0xb18>)
 800bcbc:	4293      	cmp	r3, r2
 800bcbe:	d12a      	bne.n	800bd16 <_strtod_l+0x8c6>
 800bcc0:	9b06      	ldr	r3, [sp, #24]
 800bcc2:	4652      	mov	r2, sl
 800bcc4:	b1fb      	cbz	r3, 800bd06 <_strtod_l+0x8b6>
 800bcc6:	4ba9      	ldr	r3, [pc, #676]	@ (800bf6c <_strtod_l+0xb1c>)
 800bcc8:	ea0b 0303 	and.w	r3, fp, r3
 800bccc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800bcd0:	f04f 31ff 	mov.w	r1, #4294967295
 800bcd4:	d81a      	bhi.n	800bd0c <_strtod_l+0x8bc>
 800bcd6:	0d1b      	lsrs	r3, r3, #20
 800bcd8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800bcdc:	fa01 f303 	lsl.w	r3, r1, r3
 800bce0:	429a      	cmp	r2, r3
 800bce2:	d118      	bne.n	800bd16 <_strtod_l+0x8c6>
 800bce4:	4ba2      	ldr	r3, [pc, #648]	@ (800bf70 <_strtod_l+0xb20>)
 800bce6:	4599      	cmp	r9, r3
 800bce8:	d102      	bne.n	800bcf0 <_strtod_l+0x8a0>
 800bcea:	3201      	adds	r2, #1
 800bcec:	f43f adc0 	beq.w	800b870 <_strtod_l+0x420>
 800bcf0:	4b9e      	ldr	r3, [pc, #632]	@ (800bf6c <_strtod_l+0xb1c>)
 800bcf2:	ea09 0303 	and.w	r3, r9, r3
 800bcf6:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 800bcfa:	f04f 0a00 	mov.w	sl, #0
 800bcfe:	9b06      	ldr	r3, [sp, #24]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d1b0      	bne.n	800bc66 <_strtod_l+0x816>
 800bd04:	e5bf      	b.n	800b886 <_strtod_l+0x436>
 800bd06:	f04f 33ff 	mov.w	r3, #4294967295
 800bd0a:	e7e9      	b.n	800bce0 <_strtod_l+0x890>
 800bd0c:	460b      	mov	r3, r1
 800bd0e:	e7e7      	b.n	800bce0 <_strtod_l+0x890>
 800bd10:	ea53 030a 	orrs.w	r3, r3, sl
 800bd14:	d099      	beq.n	800bc4a <_strtod_l+0x7fa>
 800bd16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bd18:	b1c3      	cbz	r3, 800bd4c <_strtod_l+0x8fc>
 800bd1a:	ea13 0f09 	tst.w	r3, r9
 800bd1e:	d0ee      	beq.n	800bcfe <_strtod_l+0x8ae>
 800bd20:	9a06      	ldr	r2, [sp, #24]
 800bd22:	4650      	mov	r0, sl
 800bd24:	4659      	mov	r1, fp
 800bd26:	f1b8 0f00 	cmp.w	r8, #0
 800bd2a:	d013      	beq.n	800bd54 <_strtod_l+0x904>
 800bd2c:	f7ff fb75 	bl	800b41a <sulp>
 800bd30:	ee39 7b00 	vadd.f64	d7, d9, d0
 800bd34:	ec5b ab17 	vmov	sl, fp, d7
 800bd38:	e7e1      	b.n	800bcfe <_strtod_l+0x8ae>
 800bd3a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800bd3e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800bd42:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800bd46:	f04f 3aff 	mov.w	sl, #4294967295
 800bd4a:	e7d8      	b.n	800bcfe <_strtod_l+0x8ae>
 800bd4c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bd4e:	ea13 0f0a 	tst.w	r3, sl
 800bd52:	e7e4      	b.n	800bd1e <_strtod_l+0x8ce>
 800bd54:	f7ff fb61 	bl	800b41a <sulp>
 800bd58:	ee39 0b40 	vsub.f64	d0, d9, d0
 800bd5c:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800bd60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd64:	ec5b ab10 	vmov	sl, fp, d0
 800bd68:	d1c9      	bne.n	800bcfe <_strtod_l+0x8ae>
 800bd6a:	e615      	b.n	800b998 <_strtod_l+0x548>
 800bd6c:	4629      	mov	r1, r5
 800bd6e:	4620      	mov	r0, r4
 800bd70:	f7ff fae0 	bl	800b334 <__ratio>
 800bd74:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 800bd78:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800bd7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd80:	d85d      	bhi.n	800be3e <_strtod_l+0x9ee>
 800bd82:	f1b8 0f00 	cmp.w	r8, #0
 800bd86:	d164      	bne.n	800be52 <_strtod_l+0xa02>
 800bd88:	f1ba 0f00 	cmp.w	sl, #0
 800bd8c:	d14b      	bne.n	800be26 <_strtod_l+0x9d6>
 800bd8e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bd92:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d160      	bne.n	800be5c <_strtod_l+0xa0c>
 800bd9a:	eeb4 0bc8 	vcmpe.f64	d0, d8
 800bd9e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800bda2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bda6:	d401      	bmi.n	800bdac <_strtod_l+0x95c>
 800bda8:	ee20 8b08 	vmul.f64	d8, d0, d8
 800bdac:	eeb1 ab48 	vneg.f64	d10, d8
 800bdb0:	486e      	ldr	r0, [pc, #440]	@ (800bf6c <_strtod_l+0xb1c>)
 800bdb2:	4970      	ldr	r1, [pc, #448]	@ (800bf74 <_strtod_l+0xb24>)
 800bdb4:	ea09 0700 	and.w	r7, r9, r0
 800bdb8:	428f      	cmp	r7, r1
 800bdba:	ec53 2b1a 	vmov	r2, r3, d10
 800bdbe:	d17d      	bne.n	800bebc <_strtod_l+0xa6c>
 800bdc0:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 800bdc4:	ec4b ab1c 	vmov	d12, sl, fp
 800bdc8:	eeb0 0b4c 	vmov.f64	d0, d12
 800bdcc:	f7ff f9ea 	bl	800b1a4 <__ulp>
 800bdd0:	4866      	ldr	r0, [pc, #408]	@ (800bf6c <_strtod_l+0xb1c>)
 800bdd2:	eea0 cb0a 	vfma.f64	d12, d0, d10
 800bdd6:	ee1c 3a90 	vmov	r3, s25
 800bdda:	4a67      	ldr	r2, [pc, #412]	@ (800bf78 <_strtod_l+0xb28>)
 800bddc:	ea03 0100 	and.w	r1, r3, r0
 800bde0:	4291      	cmp	r1, r2
 800bde2:	ec5b ab1c 	vmov	sl, fp, d12
 800bde6:	d93c      	bls.n	800be62 <_strtod_l+0xa12>
 800bde8:	ee19 2a90 	vmov	r2, s19
 800bdec:	4b60      	ldr	r3, [pc, #384]	@ (800bf70 <_strtod_l+0xb20>)
 800bdee:	429a      	cmp	r2, r3
 800bdf0:	d104      	bne.n	800bdfc <_strtod_l+0x9ac>
 800bdf2:	ee19 3a10 	vmov	r3, s18
 800bdf6:	3301      	adds	r3, #1
 800bdf8:	f43f ad3a 	beq.w	800b870 <_strtod_l+0x420>
 800bdfc:	f8df b170 	ldr.w	fp, [pc, #368]	@ 800bf70 <_strtod_l+0xb20>
 800be00:	f04f 3aff 	mov.w	sl, #4294967295
 800be04:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800be06:	9805      	ldr	r0, [sp, #20]
 800be08:	f7fe fe98 	bl	800ab3c <_Bfree>
 800be0c:	9805      	ldr	r0, [sp, #20]
 800be0e:	4631      	mov	r1, r6
 800be10:	f7fe fe94 	bl	800ab3c <_Bfree>
 800be14:	9805      	ldr	r0, [sp, #20]
 800be16:	4629      	mov	r1, r5
 800be18:	f7fe fe90 	bl	800ab3c <_Bfree>
 800be1c:	9805      	ldr	r0, [sp, #20]
 800be1e:	4621      	mov	r1, r4
 800be20:	f7fe fe8c 	bl	800ab3c <_Bfree>
 800be24:	e625      	b.n	800ba72 <_strtod_l+0x622>
 800be26:	f1ba 0f01 	cmp.w	sl, #1
 800be2a:	d103      	bne.n	800be34 <_strtod_l+0x9e4>
 800be2c:	f1bb 0f00 	cmp.w	fp, #0
 800be30:	f43f adb2 	beq.w	800b998 <_strtod_l+0x548>
 800be34:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800be38:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800be3c:	e7b8      	b.n	800bdb0 <_strtod_l+0x960>
 800be3e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800be42:	ee20 8b08 	vmul.f64	d8, d0, d8
 800be46:	f1b8 0f00 	cmp.w	r8, #0
 800be4a:	d0af      	beq.n	800bdac <_strtod_l+0x95c>
 800be4c:	eeb0 ab48 	vmov.f64	d10, d8
 800be50:	e7ae      	b.n	800bdb0 <_strtod_l+0x960>
 800be52:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 800be56:	eeb0 8b4a 	vmov.f64	d8, d10
 800be5a:	e7a9      	b.n	800bdb0 <_strtod_l+0x960>
 800be5c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800be60:	e7a6      	b.n	800bdb0 <_strtod_l+0x960>
 800be62:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800be66:	9b06      	ldr	r3, [sp, #24]
 800be68:	46d9      	mov	r9, fp
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d1ca      	bne.n	800be04 <_strtod_l+0x9b4>
 800be6e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800be72:	0d1b      	lsrs	r3, r3, #20
 800be74:	051b      	lsls	r3, r3, #20
 800be76:	429f      	cmp	r7, r3
 800be78:	d1c4      	bne.n	800be04 <_strtod_l+0x9b4>
 800be7a:	ec51 0b18 	vmov	r0, r1, d8
 800be7e:	f7f4 fc63 	bl	8000748 <__aeabi_d2lz>
 800be82:	f7f4 fc1b 	bl	80006bc <__aeabi_l2d>
 800be86:	f3cb 0913 	ubfx	r9, fp, #0, #20
 800be8a:	ec41 0b17 	vmov	d7, r0, r1
 800be8e:	ea49 090a 	orr.w	r9, r9, sl
 800be92:	ea59 0908 	orrs.w	r9, r9, r8
 800be96:	ee38 8b47 	vsub.f64	d8, d8, d7
 800be9a:	d03c      	beq.n	800bf16 <_strtod_l+0xac6>
 800be9c:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800bf50 <_strtod_l+0xb00>
 800bea0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800bea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bea8:	f53f aced 	bmi.w	800b886 <_strtod_l+0x436>
 800beac:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800bf58 <_strtod_l+0xb08>
 800beb0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800beb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800beb8:	dda4      	ble.n	800be04 <_strtod_l+0x9b4>
 800beba:	e4e4      	b.n	800b886 <_strtod_l+0x436>
 800bebc:	9906      	ldr	r1, [sp, #24]
 800bebe:	b1e1      	cbz	r1, 800befa <_strtod_l+0xaaa>
 800bec0:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 800bec4:	d819      	bhi.n	800befa <_strtod_l+0xaaa>
 800bec6:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800beca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bece:	d811      	bhi.n	800bef4 <_strtod_l+0xaa4>
 800bed0:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800bed4:	ee18 3a10 	vmov	r3, s16
 800bed8:	2b01      	cmp	r3, #1
 800beda:	bf38      	it	cc
 800bedc:	2301      	movcc	r3, #1
 800bede:	ee08 3a10 	vmov	s16, r3
 800bee2:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800bee6:	f1b8 0f00 	cmp.w	r8, #0
 800beea:	d111      	bne.n	800bf10 <_strtod_l+0xac0>
 800beec:	eeb1 7b48 	vneg.f64	d7, d8
 800bef0:	ec53 2b17 	vmov	r2, r3, d7
 800bef4:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 800bef8:	1bcb      	subs	r3, r1, r7
 800befa:	eeb0 0b49 	vmov.f64	d0, d9
 800befe:	ec43 2b1a 	vmov	d10, r2, r3
 800bf02:	f7ff f94f 	bl	800b1a4 <__ulp>
 800bf06:	eeaa 9b00 	vfma.f64	d9, d10, d0
 800bf0a:	ec5b ab19 	vmov	sl, fp, d9
 800bf0e:	e7aa      	b.n	800be66 <_strtod_l+0xa16>
 800bf10:	eeb0 7b48 	vmov.f64	d7, d8
 800bf14:	e7ec      	b.n	800bef0 <_strtod_l+0xaa0>
 800bf16:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 800bf60 <_strtod_l+0xb10>
 800bf1a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800bf1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf22:	f57f af6f 	bpl.w	800be04 <_strtod_l+0x9b4>
 800bf26:	e4ae      	b.n	800b886 <_strtod_l+0x436>
 800bf28:	2300      	movs	r3, #0
 800bf2a:	9308      	str	r3, [sp, #32]
 800bf2c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bf2e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bf30:	6013      	str	r3, [r2, #0]
 800bf32:	f7ff bacc 	b.w	800b4ce <_strtod_l+0x7e>
 800bf36:	2a65      	cmp	r2, #101	@ 0x65
 800bf38:	f43f abbc 	beq.w	800b6b4 <_strtod_l+0x264>
 800bf3c:	2a45      	cmp	r2, #69	@ 0x45
 800bf3e:	f43f abb9 	beq.w	800b6b4 <_strtod_l+0x264>
 800bf42:	2301      	movs	r3, #1
 800bf44:	9306      	str	r3, [sp, #24]
 800bf46:	f7ff bbf0 	b.w	800b72a <_strtod_l+0x2da>
 800bf4a:	bf00      	nop
 800bf4c:	f3af 8000 	nop.w
 800bf50:	94a03595 	.word	0x94a03595
 800bf54:	3fdfffff 	.word	0x3fdfffff
 800bf58:	35afe535 	.word	0x35afe535
 800bf5c:	3fe00000 	.word	0x3fe00000
 800bf60:	94a03595 	.word	0x94a03595
 800bf64:	3fcfffff 	.word	0x3fcfffff
 800bf68:	000fffff 	.word	0x000fffff
 800bf6c:	7ff00000 	.word	0x7ff00000
 800bf70:	7fefffff 	.word	0x7fefffff
 800bf74:	7fe00000 	.word	0x7fe00000
 800bf78:	7c9fffff 	.word	0x7c9fffff

0800bf7c <_strtod_r>:
 800bf7c:	4b01      	ldr	r3, [pc, #4]	@ (800bf84 <_strtod_r+0x8>)
 800bf7e:	f7ff ba67 	b.w	800b450 <_strtod_l>
 800bf82:	bf00      	nop
 800bf84:	2400006c 	.word	0x2400006c

0800bf88 <_strtol_l.constprop.0>:
 800bf88:	2b24      	cmp	r3, #36	@ 0x24
 800bf8a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf8e:	4686      	mov	lr, r0
 800bf90:	4690      	mov	r8, r2
 800bf92:	d801      	bhi.n	800bf98 <_strtol_l.constprop.0+0x10>
 800bf94:	2b01      	cmp	r3, #1
 800bf96:	d106      	bne.n	800bfa6 <_strtol_l.constprop.0+0x1e>
 800bf98:	f7fd fe7e 	bl	8009c98 <__errno>
 800bf9c:	2316      	movs	r3, #22
 800bf9e:	6003      	str	r3, [r0, #0]
 800bfa0:	2000      	movs	r0, #0
 800bfa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfa6:	4834      	ldr	r0, [pc, #208]	@ (800c078 <_strtol_l.constprop.0+0xf0>)
 800bfa8:	460d      	mov	r5, r1
 800bfaa:	462a      	mov	r2, r5
 800bfac:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bfb0:	5d06      	ldrb	r6, [r0, r4]
 800bfb2:	f016 0608 	ands.w	r6, r6, #8
 800bfb6:	d1f8      	bne.n	800bfaa <_strtol_l.constprop.0+0x22>
 800bfb8:	2c2d      	cmp	r4, #45	@ 0x2d
 800bfba:	d12d      	bne.n	800c018 <_strtol_l.constprop.0+0x90>
 800bfbc:	782c      	ldrb	r4, [r5, #0]
 800bfbe:	2601      	movs	r6, #1
 800bfc0:	1c95      	adds	r5, r2, #2
 800bfc2:	f033 0210 	bics.w	r2, r3, #16
 800bfc6:	d109      	bne.n	800bfdc <_strtol_l.constprop.0+0x54>
 800bfc8:	2c30      	cmp	r4, #48	@ 0x30
 800bfca:	d12a      	bne.n	800c022 <_strtol_l.constprop.0+0x9a>
 800bfcc:	782a      	ldrb	r2, [r5, #0]
 800bfce:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800bfd2:	2a58      	cmp	r2, #88	@ 0x58
 800bfd4:	d125      	bne.n	800c022 <_strtol_l.constprop.0+0x9a>
 800bfd6:	786c      	ldrb	r4, [r5, #1]
 800bfd8:	2310      	movs	r3, #16
 800bfda:	3502      	adds	r5, #2
 800bfdc:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800bfe0:	f10c 3cff 	add.w	ip, ip, #4294967295
 800bfe4:	2200      	movs	r2, #0
 800bfe6:	fbbc f9f3 	udiv	r9, ip, r3
 800bfea:	4610      	mov	r0, r2
 800bfec:	fb03 ca19 	mls	sl, r3, r9, ip
 800bff0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800bff4:	2f09      	cmp	r7, #9
 800bff6:	d81b      	bhi.n	800c030 <_strtol_l.constprop.0+0xa8>
 800bff8:	463c      	mov	r4, r7
 800bffa:	42a3      	cmp	r3, r4
 800bffc:	dd27      	ble.n	800c04e <_strtol_l.constprop.0+0xc6>
 800bffe:	1c57      	adds	r7, r2, #1
 800c000:	d007      	beq.n	800c012 <_strtol_l.constprop.0+0x8a>
 800c002:	4581      	cmp	r9, r0
 800c004:	d320      	bcc.n	800c048 <_strtol_l.constprop.0+0xc0>
 800c006:	d101      	bne.n	800c00c <_strtol_l.constprop.0+0x84>
 800c008:	45a2      	cmp	sl, r4
 800c00a:	db1d      	blt.n	800c048 <_strtol_l.constprop.0+0xc0>
 800c00c:	fb00 4003 	mla	r0, r0, r3, r4
 800c010:	2201      	movs	r2, #1
 800c012:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c016:	e7eb      	b.n	800bff0 <_strtol_l.constprop.0+0x68>
 800c018:	2c2b      	cmp	r4, #43	@ 0x2b
 800c01a:	bf04      	itt	eq
 800c01c:	782c      	ldrbeq	r4, [r5, #0]
 800c01e:	1c95      	addeq	r5, r2, #2
 800c020:	e7cf      	b.n	800bfc2 <_strtol_l.constprop.0+0x3a>
 800c022:	2b00      	cmp	r3, #0
 800c024:	d1da      	bne.n	800bfdc <_strtol_l.constprop.0+0x54>
 800c026:	2c30      	cmp	r4, #48	@ 0x30
 800c028:	bf0c      	ite	eq
 800c02a:	2308      	moveq	r3, #8
 800c02c:	230a      	movne	r3, #10
 800c02e:	e7d5      	b.n	800bfdc <_strtol_l.constprop.0+0x54>
 800c030:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800c034:	2f19      	cmp	r7, #25
 800c036:	d801      	bhi.n	800c03c <_strtol_l.constprop.0+0xb4>
 800c038:	3c37      	subs	r4, #55	@ 0x37
 800c03a:	e7de      	b.n	800bffa <_strtol_l.constprop.0+0x72>
 800c03c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800c040:	2f19      	cmp	r7, #25
 800c042:	d804      	bhi.n	800c04e <_strtol_l.constprop.0+0xc6>
 800c044:	3c57      	subs	r4, #87	@ 0x57
 800c046:	e7d8      	b.n	800bffa <_strtol_l.constprop.0+0x72>
 800c048:	f04f 32ff 	mov.w	r2, #4294967295
 800c04c:	e7e1      	b.n	800c012 <_strtol_l.constprop.0+0x8a>
 800c04e:	1c53      	adds	r3, r2, #1
 800c050:	d108      	bne.n	800c064 <_strtol_l.constprop.0+0xdc>
 800c052:	2322      	movs	r3, #34	@ 0x22
 800c054:	f8ce 3000 	str.w	r3, [lr]
 800c058:	4660      	mov	r0, ip
 800c05a:	f1b8 0f00 	cmp.w	r8, #0
 800c05e:	d0a0      	beq.n	800bfa2 <_strtol_l.constprop.0+0x1a>
 800c060:	1e69      	subs	r1, r5, #1
 800c062:	e006      	b.n	800c072 <_strtol_l.constprop.0+0xea>
 800c064:	b106      	cbz	r6, 800c068 <_strtol_l.constprop.0+0xe0>
 800c066:	4240      	negs	r0, r0
 800c068:	f1b8 0f00 	cmp.w	r8, #0
 800c06c:	d099      	beq.n	800bfa2 <_strtol_l.constprop.0+0x1a>
 800c06e:	2a00      	cmp	r2, #0
 800c070:	d1f6      	bne.n	800c060 <_strtol_l.constprop.0+0xd8>
 800c072:	f8c8 1000 	str.w	r1, [r8]
 800c076:	e794      	b.n	800bfa2 <_strtol_l.constprop.0+0x1a>
 800c078:	0800d6e1 	.word	0x0800d6e1

0800c07c <_strtol_r>:
 800c07c:	f7ff bf84 	b.w	800bf88 <_strtol_l.constprop.0>

0800c080 <__ssputs_r>:
 800c080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c084:	688e      	ldr	r6, [r1, #8]
 800c086:	461f      	mov	r7, r3
 800c088:	42be      	cmp	r6, r7
 800c08a:	680b      	ldr	r3, [r1, #0]
 800c08c:	4682      	mov	sl, r0
 800c08e:	460c      	mov	r4, r1
 800c090:	4690      	mov	r8, r2
 800c092:	d82d      	bhi.n	800c0f0 <__ssputs_r+0x70>
 800c094:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c098:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c09c:	d026      	beq.n	800c0ec <__ssputs_r+0x6c>
 800c09e:	6965      	ldr	r5, [r4, #20]
 800c0a0:	6909      	ldr	r1, [r1, #16]
 800c0a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c0a6:	eba3 0901 	sub.w	r9, r3, r1
 800c0aa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c0ae:	1c7b      	adds	r3, r7, #1
 800c0b0:	444b      	add	r3, r9
 800c0b2:	106d      	asrs	r5, r5, #1
 800c0b4:	429d      	cmp	r5, r3
 800c0b6:	bf38      	it	cc
 800c0b8:	461d      	movcc	r5, r3
 800c0ba:	0553      	lsls	r3, r2, #21
 800c0bc:	d527      	bpl.n	800c10e <__ssputs_r+0x8e>
 800c0be:	4629      	mov	r1, r5
 800c0c0:	f7fe fc70 	bl	800a9a4 <_malloc_r>
 800c0c4:	4606      	mov	r6, r0
 800c0c6:	b360      	cbz	r0, 800c122 <__ssputs_r+0xa2>
 800c0c8:	6921      	ldr	r1, [r4, #16]
 800c0ca:	464a      	mov	r2, r9
 800c0cc:	f000 fa18 	bl	800c500 <memcpy>
 800c0d0:	89a3      	ldrh	r3, [r4, #12]
 800c0d2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c0d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c0da:	81a3      	strh	r3, [r4, #12]
 800c0dc:	6126      	str	r6, [r4, #16]
 800c0de:	6165      	str	r5, [r4, #20]
 800c0e0:	444e      	add	r6, r9
 800c0e2:	eba5 0509 	sub.w	r5, r5, r9
 800c0e6:	6026      	str	r6, [r4, #0]
 800c0e8:	60a5      	str	r5, [r4, #8]
 800c0ea:	463e      	mov	r6, r7
 800c0ec:	42be      	cmp	r6, r7
 800c0ee:	d900      	bls.n	800c0f2 <__ssputs_r+0x72>
 800c0f0:	463e      	mov	r6, r7
 800c0f2:	6820      	ldr	r0, [r4, #0]
 800c0f4:	4632      	mov	r2, r6
 800c0f6:	4641      	mov	r1, r8
 800c0f8:	f000 f9c6 	bl	800c488 <memmove>
 800c0fc:	68a3      	ldr	r3, [r4, #8]
 800c0fe:	1b9b      	subs	r3, r3, r6
 800c100:	60a3      	str	r3, [r4, #8]
 800c102:	6823      	ldr	r3, [r4, #0]
 800c104:	4433      	add	r3, r6
 800c106:	6023      	str	r3, [r4, #0]
 800c108:	2000      	movs	r0, #0
 800c10a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c10e:	462a      	mov	r2, r5
 800c110:	f000 fd8b 	bl	800cc2a <_realloc_r>
 800c114:	4606      	mov	r6, r0
 800c116:	2800      	cmp	r0, #0
 800c118:	d1e0      	bne.n	800c0dc <__ssputs_r+0x5c>
 800c11a:	6921      	ldr	r1, [r4, #16]
 800c11c:	4650      	mov	r0, sl
 800c11e:	f7fe fbcd 	bl	800a8bc <_free_r>
 800c122:	230c      	movs	r3, #12
 800c124:	f8ca 3000 	str.w	r3, [sl]
 800c128:	89a3      	ldrh	r3, [r4, #12]
 800c12a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c12e:	81a3      	strh	r3, [r4, #12]
 800c130:	f04f 30ff 	mov.w	r0, #4294967295
 800c134:	e7e9      	b.n	800c10a <__ssputs_r+0x8a>
	...

0800c138 <_svfiprintf_r>:
 800c138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c13c:	4698      	mov	r8, r3
 800c13e:	898b      	ldrh	r3, [r1, #12]
 800c140:	061b      	lsls	r3, r3, #24
 800c142:	b09d      	sub	sp, #116	@ 0x74
 800c144:	4607      	mov	r7, r0
 800c146:	460d      	mov	r5, r1
 800c148:	4614      	mov	r4, r2
 800c14a:	d510      	bpl.n	800c16e <_svfiprintf_r+0x36>
 800c14c:	690b      	ldr	r3, [r1, #16]
 800c14e:	b973      	cbnz	r3, 800c16e <_svfiprintf_r+0x36>
 800c150:	2140      	movs	r1, #64	@ 0x40
 800c152:	f7fe fc27 	bl	800a9a4 <_malloc_r>
 800c156:	6028      	str	r0, [r5, #0]
 800c158:	6128      	str	r0, [r5, #16]
 800c15a:	b930      	cbnz	r0, 800c16a <_svfiprintf_r+0x32>
 800c15c:	230c      	movs	r3, #12
 800c15e:	603b      	str	r3, [r7, #0]
 800c160:	f04f 30ff 	mov.w	r0, #4294967295
 800c164:	b01d      	add	sp, #116	@ 0x74
 800c166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c16a:	2340      	movs	r3, #64	@ 0x40
 800c16c:	616b      	str	r3, [r5, #20]
 800c16e:	2300      	movs	r3, #0
 800c170:	9309      	str	r3, [sp, #36]	@ 0x24
 800c172:	2320      	movs	r3, #32
 800c174:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c178:	f8cd 800c 	str.w	r8, [sp, #12]
 800c17c:	2330      	movs	r3, #48	@ 0x30
 800c17e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c31c <_svfiprintf_r+0x1e4>
 800c182:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c186:	f04f 0901 	mov.w	r9, #1
 800c18a:	4623      	mov	r3, r4
 800c18c:	469a      	mov	sl, r3
 800c18e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c192:	b10a      	cbz	r2, 800c198 <_svfiprintf_r+0x60>
 800c194:	2a25      	cmp	r2, #37	@ 0x25
 800c196:	d1f9      	bne.n	800c18c <_svfiprintf_r+0x54>
 800c198:	ebba 0b04 	subs.w	fp, sl, r4
 800c19c:	d00b      	beq.n	800c1b6 <_svfiprintf_r+0x7e>
 800c19e:	465b      	mov	r3, fp
 800c1a0:	4622      	mov	r2, r4
 800c1a2:	4629      	mov	r1, r5
 800c1a4:	4638      	mov	r0, r7
 800c1a6:	f7ff ff6b 	bl	800c080 <__ssputs_r>
 800c1aa:	3001      	adds	r0, #1
 800c1ac:	f000 80a7 	beq.w	800c2fe <_svfiprintf_r+0x1c6>
 800c1b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c1b2:	445a      	add	r2, fp
 800c1b4:	9209      	str	r2, [sp, #36]	@ 0x24
 800c1b6:	f89a 3000 	ldrb.w	r3, [sl]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	f000 809f 	beq.w	800c2fe <_svfiprintf_r+0x1c6>
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	f04f 32ff 	mov.w	r2, #4294967295
 800c1c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c1ca:	f10a 0a01 	add.w	sl, sl, #1
 800c1ce:	9304      	str	r3, [sp, #16]
 800c1d0:	9307      	str	r3, [sp, #28]
 800c1d2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c1d6:	931a      	str	r3, [sp, #104]	@ 0x68
 800c1d8:	4654      	mov	r4, sl
 800c1da:	2205      	movs	r2, #5
 800c1dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1e0:	484e      	ldr	r0, [pc, #312]	@ (800c31c <_svfiprintf_r+0x1e4>)
 800c1e2:	f7f4 f885 	bl	80002f0 <memchr>
 800c1e6:	9a04      	ldr	r2, [sp, #16]
 800c1e8:	b9d8      	cbnz	r0, 800c222 <_svfiprintf_r+0xea>
 800c1ea:	06d0      	lsls	r0, r2, #27
 800c1ec:	bf44      	itt	mi
 800c1ee:	2320      	movmi	r3, #32
 800c1f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c1f4:	0711      	lsls	r1, r2, #28
 800c1f6:	bf44      	itt	mi
 800c1f8:	232b      	movmi	r3, #43	@ 0x2b
 800c1fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c1fe:	f89a 3000 	ldrb.w	r3, [sl]
 800c202:	2b2a      	cmp	r3, #42	@ 0x2a
 800c204:	d015      	beq.n	800c232 <_svfiprintf_r+0xfa>
 800c206:	9a07      	ldr	r2, [sp, #28]
 800c208:	4654      	mov	r4, sl
 800c20a:	2000      	movs	r0, #0
 800c20c:	f04f 0c0a 	mov.w	ip, #10
 800c210:	4621      	mov	r1, r4
 800c212:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c216:	3b30      	subs	r3, #48	@ 0x30
 800c218:	2b09      	cmp	r3, #9
 800c21a:	d94b      	bls.n	800c2b4 <_svfiprintf_r+0x17c>
 800c21c:	b1b0      	cbz	r0, 800c24c <_svfiprintf_r+0x114>
 800c21e:	9207      	str	r2, [sp, #28]
 800c220:	e014      	b.n	800c24c <_svfiprintf_r+0x114>
 800c222:	eba0 0308 	sub.w	r3, r0, r8
 800c226:	fa09 f303 	lsl.w	r3, r9, r3
 800c22a:	4313      	orrs	r3, r2
 800c22c:	9304      	str	r3, [sp, #16]
 800c22e:	46a2      	mov	sl, r4
 800c230:	e7d2      	b.n	800c1d8 <_svfiprintf_r+0xa0>
 800c232:	9b03      	ldr	r3, [sp, #12]
 800c234:	1d19      	adds	r1, r3, #4
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	9103      	str	r1, [sp, #12]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	bfbb      	ittet	lt
 800c23e:	425b      	neglt	r3, r3
 800c240:	f042 0202 	orrlt.w	r2, r2, #2
 800c244:	9307      	strge	r3, [sp, #28]
 800c246:	9307      	strlt	r3, [sp, #28]
 800c248:	bfb8      	it	lt
 800c24a:	9204      	strlt	r2, [sp, #16]
 800c24c:	7823      	ldrb	r3, [r4, #0]
 800c24e:	2b2e      	cmp	r3, #46	@ 0x2e
 800c250:	d10a      	bne.n	800c268 <_svfiprintf_r+0x130>
 800c252:	7863      	ldrb	r3, [r4, #1]
 800c254:	2b2a      	cmp	r3, #42	@ 0x2a
 800c256:	d132      	bne.n	800c2be <_svfiprintf_r+0x186>
 800c258:	9b03      	ldr	r3, [sp, #12]
 800c25a:	1d1a      	adds	r2, r3, #4
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	9203      	str	r2, [sp, #12]
 800c260:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c264:	3402      	adds	r4, #2
 800c266:	9305      	str	r3, [sp, #20]
 800c268:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c32c <_svfiprintf_r+0x1f4>
 800c26c:	7821      	ldrb	r1, [r4, #0]
 800c26e:	2203      	movs	r2, #3
 800c270:	4650      	mov	r0, sl
 800c272:	f7f4 f83d 	bl	80002f0 <memchr>
 800c276:	b138      	cbz	r0, 800c288 <_svfiprintf_r+0x150>
 800c278:	9b04      	ldr	r3, [sp, #16]
 800c27a:	eba0 000a 	sub.w	r0, r0, sl
 800c27e:	2240      	movs	r2, #64	@ 0x40
 800c280:	4082      	lsls	r2, r0
 800c282:	4313      	orrs	r3, r2
 800c284:	3401      	adds	r4, #1
 800c286:	9304      	str	r3, [sp, #16]
 800c288:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c28c:	4824      	ldr	r0, [pc, #144]	@ (800c320 <_svfiprintf_r+0x1e8>)
 800c28e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c292:	2206      	movs	r2, #6
 800c294:	f7f4 f82c 	bl	80002f0 <memchr>
 800c298:	2800      	cmp	r0, #0
 800c29a:	d036      	beq.n	800c30a <_svfiprintf_r+0x1d2>
 800c29c:	4b21      	ldr	r3, [pc, #132]	@ (800c324 <_svfiprintf_r+0x1ec>)
 800c29e:	bb1b      	cbnz	r3, 800c2e8 <_svfiprintf_r+0x1b0>
 800c2a0:	9b03      	ldr	r3, [sp, #12]
 800c2a2:	3307      	adds	r3, #7
 800c2a4:	f023 0307 	bic.w	r3, r3, #7
 800c2a8:	3308      	adds	r3, #8
 800c2aa:	9303      	str	r3, [sp, #12]
 800c2ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c2ae:	4433      	add	r3, r6
 800c2b0:	9309      	str	r3, [sp, #36]	@ 0x24
 800c2b2:	e76a      	b.n	800c18a <_svfiprintf_r+0x52>
 800c2b4:	fb0c 3202 	mla	r2, ip, r2, r3
 800c2b8:	460c      	mov	r4, r1
 800c2ba:	2001      	movs	r0, #1
 800c2bc:	e7a8      	b.n	800c210 <_svfiprintf_r+0xd8>
 800c2be:	2300      	movs	r3, #0
 800c2c0:	3401      	adds	r4, #1
 800c2c2:	9305      	str	r3, [sp, #20]
 800c2c4:	4619      	mov	r1, r3
 800c2c6:	f04f 0c0a 	mov.w	ip, #10
 800c2ca:	4620      	mov	r0, r4
 800c2cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c2d0:	3a30      	subs	r2, #48	@ 0x30
 800c2d2:	2a09      	cmp	r2, #9
 800c2d4:	d903      	bls.n	800c2de <_svfiprintf_r+0x1a6>
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d0c6      	beq.n	800c268 <_svfiprintf_r+0x130>
 800c2da:	9105      	str	r1, [sp, #20]
 800c2dc:	e7c4      	b.n	800c268 <_svfiprintf_r+0x130>
 800c2de:	fb0c 2101 	mla	r1, ip, r1, r2
 800c2e2:	4604      	mov	r4, r0
 800c2e4:	2301      	movs	r3, #1
 800c2e6:	e7f0      	b.n	800c2ca <_svfiprintf_r+0x192>
 800c2e8:	ab03      	add	r3, sp, #12
 800c2ea:	9300      	str	r3, [sp, #0]
 800c2ec:	462a      	mov	r2, r5
 800c2ee:	4b0e      	ldr	r3, [pc, #56]	@ (800c328 <_svfiprintf_r+0x1f0>)
 800c2f0:	a904      	add	r1, sp, #16
 800c2f2:	4638      	mov	r0, r7
 800c2f4:	f7fc fd70 	bl	8008dd8 <_printf_float>
 800c2f8:	1c42      	adds	r2, r0, #1
 800c2fa:	4606      	mov	r6, r0
 800c2fc:	d1d6      	bne.n	800c2ac <_svfiprintf_r+0x174>
 800c2fe:	89ab      	ldrh	r3, [r5, #12]
 800c300:	065b      	lsls	r3, r3, #25
 800c302:	f53f af2d 	bmi.w	800c160 <_svfiprintf_r+0x28>
 800c306:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c308:	e72c      	b.n	800c164 <_svfiprintf_r+0x2c>
 800c30a:	ab03      	add	r3, sp, #12
 800c30c:	9300      	str	r3, [sp, #0]
 800c30e:	462a      	mov	r2, r5
 800c310:	4b05      	ldr	r3, [pc, #20]	@ (800c328 <_svfiprintf_r+0x1f0>)
 800c312:	a904      	add	r1, sp, #16
 800c314:	4638      	mov	r0, r7
 800c316:	f7fc ffe7 	bl	80092e8 <_printf_i>
 800c31a:	e7ed      	b.n	800c2f8 <_svfiprintf_r+0x1c0>
 800c31c:	0800d7e1 	.word	0x0800d7e1
 800c320:	0800d7eb 	.word	0x0800d7eb
 800c324:	08008dd9 	.word	0x08008dd9
 800c328:	0800c081 	.word	0x0800c081
 800c32c:	0800d7e7 	.word	0x0800d7e7

0800c330 <__sflush_r>:
 800c330:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c338:	0716      	lsls	r6, r2, #28
 800c33a:	4605      	mov	r5, r0
 800c33c:	460c      	mov	r4, r1
 800c33e:	d454      	bmi.n	800c3ea <__sflush_r+0xba>
 800c340:	684b      	ldr	r3, [r1, #4]
 800c342:	2b00      	cmp	r3, #0
 800c344:	dc02      	bgt.n	800c34c <__sflush_r+0x1c>
 800c346:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c348:	2b00      	cmp	r3, #0
 800c34a:	dd48      	ble.n	800c3de <__sflush_r+0xae>
 800c34c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c34e:	2e00      	cmp	r6, #0
 800c350:	d045      	beq.n	800c3de <__sflush_r+0xae>
 800c352:	2300      	movs	r3, #0
 800c354:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c358:	682f      	ldr	r7, [r5, #0]
 800c35a:	6a21      	ldr	r1, [r4, #32]
 800c35c:	602b      	str	r3, [r5, #0]
 800c35e:	d030      	beq.n	800c3c2 <__sflush_r+0x92>
 800c360:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c362:	89a3      	ldrh	r3, [r4, #12]
 800c364:	0759      	lsls	r1, r3, #29
 800c366:	d505      	bpl.n	800c374 <__sflush_r+0x44>
 800c368:	6863      	ldr	r3, [r4, #4]
 800c36a:	1ad2      	subs	r2, r2, r3
 800c36c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c36e:	b10b      	cbz	r3, 800c374 <__sflush_r+0x44>
 800c370:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c372:	1ad2      	subs	r2, r2, r3
 800c374:	2300      	movs	r3, #0
 800c376:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c378:	6a21      	ldr	r1, [r4, #32]
 800c37a:	4628      	mov	r0, r5
 800c37c:	47b0      	blx	r6
 800c37e:	1c43      	adds	r3, r0, #1
 800c380:	89a3      	ldrh	r3, [r4, #12]
 800c382:	d106      	bne.n	800c392 <__sflush_r+0x62>
 800c384:	6829      	ldr	r1, [r5, #0]
 800c386:	291d      	cmp	r1, #29
 800c388:	d82b      	bhi.n	800c3e2 <__sflush_r+0xb2>
 800c38a:	4a2a      	ldr	r2, [pc, #168]	@ (800c434 <__sflush_r+0x104>)
 800c38c:	410a      	asrs	r2, r1
 800c38e:	07d6      	lsls	r6, r2, #31
 800c390:	d427      	bmi.n	800c3e2 <__sflush_r+0xb2>
 800c392:	2200      	movs	r2, #0
 800c394:	6062      	str	r2, [r4, #4]
 800c396:	04d9      	lsls	r1, r3, #19
 800c398:	6922      	ldr	r2, [r4, #16]
 800c39a:	6022      	str	r2, [r4, #0]
 800c39c:	d504      	bpl.n	800c3a8 <__sflush_r+0x78>
 800c39e:	1c42      	adds	r2, r0, #1
 800c3a0:	d101      	bne.n	800c3a6 <__sflush_r+0x76>
 800c3a2:	682b      	ldr	r3, [r5, #0]
 800c3a4:	b903      	cbnz	r3, 800c3a8 <__sflush_r+0x78>
 800c3a6:	6560      	str	r0, [r4, #84]	@ 0x54
 800c3a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c3aa:	602f      	str	r7, [r5, #0]
 800c3ac:	b1b9      	cbz	r1, 800c3de <__sflush_r+0xae>
 800c3ae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c3b2:	4299      	cmp	r1, r3
 800c3b4:	d002      	beq.n	800c3bc <__sflush_r+0x8c>
 800c3b6:	4628      	mov	r0, r5
 800c3b8:	f7fe fa80 	bl	800a8bc <_free_r>
 800c3bc:	2300      	movs	r3, #0
 800c3be:	6363      	str	r3, [r4, #52]	@ 0x34
 800c3c0:	e00d      	b.n	800c3de <__sflush_r+0xae>
 800c3c2:	2301      	movs	r3, #1
 800c3c4:	4628      	mov	r0, r5
 800c3c6:	47b0      	blx	r6
 800c3c8:	4602      	mov	r2, r0
 800c3ca:	1c50      	adds	r0, r2, #1
 800c3cc:	d1c9      	bne.n	800c362 <__sflush_r+0x32>
 800c3ce:	682b      	ldr	r3, [r5, #0]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d0c6      	beq.n	800c362 <__sflush_r+0x32>
 800c3d4:	2b1d      	cmp	r3, #29
 800c3d6:	d001      	beq.n	800c3dc <__sflush_r+0xac>
 800c3d8:	2b16      	cmp	r3, #22
 800c3da:	d11e      	bne.n	800c41a <__sflush_r+0xea>
 800c3dc:	602f      	str	r7, [r5, #0]
 800c3de:	2000      	movs	r0, #0
 800c3e0:	e022      	b.n	800c428 <__sflush_r+0xf8>
 800c3e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c3e6:	b21b      	sxth	r3, r3
 800c3e8:	e01b      	b.n	800c422 <__sflush_r+0xf2>
 800c3ea:	690f      	ldr	r7, [r1, #16]
 800c3ec:	2f00      	cmp	r7, #0
 800c3ee:	d0f6      	beq.n	800c3de <__sflush_r+0xae>
 800c3f0:	0793      	lsls	r3, r2, #30
 800c3f2:	680e      	ldr	r6, [r1, #0]
 800c3f4:	bf08      	it	eq
 800c3f6:	694b      	ldreq	r3, [r1, #20]
 800c3f8:	600f      	str	r7, [r1, #0]
 800c3fa:	bf18      	it	ne
 800c3fc:	2300      	movne	r3, #0
 800c3fe:	eba6 0807 	sub.w	r8, r6, r7
 800c402:	608b      	str	r3, [r1, #8]
 800c404:	f1b8 0f00 	cmp.w	r8, #0
 800c408:	dde9      	ble.n	800c3de <__sflush_r+0xae>
 800c40a:	6a21      	ldr	r1, [r4, #32]
 800c40c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c40e:	4643      	mov	r3, r8
 800c410:	463a      	mov	r2, r7
 800c412:	4628      	mov	r0, r5
 800c414:	47b0      	blx	r6
 800c416:	2800      	cmp	r0, #0
 800c418:	dc08      	bgt.n	800c42c <__sflush_r+0xfc>
 800c41a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c41e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c422:	81a3      	strh	r3, [r4, #12]
 800c424:	f04f 30ff 	mov.w	r0, #4294967295
 800c428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c42c:	4407      	add	r7, r0
 800c42e:	eba8 0800 	sub.w	r8, r8, r0
 800c432:	e7e7      	b.n	800c404 <__sflush_r+0xd4>
 800c434:	dfbffffe 	.word	0xdfbffffe

0800c438 <_fflush_r>:
 800c438:	b538      	push	{r3, r4, r5, lr}
 800c43a:	690b      	ldr	r3, [r1, #16]
 800c43c:	4605      	mov	r5, r0
 800c43e:	460c      	mov	r4, r1
 800c440:	b913      	cbnz	r3, 800c448 <_fflush_r+0x10>
 800c442:	2500      	movs	r5, #0
 800c444:	4628      	mov	r0, r5
 800c446:	bd38      	pop	{r3, r4, r5, pc}
 800c448:	b118      	cbz	r0, 800c452 <_fflush_r+0x1a>
 800c44a:	6a03      	ldr	r3, [r0, #32]
 800c44c:	b90b      	cbnz	r3, 800c452 <_fflush_r+0x1a>
 800c44e:	f7fd fb03 	bl	8009a58 <__sinit>
 800c452:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d0f3      	beq.n	800c442 <_fflush_r+0xa>
 800c45a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c45c:	07d0      	lsls	r0, r2, #31
 800c45e:	d404      	bmi.n	800c46a <_fflush_r+0x32>
 800c460:	0599      	lsls	r1, r3, #22
 800c462:	d402      	bmi.n	800c46a <_fflush_r+0x32>
 800c464:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c466:	f7fd fc42 	bl	8009cee <__retarget_lock_acquire_recursive>
 800c46a:	4628      	mov	r0, r5
 800c46c:	4621      	mov	r1, r4
 800c46e:	f7ff ff5f 	bl	800c330 <__sflush_r>
 800c472:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c474:	07da      	lsls	r2, r3, #31
 800c476:	4605      	mov	r5, r0
 800c478:	d4e4      	bmi.n	800c444 <_fflush_r+0xc>
 800c47a:	89a3      	ldrh	r3, [r4, #12]
 800c47c:	059b      	lsls	r3, r3, #22
 800c47e:	d4e1      	bmi.n	800c444 <_fflush_r+0xc>
 800c480:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c482:	f7fd fc35 	bl	8009cf0 <__retarget_lock_release_recursive>
 800c486:	e7dd      	b.n	800c444 <_fflush_r+0xc>

0800c488 <memmove>:
 800c488:	4288      	cmp	r0, r1
 800c48a:	b510      	push	{r4, lr}
 800c48c:	eb01 0402 	add.w	r4, r1, r2
 800c490:	d902      	bls.n	800c498 <memmove+0x10>
 800c492:	4284      	cmp	r4, r0
 800c494:	4623      	mov	r3, r4
 800c496:	d807      	bhi.n	800c4a8 <memmove+0x20>
 800c498:	1e43      	subs	r3, r0, #1
 800c49a:	42a1      	cmp	r1, r4
 800c49c:	d008      	beq.n	800c4b0 <memmove+0x28>
 800c49e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c4a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c4a6:	e7f8      	b.n	800c49a <memmove+0x12>
 800c4a8:	4402      	add	r2, r0
 800c4aa:	4601      	mov	r1, r0
 800c4ac:	428a      	cmp	r2, r1
 800c4ae:	d100      	bne.n	800c4b2 <memmove+0x2a>
 800c4b0:	bd10      	pop	{r4, pc}
 800c4b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c4b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c4ba:	e7f7      	b.n	800c4ac <memmove+0x24>

0800c4bc <strncmp>:
 800c4bc:	b510      	push	{r4, lr}
 800c4be:	b16a      	cbz	r2, 800c4dc <strncmp+0x20>
 800c4c0:	3901      	subs	r1, #1
 800c4c2:	1884      	adds	r4, r0, r2
 800c4c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c4c8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c4cc:	429a      	cmp	r2, r3
 800c4ce:	d103      	bne.n	800c4d8 <strncmp+0x1c>
 800c4d0:	42a0      	cmp	r0, r4
 800c4d2:	d001      	beq.n	800c4d8 <strncmp+0x1c>
 800c4d4:	2a00      	cmp	r2, #0
 800c4d6:	d1f5      	bne.n	800c4c4 <strncmp+0x8>
 800c4d8:	1ad0      	subs	r0, r2, r3
 800c4da:	bd10      	pop	{r4, pc}
 800c4dc:	4610      	mov	r0, r2
 800c4de:	e7fc      	b.n	800c4da <strncmp+0x1e>

0800c4e0 <_sbrk_r>:
 800c4e0:	b538      	push	{r3, r4, r5, lr}
 800c4e2:	4d06      	ldr	r5, [pc, #24]	@ (800c4fc <_sbrk_r+0x1c>)
 800c4e4:	2300      	movs	r3, #0
 800c4e6:	4604      	mov	r4, r0
 800c4e8:	4608      	mov	r0, r1
 800c4ea:	602b      	str	r3, [r5, #0]
 800c4ec:	f7f5 fbee 	bl	8001ccc <_sbrk>
 800c4f0:	1c43      	adds	r3, r0, #1
 800c4f2:	d102      	bne.n	800c4fa <_sbrk_r+0x1a>
 800c4f4:	682b      	ldr	r3, [r5, #0]
 800c4f6:	b103      	cbz	r3, 800c4fa <_sbrk_r+0x1a>
 800c4f8:	6023      	str	r3, [r4, #0]
 800c4fa:	bd38      	pop	{r3, r4, r5, pc}
 800c4fc:	2400061c 	.word	0x2400061c

0800c500 <memcpy>:
 800c500:	440a      	add	r2, r1
 800c502:	4291      	cmp	r1, r2
 800c504:	f100 33ff 	add.w	r3, r0, #4294967295
 800c508:	d100      	bne.n	800c50c <memcpy+0xc>
 800c50a:	4770      	bx	lr
 800c50c:	b510      	push	{r4, lr}
 800c50e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c512:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c516:	4291      	cmp	r1, r2
 800c518:	d1f9      	bne.n	800c50e <memcpy+0xe>
 800c51a:	bd10      	pop	{r4, pc}
 800c51c:	0000      	movs	r0, r0
	...

0800c520 <nan>:
 800c520:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c528 <nan+0x8>
 800c524:	4770      	bx	lr
 800c526:	bf00      	nop
 800c528:	00000000 	.word	0x00000000
 800c52c:	7ff80000 	.word	0x7ff80000

0800c530 <__assert_func>:
 800c530:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c532:	4614      	mov	r4, r2
 800c534:	461a      	mov	r2, r3
 800c536:	4b09      	ldr	r3, [pc, #36]	@ (800c55c <__assert_func+0x2c>)
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	4605      	mov	r5, r0
 800c53c:	68d8      	ldr	r0, [r3, #12]
 800c53e:	b954      	cbnz	r4, 800c556 <__assert_func+0x26>
 800c540:	4b07      	ldr	r3, [pc, #28]	@ (800c560 <__assert_func+0x30>)
 800c542:	461c      	mov	r4, r3
 800c544:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c548:	9100      	str	r1, [sp, #0]
 800c54a:	462b      	mov	r3, r5
 800c54c:	4905      	ldr	r1, [pc, #20]	@ (800c564 <__assert_func+0x34>)
 800c54e:	f000 fba7 	bl	800cca0 <fiprintf>
 800c552:	f000 fbb7 	bl	800ccc4 <abort>
 800c556:	4b04      	ldr	r3, [pc, #16]	@ (800c568 <__assert_func+0x38>)
 800c558:	e7f4      	b.n	800c544 <__assert_func+0x14>
 800c55a:	bf00      	nop
 800c55c:	2400001c 	.word	0x2400001c
 800c560:	0800d835 	.word	0x0800d835
 800c564:	0800d807 	.word	0x0800d807
 800c568:	0800d7fa 	.word	0x0800d7fa

0800c56c <_calloc_r>:
 800c56c:	b570      	push	{r4, r5, r6, lr}
 800c56e:	fba1 5402 	umull	r5, r4, r1, r2
 800c572:	b93c      	cbnz	r4, 800c584 <_calloc_r+0x18>
 800c574:	4629      	mov	r1, r5
 800c576:	f7fe fa15 	bl	800a9a4 <_malloc_r>
 800c57a:	4606      	mov	r6, r0
 800c57c:	b928      	cbnz	r0, 800c58a <_calloc_r+0x1e>
 800c57e:	2600      	movs	r6, #0
 800c580:	4630      	mov	r0, r6
 800c582:	bd70      	pop	{r4, r5, r6, pc}
 800c584:	220c      	movs	r2, #12
 800c586:	6002      	str	r2, [r0, #0]
 800c588:	e7f9      	b.n	800c57e <_calloc_r+0x12>
 800c58a:	462a      	mov	r2, r5
 800c58c:	4621      	mov	r1, r4
 800c58e:	f7fd fb30 	bl	8009bf2 <memset>
 800c592:	e7f5      	b.n	800c580 <_calloc_r+0x14>

0800c594 <rshift>:
 800c594:	6903      	ldr	r3, [r0, #16]
 800c596:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c59a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c59e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c5a2:	f100 0414 	add.w	r4, r0, #20
 800c5a6:	dd45      	ble.n	800c634 <rshift+0xa0>
 800c5a8:	f011 011f 	ands.w	r1, r1, #31
 800c5ac:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c5b0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c5b4:	d10c      	bne.n	800c5d0 <rshift+0x3c>
 800c5b6:	f100 0710 	add.w	r7, r0, #16
 800c5ba:	4629      	mov	r1, r5
 800c5bc:	42b1      	cmp	r1, r6
 800c5be:	d334      	bcc.n	800c62a <rshift+0x96>
 800c5c0:	1a9b      	subs	r3, r3, r2
 800c5c2:	009b      	lsls	r3, r3, #2
 800c5c4:	1eea      	subs	r2, r5, #3
 800c5c6:	4296      	cmp	r6, r2
 800c5c8:	bf38      	it	cc
 800c5ca:	2300      	movcc	r3, #0
 800c5cc:	4423      	add	r3, r4
 800c5ce:	e015      	b.n	800c5fc <rshift+0x68>
 800c5d0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c5d4:	f1c1 0820 	rsb	r8, r1, #32
 800c5d8:	40cf      	lsrs	r7, r1
 800c5da:	f105 0e04 	add.w	lr, r5, #4
 800c5de:	46a1      	mov	r9, r4
 800c5e0:	4576      	cmp	r6, lr
 800c5e2:	46f4      	mov	ip, lr
 800c5e4:	d815      	bhi.n	800c612 <rshift+0x7e>
 800c5e6:	1a9a      	subs	r2, r3, r2
 800c5e8:	0092      	lsls	r2, r2, #2
 800c5ea:	3a04      	subs	r2, #4
 800c5ec:	3501      	adds	r5, #1
 800c5ee:	42ae      	cmp	r6, r5
 800c5f0:	bf38      	it	cc
 800c5f2:	2200      	movcc	r2, #0
 800c5f4:	18a3      	adds	r3, r4, r2
 800c5f6:	50a7      	str	r7, [r4, r2]
 800c5f8:	b107      	cbz	r7, 800c5fc <rshift+0x68>
 800c5fa:	3304      	adds	r3, #4
 800c5fc:	1b1a      	subs	r2, r3, r4
 800c5fe:	42a3      	cmp	r3, r4
 800c600:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c604:	bf08      	it	eq
 800c606:	2300      	moveq	r3, #0
 800c608:	6102      	str	r2, [r0, #16]
 800c60a:	bf08      	it	eq
 800c60c:	6143      	streq	r3, [r0, #20]
 800c60e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c612:	f8dc c000 	ldr.w	ip, [ip]
 800c616:	fa0c fc08 	lsl.w	ip, ip, r8
 800c61a:	ea4c 0707 	orr.w	r7, ip, r7
 800c61e:	f849 7b04 	str.w	r7, [r9], #4
 800c622:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c626:	40cf      	lsrs	r7, r1
 800c628:	e7da      	b.n	800c5e0 <rshift+0x4c>
 800c62a:	f851 cb04 	ldr.w	ip, [r1], #4
 800c62e:	f847 cf04 	str.w	ip, [r7, #4]!
 800c632:	e7c3      	b.n	800c5bc <rshift+0x28>
 800c634:	4623      	mov	r3, r4
 800c636:	e7e1      	b.n	800c5fc <rshift+0x68>

0800c638 <__hexdig_fun>:
 800c638:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c63c:	2b09      	cmp	r3, #9
 800c63e:	d802      	bhi.n	800c646 <__hexdig_fun+0xe>
 800c640:	3820      	subs	r0, #32
 800c642:	b2c0      	uxtb	r0, r0
 800c644:	4770      	bx	lr
 800c646:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c64a:	2b05      	cmp	r3, #5
 800c64c:	d801      	bhi.n	800c652 <__hexdig_fun+0x1a>
 800c64e:	3847      	subs	r0, #71	@ 0x47
 800c650:	e7f7      	b.n	800c642 <__hexdig_fun+0xa>
 800c652:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c656:	2b05      	cmp	r3, #5
 800c658:	d801      	bhi.n	800c65e <__hexdig_fun+0x26>
 800c65a:	3827      	subs	r0, #39	@ 0x27
 800c65c:	e7f1      	b.n	800c642 <__hexdig_fun+0xa>
 800c65e:	2000      	movs	r0, #0
 800c660:	4770      	bx	lr
	...

0800c664 <__gethex>:
 800c664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c668:	b085      	sub	sp, #20
 800c66a:	468a      	mov	sl, r1
 800c66c:	9302      	str	r3, [sp, #8]
 800c66e:	680b      	ldr	r3, [r1, #0]
 800c670:	9001      	str	r0, [sp, #4]
 800c672:	4690      	mov	r8, r2
 800c674:	1c9c      	adds	r4, r3, #2
 800c676:	46a1      	mov	r9, r4
 800c678:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c67c:	2830      	cmp	r0, #48	@ 0x30
 800c67e:	d0fa      	beq.n	800c676 <__gethex+0x12>
 800c680:	eba9 0303 	sub.w	r3, r9, r3
 800c684:	f1a3 0b02 	sub.w	fp, r3, #2
 800c688:	f7ff ffd6 	bl	800c638 <__hexdig_fun>
 800c68c:	4605      	mov	r5, r0
 800c68e:	2800      	cmp	r0, #0
 800c690:	d168      	bne.n	800c764 <__gethex+0x100>
 800c692:	49a0      	ldr	r1, [pc, #640]	@ (800c914 <__gethex+0x2b0>)
 800c694:	2201      	movs	r2, #1
 800c696:	4648      	mov	r0, r9
 800c698:	f7ff ff10 	bl	800c4bc <strncmp>
 800c69c:	4607      	mov	r7, r0
 800c69e:	2800      	cmp	r0, #0
 800c6a0:	d167      	bne.n	800c772 <__gethex+0x10e>
 800c6a2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c6a6:	4626      	mov	r6, r4
 800c6a8:	f7ff ffc6 	bl	800c638 <__hexdig_fun>
 800c6ac:	2800      	cmp	r0, #0
 800c6ae:	d062      	beq.n	800c776 <__gethex+0x112>
 800c6b0:	4623      	mov	r3, r4
 800c6b2:	7818      	ldrb	r0, [r3, #0]
 800c6b4:	2830      	cmp	r0, #48	@ 0x30
 800c6b6:	4699      	mov	r9, r3
 800c6b8:	f103 0301 	add.w	r3, r3, #1
 800c6bc:	d0f9      	beq.n	800c6b2 <__gethex+0x4e>
 800c6be:	f7ff ffbb 	bl	800c638 <__hexdig_fun>
 800c6c2:	fab0 f580 	clz	r5, r0
 800c6c6:	096d      	lsrs	r5, r5, #5
 800c6c8:	f04f 0b01 	mov.w	fp, #1
 800c6cc:	464a      	mov	r2, r9
 800c6ce:	4616      	mov	r6, r2
 800c6d0:	3201      	adds	r2, #1
 800c6d2:	7830      	ldrb	r0, [r6, #0]
 800c6d4:	f7ff ffb0 	bl	800c638 <__hexdig_fun>
 800c6d8:	2800      	cmp	r0, #0
 800c6da:	d1f8      	bne.n	800c6ce <__gethex+0x6a>
 800c6dc:	498d      	ldr	r1, [pc, #564]	@ (800c914 <__gethex+0x2b0>)
 800c6de:	2201      	movs	r2, #1
 800c6e0:	4630      	mov	r0, r6
 800c6e2:	f7ff feeb 	bl	800c4bc <strncmp>
 800c6e6:	2800      	cmp	r0, #0
 800c6e8:	d13f      	bne.n	800c76a <__gethex+0x106>
 800c6ea:	b944      	cbnz	r4, 800c6fe <__gethex+0x9a>
 800c6ec:	1c74      	adds	r4, r6, #1
 800c6ee:	4622      	mov	r2, r4
 800c6f0:	4616      	mov	r6, r2
 800c6f2:	3201      	adds	r2, #1
 800c6f4:	7830      	ldrb	r0, [r6, #0]
 800c6f6:	f7ff ff9f 	bl	800c638 <__hexdig_fun>
 800c6fa:	2800      	cmp	r0, #0
 800c6fc:	d1f8      	bne.n	800c6f0 <__gethex+0x8c>
 800c6fe:	1ba4      	subs	r4, r4, r6
 800c700:	00a7      	lsls	r7, r4, #2
 800c702:	7833      	ldrb	r3, [r6, #0]
 800c704:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c708:	2b50      	cmp	r3, #80	@ 0x50
 800c70a:	d13e      	bne.n	800c78a <__gethex+0x126>
 800c70c:	7873      	ldrb	r3, [r6, #1]
 800c70e:	2b2b      	cmp	r3, #43	@ 0x2b
 800c710:	d033      	beq.n	800c77a <__gethex+0x116>
 800c712:	2b2d      	cmp	r3, #45	@ 0x2d
 800c714:	d034      	beq.n	800c780 <__gethex+0x11c>
 800c716:	1c71      	adds	r1, r6, #1
 800c718:	2400      	movs	r4, #0
 800c71a:	7808      	ldrb	r0, [r1, #0]
 800c71c:	f7ff ff8c 	bl	800c638 <__hexdig_fun>
 800c720:	1e43      	subs	r3, r0, #1
 800c722:	b2db      	uxtb	r3, r3
 800c724:	2b18      	cmp	r3, #24
 800c726:	d830      	bhi.n	800c78a <__gethex+0x126>
 800c728:	f1a0 0210 	sub.w	r2, r0, #16
 800c72c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c730:	f7ff ff82 	bl	800c638 <__hexdig_fun>
 800c734:	f100 3cff 	add.w	ip, r0, #4294967295
 800c738:	fa5f fc8c 	uxtb.w	ip, ip
 800c73c:	f1bc 0f18 	cmp.w	ip, #24
 800c740:	f04f 030a 	mov.w	r3, #10
 800c744:	d91e      	bls.n	800c784 <__gethex+0x120>
 800c746:	b104      	cbz	r4, 800c74a <__gethex+0xe6>
 800c748:	4252      	negs	r2, r2
 800c74a:	4417      	add	r7, r2
 800c74c:	f8ca 1000 	str.w	r1, [sl]
 800c750:	b1ed      	cbz	r5, 800c78e <__gethex+0x12a>
 800c752:	f1bb 0f00 	cmp.w	fp, #0
 800c756:	bf0c      	ite	eq
 800c758:	2506      	moveq	r5, #6
 800c75a:	2500      	movne	r5, #0
 800c75c:	4628      	mov	r0, r5
 800c75e:	b005      	add	sp, #20
 800c760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c764:	2500      	movs	r5, #0
 800c766:	462c      	mov	r4, r5
 800c768:	e7b0      	b.n	800c6cc <__gethex+0x68>
 800c76a:	2c00      	cmp	r4, #0
 800c76c:	d1c7      	bne.n	800c6fe <__gethex+0x9a>
 800c76e:	4627      	mov	r7, r4
 800c770:	e7c7      	b.n	800c702 <__gethex+0x9e>
 800c772:	464e      	mov	r6, r9
 800c774:	462f      	mov	r7, r5
 800c776:	2501      	movs	r5, #1
 800c778:	e7c3      	b.n	800c702 <__gethex+0x9e>
 800c77a:	2400      	movs	r4, #0
 800c77c:	1cb1      	adds	r1, r6, #2
 800c77e:	e7cc      	b.n	800c71a <__gethex+0xb6>
 800c780:	2401      	movs	r4, #1
 800c782:	e7fb      	b.n	800c77c <__gethex+0x118>
 800c784:	fb03 0002 	mla	r0, r3, r2, r0
 800c788:	e7ce      	b.n	800c728 <__gethex+0xc4>
 800c78a:	4631      	mov	r1, r6
 800c78c:	e7de      	b.n	800c74c <__gethex+0xe8>
 800c78e:	eba6 0309 	sub.w	r3, r6, r9
 800c792:	3b01      	subs	r3, #1
 800c794:	4629      	mov	r1, r5
 800c796:	2b07      	cmp	r3, #7
 800c798:	dc0a      	bgt.n	800c7b0 <__gethex+0x14c>
 800c79a:	9801      	ldr	r0, [sp, #4]
 800c79c:	f7fe f98e 	bl	800aabc <_Balloc>
 800c7a0:	4604      	mov	r4, r0
 800c7a2:	b940      	cbnz	r0, 800c7b6 <__gethex+0x152>
 800c7a4:	4b5c      	ldr	r3, [pc, #368]	@ (800c918 <__gethex+0x2b4>)
 800c7a6:	4602      	mov	r2, r0
 800c7a8:	21e4      	movs	r1, #228	@ 0xe4
 800c7aa:	485c      	ldr	r0, [pc, #368]	@ (800c91c <__gethex+0x2b8>)
 800c7ac:	f7ff fec0 	bl	800c530 <__assert_func>
 800c7b0:	3101      	adds	r1, #1
 800c7b2:	105b      	asrs	r3, r3, #1
 800c7b4:	e7ef      	b.n	800c796 <__gethex+0x132>
 800c7b6:	f100 0a14 	add.w	sl, r0, #20
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	4655      	mov	r5, sl
 800c7be:	469b      	mov	fp, r3
 800c7c0:	45b1      	cmp	r9, r6
 800c7c2:	d337      	bcc.n	800c834 <__gethex+0x1d0>
 800c7c4:	f845 bb04 	str.w	fp, [r5], #4
 800c7c8:	eba5 050a 	sub.w	r5, r5, sl
 800c7cc:	10ad      	asrs	r5, r5, #2
 800c7ce:	6125      	str	r5, [r4, #16]
 800c7d0:	4658      	mov	r0, fp
 800c7d2:	f7fe fa65 	bl	800aca0 <__hi0bits>
 800c7d6:	016d      	lsls	r5, r5, #5
 800c7d8:	f8d8 6000 	ldr.w	r6, [r8]
 800c7dc:	1a2d      	subs	r5, r5, r0
 800c7de:	42b5      	cmp	r5, r6
 800c7e0:	dd54      	ble.n	800c88c <__gethex+0x228>
 800c7e2:	1bad      	subs	r5, r5, r6
 800c7e4:	4629      	mov	r1, r5
 800c7e6:	4620      	mov	r0, r4
 800c7e8:	f7fe fdf6 	bl	800b3d8 <__any_on>
 800c7ec:	4681      	mov	r9, r0
 800c7ee:	b178      	cbz	r0, 800c810 <__gethex+0x1ac>
 800c7f0:	1e6b      	subs	r3, r5, #1
 800c7f2:	1159      	asrs	r1, r3, #5
 800c7f4:	f003 021f 	and.w	r2, r3, #31
 800c7f8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c7fc:	f04f 0901 	mov.w	r9, #1
 800c800:	fa09 f202 	lsl.w	r2, r9, r2
 800c804:	420a      	tst	r2, r1
 800c806:	d003      	beq.n	800c810 <__gethex+0x1ac>
 800c808:	454b      	cmp	r3, r9
 800c80a:	dc36      	bgt.n	800c87a <__gethex+0x216>
 800c80c:	f04f 0902 	mov.w	r9, #2
 800c810:	4629      	mov	r1, r5
 800c812:	4620      	mov	r0, r4
 800c814:	f7ff febe 	bl	800c594 <rshift>
 800c818:	442f      	add	r7, r5
 800c81a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c81e:	42bb      	cmp	r3, r7
 800c820:	da42      	bge.n	800c8a8 <__gethex+0x244>
 800c822:	9801      	ldr	r0, [sp, #4]
 800c824:	4621      	mov	r1, r4
 800c826:	f7fe f989 	bl	800ab3c <_Bfree>
 800c82a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c82c:	2300      	movs	r3, #0
 800c82e:	6013      	str	r3, [r2, #0]
 800c830:	25a3      	movs	r5, #163	@ 0xa3
 800c832:	e793      	b.n	800c75c <__gethex+0xf8>
 800c834:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c838:	2a2e      	cmp	r2, #46	@ 0x2e
 800c83a:	d012      	beq.n	800c862 <__gethex+0x1fe>
 800c83c:	2b20      	cmp	r3, #32
 800c83e:	d104      	bne.n	800c84a <__gethex+0x1e6>
 800c840:	f845 bb04 	str.w	fp, [r5], #4
 800c844:	f04f 0b00 	mov.w	fp, #0
 800c848:	465b      	mov	r3, fp
 800c84a:	7830      	ldrb	r0, [r6, #0]
 800c84c:	9303      	str	r3, [sp, #12]
 800c84e:	f7ff fef3 	bl	800c638 <__hexdig_fun>
 800c852:	9b03      	ldr	r3, [sp, #12]
 800c854:	f000 000f 	and.w	r0, r0, #15
 800c858:	4098      	lsls	r0, r3
 800c85a:	ea4b 0b00 	orr.w	fp, fp, r0
 800c85e:	3304      	adds	r3, #4
 800c860:	e7ae      	b.n	800c7c0 <__gethex+0x15c>
 800c862:	45b1      	cmp	r9, r6
 800c864:	d8ea      	bhi.n	800c83c <__gethex+0x1d8>
 800c866:	492b      	ldr	r1, [pc, #172]	@ (800c914 <__gethex+0x2b0>)
 800c868:	9303      	str	r3, [sp, #12]
 800c86a:	2201      	movs	r2, #1
 800c86c:	4630      	mov	r0, r6
 800c86e:	f7ff fe25 	bl	800c4bc <strncmp>
 800c872:	9b03      	ldr	r3, [sp, #12]
 800c874:	2800      	cmp	r0, #0
 800c876:	d1e1      	bne.n	800c83c <__gethex+0x1d8>
 800c878:	e7a2      	b.n	800c7c0 <__gethex+0x15c>
 800c87a:	1ea9      	subs	r1, r5, #2
 800c87c:	4620      	mov	r0, r4
 800c87e:	f7fe fdab 	bl	800b3d8 <__any_on>
 800c882:	2800      	cmp	r0, #0
 800c884:	d0c2      	beq.n	800c80c <__gethex+0x1a8>
 800c886:	f04f 0903 	mov.w	r9, #3
 800c88a:	e7c1      	b.n	800c810 <__gethex+0x1ac>
 800c88c:	da09      	bge.n	800c8a2 <__gethex+0x23e>
 800c88e:	1b75      	subs	r5, r6, r5
 800c890:	4621      	mov	r1, r4
 800c892:	9801      	ldr	r0, [sp, #4]
 800c894:	462a      	mov	r2, r5
 800c896:	f7fe fb69 	bl	800af6c <__lshift>
 800c89a:	1b7f      	subs	r7, r7, r5
 800c89c:	4604      	mov	r4, r0
 800c89e:	f100 0a14 	add.w	sl, r0, #20
 800c8a2:	f04f 0900 	mov.w	r9, #0
 800c8a6:	e7b8      	b.n	800c81a <__gethex+0x1b6>
 800c8a8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c8ac:	42bd      	cmp	r5, r7
 800c8ae:	dd6f      	ble.n	800c990 <__gethex+0x32c>
 800c8b0:	1bed      	subs	r5, r5, r7
 800c8b2:	42ae      	cmp	r6, r5
 800c8b4:	dc34      	bgt.n	800c920 <__gethex+0x2bc>
 800c8b6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c8ba:	2b02      	cmp	r3, #2
 800c8bc:	d022      	beq.n	800c904 <__gethex+0x2a0>
 800c8be:	2b03      	cmp	r3, #3
 800c8c0:	d024      	beq.n	800c90c <__gethex+0x2a8>
 800c8c2:	2b01      	cmp	r3, #1
 800c8c4:	d115      	bne.n	800c8f2 <__gethex+0x28e>
 800c8c6:	42ae      	cmp	r6, r5
 800c8c8:	d113      	bne.n	800c8f2 <__gethex+0x28e>
 800c8ca:	2e01      	cmp	r6, #1
 800c8cc:	d10b      	bne.n	800c8e6 <__gethex+0x282>
 800c8ce:	9a02      	ldr	r2, [sp, #8]
 800c8d0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c8d4:	6013      	str	r3, [r2, #0]
 800c8d6:	2301      	movs	r3, #1
 800c8d8:	6123      	str	r3, [r4, #16]
 800c8da:	f8ca 3000 	str.w	r3, [sl]
 800c8de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c8e0:	2562      	movs	r5, #98	@ 0x62
 800c8e2:	601c      	str	r4, [r3, #0]
 800c8e4:	e73a      	b.n	800c75c <__gethex+0xf8>
 800c8e6:	1e71      	subs	r1, r6, #1
 800c8e8:	4620      	mov	r0, r4
 800c8ea:	f7fe fd75 	bl	800b3d8 <__any_on>
 800c8ee:	2800      	cmp	r0, #0
 800c8f0:	d1ed      	bne.n	800c8ce <__gethex+0x26a>
 800c8f2:	9801      	ldr	r0, [sp, #4]
 800c8f4:	4621      	mov	r1, r4
 800c8f6:	f7fe f921 	bl	800ab3c <_Bfree>
 800c8fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c8fc:	2300      	movs	r3, #0
 800c8fe:	6013      	str	r3, [r2, #0]
 800c900:	2550      	movs	r5, #80	@ 0x50
 800c902:	e72b      	b.n	800c75c <__gethex+0xf8>
 800c904:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c906:	2b00      	cmp	r3, #0
 800c908:	d1f3      	bne.n	800c8f2 <__gethex+0x28e>
 800c90a:	e7e0      	b.n	800c8ce <__gethex+0x26a>
 800c90c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d1dd      	bne.n	800c8ce <__gethex+0x26a>
 800c912:	e7ee      	b.n	800c8f2 <__gethex+0x28e>
 800c914:	0800d688 	.word	0x0800d688
 800c918:	0800d521 	.word	0x0800d521
 800c91c:	0800d836 	.word	0x0800d836
 800c920:	1e6f      	subs	r7, r5, #1
 800c922:	f1b9 0f00 	cmp.w	r9, #0
 800c926:	d130      	bne.n	800c98a <__gethex+0x326>
 800c928:	b127      	cbz	r7, 800c934 <__gethex+0x2d0>
 800c92a:	4639      	mov	r1, r7
 800c92c:	4620      	mov	r0, r4
 800c92e:	f7fe fd53 	bl	800b3d8 <__any_on>
 800c932:	4681      	mov	r9, r0
 800c934:	117a      	asrs	r2, r7, #5
 800c936:	2301      	movs	r3, #1
 800c938:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c93c:	f007 071f 	and.w	r7, r7, #31
 800c940:	40bb      	lsls	r3, r7
 800c942:	4213      	tst	r3, r2
 800c944:	4629      	mov	r1, r5
 800c946:	4620      	mov	r0, r4
 800c948:	bf18      	it	ne
 800c94a:	f049 0902 	orrne.w	r9, r9, #2
 800c94e:	f7ff fe21 	bl	800c594 <rshift>
 800c952:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c956:	1b76      	subs	r6, r6, r5
 800c958:	2502      	movs	r5, #2
 800c95a:	f1b9 0f00 	cmp.w	r9, #0
 800c95e:	d047      	beq.n	800c9f0 <__gethex+0x38c>
 800c960:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c964:	2b02      	cmp	r3, #2
 800c966:	d015      	beq.n	800c994 <__gethex+0x330>
 800c968:	2b03      	cmp	r3, #3
 800c96a:	d017      	beq.n	800c99c <__gethex+0x338>
 800c96c:	2b01      	cmp	r3, #1
 800c96e:	d109      	bne.n	800c984 <__gethex+0x320>
 800c970:	f019 0f02 	tst.w	r9, #2
 800c974:	d006      	beq.n	800c984 <__gethex+0x320>
 800c976:	f8da 3000 	ldr.w	r3, [sl]
 800c97a:	ea49 0903 	orr.w	r9, r9, r3
 800c97e:	f019 0f01 	tst.w	r9, #1
 800c982:	d10e      	bne.n	800c9a2 <__gethex+0x33e>
 800c984:	f045 0510 	orr.w	r5, r5, #16
 800c988:	e032      	b.n	800c9f0 <__gethex+0x38c>
 800c98a:	f04f 0901 	mov.w	r9, #1
 800c98e:	e7d1      	b.n	800c934 <__gethex+0x2d0>
 800c990:	2501      	movs	r5, #1
 800c992:	e7e2      	b.n	800c95a <__gethex+0x2f6>
 800c994:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c996:	f1c3 0301 	rsb	r3, r3, #1
 800c99a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c99c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d0f0      	beq.n	800c984 <__gethex+0x320>
 800c9a2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c9a6:	f104 0314 	add.w	r3, r4, #20
 800c9aa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c9ae:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c9b2:	f04f 0c00 	mov.w	ip, #0
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	f853 2b04 	ldr.w	r2, [r3], #4
 800c9bc:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c9c0:	d01b      	beq.n	800c9fa <__gethex+0x396>
 800c9c2:	3201      	adds	r2, #1
 800c9c4:	6002      	str	r2, [r0, #0]
 800c9c6:	2d02      	cmp	r5, #2
 800c9c8:	f104 0314 	add.w	r3, r4, #20
 800c9cc:	d13c      	bne.n	800ca48 <__gethex+0x3e4>
 800c9ce:	f8d8 2000 	ldr.w	r2, [r8]
 800c9d2:	3a01      	subs	r2, #1
 800c9d4:	42b2      	cmp	r2, r6
 800c9d6:	d109      	bne.n	800c9ec <__gethex+0x388>
 800c9d8:	1171      	asrs	r1, r6, #5
 800c9da:	2201      	movs	r2, #1
 800c9dc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c9e0:	f006 061f 	and.w	r6, r6, #31
 800c9e4:	fa02 f606 	lsl.w	r6, r2, r6
 800c9e8:	421e      	tst	r6, r3
 800c9ea:	d13a      	bne.n	800ca62 <__gethex+0x3fe>
 800c9ec:	f045 0520 	orr.w	r5, r5, #32
 800c9f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c9f2:	601c      	str	r4, [r3, #0]
 800c9f4:	9b02      	ldr	r3, [sp, #8]
 800c9f6:	601f      	str	r7, [r3, #0]
 800c9f8:	e6b0      	b.n	800c75c <__gethex+0xf8>
 800c9fa:	4299      	cmp	r1, r3
 800c9fc:	f843 cc04 	str.w	ip, [r3, #-4]
 800ca00:	d8d9      	bhi.n	800c9b6 <__gethex+0x352>
 800ca02:	68a3      	ldr	r3, [r4, #8]
 800ca04:	459b      	cmp	fp, r3
 800ca06:	db17      	blt.n	800ca38 <__gethex+0x3d4>
 800ca08:	6861      	ldr	r1, [r4, #4]
 800ca0a:	9801      	ldr	r0, [sp, #4]
 800ca0c:	3101      	adds	r1, #1
 800ca0e:	f7fe f855 	bl	800aabc <_Balloc>
 800ca12:	4681      	mov	r9, r0
 800ca14:	b918      	cbnz	r0, 800ca1e <__gethex+0x3ba>
 800ca16:	4b1a      	ldr	r3, [pc, #104]	@ (800ca80 <__gethex+0x41c>)
 800ca18:	4602      	mov	r2, r0
 800ca1a:	2184      	movs	r1, #132	@ 0x84
 800ca1c:	e6c5      	b.n	800c7aa <__gethex+0x146>
 800ca1e:	6922      	ldr	r2, [r4, #16]
 800ca20:	3202      	adds	r2, #2
 800ca22:	f104 010c 	add.w	r1, r4, #12
 800ca26:	0092      	lsls	r2, r2, #2
 800ca28:	300c      	adds	r0, #12
 800ca2a:	f7ff fd69 	bl	800c500 <memcpy>
 800ca2e:	4621      	mov	r1, r4
 800ca30:	9801      	ldr	r0, [sp, #4]
 800ca32:	f7fe f883 	bl	800ab3c <_Bfree>
 800ca36:	464c      	mov	r4, r9
 800ca38:	6923      	ldr	r3, [r4, #16]
 800ca3a:	1c5a      	adds	r2, r3, #1
 800ca3c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ca40:	6122      	str	r2, [r4, #16]
 800ca42:	2201      	movs	r2, #1
 800ca44:	615a      	str	r2, [r3, #20]
 800ca46:	e7be      	b.n	800c9c6 <__gethex+0x362>
 800ca48:	6922      	ldr	r2, [r4, #16]
 800ca4a:	455a      	cmp	r2, fp
 800ca4c:	dd0b      	ble.n	800ca66 <__gethex+0x402>
 800ca4e:	2101      	movs	r1, #1
 800ca50:	4620      	mov	r0, r4
 800ca52:	f7ff fd9f 	bl	800c594 <rshift>
 800ca56:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ca5a:	3701      	adds	r7, #1
 800ca5c:	42bb      	cmp	r3, r7
 800ca5e:	f6ff aee0 	blt.w	800c822 <__gethex+0x1be>
 800ca62:	2501      	movs	r5, #1
 800ca64:	e7c2      	b.n	800c9ec <__gethex+0x388>
 800ca66:	f016 061f 	ands.w	r6, r6, #31
 800ca6a:	d0fa      	beq.n	800ca62 <__gethex+0x3fe>
 800ca6c:	4453      	add	r3, sl
 800ca6e:	f1c6 0620 	rsb	r6, r6, #32
 800ca72:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ca76:	f7fe f913 	bl	800aca0 <__hi0bits>
 800ca7a:	42b0      	cmp	r0, r6
 800ca7c:	dbe7      	blt.n	800ca4e <__gethex+0x3ea>
 800ca7e:	e7f0      	b.n	800ca62 <__gethex+0x3fe>
 800ca80:	0800d521 	.word	0x0800d521

0800ca84 <L_shift>:
 800ca84:	f1c2 0208 	rsb	r2, r2, #8
 800ca88:	0092      	lsls	r2, r2, #2
 800ca8a:	b570      	push	{r4, r5, r6, lr}
 800ca8c:	f1c2 0620 	rsb	r6, r2, #32
 800ca90:	6843      	ldr	r3, [r0, #4]
 800ca92:	6804      	ldr	r4, [r0, #0]
 800ca94:	fa03 f506 	lsl.w	r5, r3, r6
 800ca98:	432c      	orrs	r4, r5
 800ca9a:	40d3      	lsrs	r3, r2
 800ca9c:	6004      	str	r4, [r0, #0]
 800ca9e:	f840 3f04 	str.w	r3, [r0, #4]!
 800caa2:	4288      	cmp	r0, r1
 800caa4:	d3f4      	bcc.n	800ca90 <L_shift+0xc>
 800caa6:	bd70      	pop	{r4, r5, r6, pc}

0800caa8 <__match>:
 800caa8:	b530      	push	{r4, r5, lr}
 800caaa:	6803      	ldr	r3, [r0, #0]
 800caac:	3301      	adds	r3, #1
 800caae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cab2:	b914      	cbnz	r4, 800caba <__match+0x12>
 800cab4:	6003      	str	r3, [r0, #0]
 800cab6:	2001      	movs	r0, #1
 800cab8:	bd30      	pop	{r4, r5, pc}
 800caba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cabe:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800cac2:	2d19      	cmp	r5, #25
 800cac4:	bf98      	it	ls
 800cac6:	3220      	addls	r2, #32
 800cac8:	42a2      	cmp	r2, r4
 800caca:	d0f0      	beq.n	800caae <__match+0x6>
 800cacc:	2000      	movs	r0, #0
 800cace:	e7f3      	b.n	800cab8 <__match+0x10>

0800cad0 <__hexnan>:
 800cad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cad4:	680b      	ldr	r3, [r1, #0]
 800cad6:	6801      	ldr	r1, [r0, #0]
 800cad8:	115e      	asrs	r6, r3, #5
 800cada:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cade:	f013 031f 	ands.w	r3, r3, #31
 800cae2:	b087      	sub	sp, #28
 800cae4:	bf18      	it	ne
 800cae6:	3604      	addne	r6, #4
 800cae8:	2500      	movs	r5, #0
 800caea:	1f37      	subs	r7, r6, #4
 800caec:	4682      	mov	sl, r0
 800caee:	4690      	mov	r8, r2
 800caf0:	9301      	str	r3, [sp, #4]
 800caf2:	f846 5c04 	str.w	r5, [r6, #-4]
 800caf6:	46b9      	mov	r9, r7
 800caf8:	463c      	mov	r4, r7
 800cafa:	9502      	str	r5, [sp, #8]
 800cafc:	46ab      	mov	fp, r5
 800cafe:	784a      	ldrb	r2, [r1, #1]
 800cb00:	1c4b      	adds	r3, r1, #1
 800cb02:	9303      	str	r3, [sp, #12]
 800cb04:	b342      	cbz	r2, 800cb58 <__hexnan+0x88>
 800cb06:	4610      	mov	r0, r2
 800cb08:	9105      	str	r1, [sp, #20]
 800cb0a:	9204      	str	r2, [sp, #16]
 800cb0c:	f7ff fd94 	bl	800c638 <__hexdig_fun>
 800cb10:	2800      	cmp	r0, #0
 800cb12:	d151      	bne.n	800cbb8 <__hexnan+0xe8>
 800cb14:	9a04      	ldr	r2, [sp, #16]
 800cb16:	9905      	ldr	r1, [sp, #20]
 800cb18:	2a20      	cmp	r2, #32
 800cb1a:	d818      	bhi.n	800cb4e <__hexnan+0x7e>
 800cb1c:	9b02      	ldr	r3, [sp, #8]
 800cb1e:	459b      	cmp	fp, r3
 800cb20:	dd13      	ble.n	800cb4a <__hexnan+0x7a>
 800cb22:	454c      	cmp	r4, r9
 800cb24:	d206      	bcs.n	800cb34 <__hexnan+0x64>
 800cb26:	2d07      	cmp	r5, #7
 800cb28:	dc04      	bgt.n	800cb34 <__hexnan+0x64>
 800cb2a:	462a      	mov	r2, r5
 800cb2c:	4649      	mov	r1, r9
 800cb2e:	4620      	mov	r0, r4
 800cb30:	f7ff ffa8 	bl	800ca84 <L_shift>
 800cb34:	4544      	cmp	r4, r8
 800cb36:	d952      	bls.n	800cbde <__hexnan+0x10e>
 800cb38:	2300      	movs	r3, #0
 800cb3a:	f1a4 0904 	sub.w	r9, r4, #4
 800cb3e:	f844 3c04 	str.w	r3, [r4, #-4]
 800cb42:	f8cd b008 	str.w	fp, [sp, #8]
 800cb46:	464c      	mov	r4, r9
 800cb48:	461d      	mov	r5, r3
 800cb4a:	9903      	ldr	r1, [sp, #12]
 800cb4c:	e7d7      	b.n	800cafe <__hexnan+0x2e>
 800cb4e:	2a29      	cmp	r2, #41	@ 0x29
 800cb50:	d157      	bne.n	800cc02 <__hexnan+0x132>
 800cb52:	3102      	adds	r1, #2
 800cb54:	f8ca 1000 	str.w	r1, [sl]
 800cb58:	f1bb 0f00 	cmp.w	fp, #0
 800cb5c:	d051      	beq.n	800cc02 <__hexnan+0x132>
 800cb5e:	454c      	cmp	r4, r9
 800cb60:	d206      	bcs.n	800cb70 <__hexnan+0xa0>
 800cb62:	2d07      	cmp	r5, #7
 800cb64:	dc04      	bgt.n	800cb70 <__hexnan+0xa0>
 800cb66:	462a      	mov	r2, r5
 800cb68:	4649      	mov	r1, r9
 800cb6a:	4620      	mov	r0, r4
 800cb6c:	f7ff ff8a 	bl	800ca84 <L_shift>
 800cb70:	4544      	cmp	r4, r8
 800cb72:	d936      	bls.n	800cbe2 <__hexnan+0x112>
 800cb74:	f1a8 0204 	sub.w	r2, r8, #4
 800cb78:	4623      	mov	r3, r4
 800cb7a:	f853 1b04 	ldr.w	r1, [r3], #4
 800cb7e:	f842 1f04 	str.w	r1, [r2, #4]!
 800cb82:	429f      	cmp	r7, r3
 800cb84:	d2f9      	bcs.n	800cb7a <__hexnan+0xaa>
 800cb86:	1b3b      	subs	r3, r7, r4
 800cb88:	f023 0303 	bic.w	r3, r3, #3
 800cb8c:	3304      	adds	r3, #4
 800cb8e:	3401      	adds	r4, #1
 800cb90:	3e03      	subs	r6, #3
 800cb92:	42b4      	cmp	r4, r6
 800cb94:	bf88      	it	hi
 800cb96:	2304      	movhi	r3, #4
 800cb98:	4443      	add	r3, r8
 800cb9a:	2200      	movs	r2, #0
 800cb9c:	f843 2b04 	str.w	r2, [r3], #4
 800cba0:	429f      	cmp	r7, r3
 800cba2:	d2fb      	bcs.n	800cb9c <__hexnan+0xcc>
 800cba4:	683b      	ldr	r3, [r7, #0]
 800cba6:	b91b      	cbnz	r3, 800cbb0 <__hexnan+0xe0>
 800cba8:	4547      	cmp	r7, r8
 800cbaa:	d128      	bne.n	800cbfe <__hexnan+0x12e>
 800cbac:	2301      	movs	r3, #1
 800cbae:	603b      	str	r3, [r7, #0]
 800cbb0:	2005      	movs	r0, #5
 800cbb2:	b007      	add	sp, #28
 800cbb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbb8:	3501      	adds	r5, #1
 800cbba:	2d08      	cmp	r5, #8
 800cbbc:	f10b 0b01 	add.w	fp, fp, #1
 800cbc0:	dd06      	ble.n	800cbd0 <__hexnan+0x100>
 800cbc2:	4544      	cmp	r4, r8
 800cbc4:	d9c1      	bls.n	800cb4a <__hexnan+0x7a>
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	f844 3c04 	str.w	r3, [r4, #-4]
 800cbcc:	2501      	movs	r5, #1
 800cbce:	3c04      	subs	r4, #4
 800cbd0:	6822      	ldr	r2, [r4, #0]
 800cbd2:	f000 000f 	and.w	r0, r0, #15
 800cbd6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800cbda:	6020      	str	r0, [r4, #0]
 800cbdc:	e7b5      	b.n	800cb4a <__hexnan+0x7a>
 800cbde:	2508      	movs	r5, #8
 800cbe0:	e7b3      	b.n	800cb4a <__hexnan+0x7a>
 800cbe2:	9b01      	ldr	r3, [sp, #4]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d0dd      	beq.n	800cba4 <__hexnan+0xd4>
 800cbe8:	f1c3 0320 	rsb	r3, r3, #32
 800cbec:	f04f 32ff 	mov.w	r2, #4294967295
 800cbf0:	40da      	lsrs	r2, r3
 800cbf2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800cbf6:	4013      	ands	r3, r2
 800cbf8:	f846 3c04 	str.w	r3, [r6, #-4]
 800cbfc:	e7d2      	b.n	800cba4 <__hexnan+0xd4>
 800cbfe:	3f04      	subs	r7, #4
 800cc00:	e7d0      	b.n	800cba4 <__hexnan+0xd4>
 800cc02:	2004      	movs	r0, #4
 800cc04:	e7d5      	b.n	800cbb2 <__hexnan+0xe2>

0800cc06 <__ascii_mbtowc>:
 800cc06:	b082      	sub	sp, #8
 800cc08:	b901      	cbnz	r1, 800cc0c <__ascii_mbtowc+0x6>
 800cc0a:	a901      	add	r1, sp, #4
 800cc0c:	b142      	cbz	r2, 800cc20 <__ascii_mbtowc+0x1a>
 800cc0e:	b14b      	cbz	r3, 800cc24 <__ascii_mbtowc+0x1e>
 800cc10:	7813      	ldrb	r3, [r2, #0]
 800cc12:	600b      	str	r3, [r1, #0]
 800cc14:	7812      	ldrb	r2, [r2, #0]
 800cc16:	1e10      	subs	r0, r2, #0
 800cc18:	bf18      	it	ne
 800cc1a:	2001      	movne	r0, #1
 800cc1c:	b002      	add	sp, #8
 800cc1e:	4770      	bx	lr
 800cc20:	4610      	mov	r0, r2
 800cc22:	e7fb      	b.n	800cc1c <__ascii_mbtowc+0x16>
 800cc24:	f06f 0001 	mvn.w	r0, #1
 800cc28:	e7f8      	b.n	800cc1c <__ascii_mbtowc+0x16>

0800cc2a <_realloc_r>:
 800cc2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc2e:	4680      	mov	r8, r0
 800cc30:	4615      	mov	r5, r2
 800cc32:	460c      	mov	r4, r1
 800cc34:	b921      	cbnz	r1, 800cc40 <_realloc_r+0x16>
 800cc36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cc3a:	4611      	mov	r1, r2
 800cc3c:	f7fd beb2 	b.w	800a9a4 <_malloc_r>
 800cc40:	b92a      	cbnz	r2, 800cc4e <_realloc_r+0x24>
 800cc42:	f7fd fe3b 	bl	800a8bc <_free_r>
 800cc46:	2400      	movs	r4, #0
 800cc48:	4620      	mov	r0, r4
 800cc4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc4e:	f000 f840 	bl	800ccd2 <_malloc_usable_size_r>
 800cc52:	4285      	cmp	r5, r0
 800cc54:	4606      	mov	r6, r0
 800cc56:	d802      	bhi.n	800cc5e <_realloc_r+0x34>
 800cc58:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800cc5c:	d8f4      	bhi.n	800cc48 <_realloc_r+0x1e>
 800cc5e:	4629      	mov	r1, r5
 800cc60:	4640      	mov	r0, r8
 800cc62:	f7fd fe9f 	bl	800a9a4 <_malloc_r>
 800cc66:	4607      	mov	r7, r0
 800cc68:	2800      	cmp	r0, #0
 800cc6a:	d0ec      	beq.n	800cc46 <_realloc_r+0x1c>
 800cc6c:	42b5      	cmp	r5, r6
 800cc6e:	462a      	mov	r2, r5
 800cc70:	4621      	mov	r1, r4
 800cc72:	bf28      	it	cs
 800cc74:	4632      	movcs	r2, r6
 800cc76:	f7ff fc43 	bl	800c500 <memcpy>
 800cc7a:	4621      	mov	r1, r4
 800cc7c:	4640      	mov	r0, r8
 800cc7e:	f7fd fe1d 	bl	800a8bc <_free_r>
 800cc82:	463c      	mov	r4, r7
 800cc84:	e7e0      	b.n	800cc48 <_realloc_r+0x1e>

0800cc86 <__ascii_wctomb>:
 800cc86:	4603      	mov	r3, r0
 800cc88:	4608      	mov	r0, r1
 800cc8a:	b141      	cbz	r1, 800cc9e <__ascii_wctomb+0x18>
 800cc8c:	2aff      	cmp	r2, #255	@ 0xff
 800cc8e:	d904      	bls.n	800cc9a <__ascii_wctomb+0x14>
 800cc90:	228a      	movs	r2, #138	@ 0x8a
 800cc92:	601a      	str	r2, [r3, #0]
 800cc94:	f04f 30ff 	mov.w	r0, #4294967295
 800cc98:	4770      	bx	lr
 800cc9a:	700a      	strb	r2, [r1, #0]
 800cc9c:	2001      	movs	r0, #1
 800cc9e:	4770      	bx	lr

0800cca0 <fiprintf>:
 800cca0:	b40e      	push	{r1, r2, r3}
 800cca2:	b503      	push	{r0, r1, lr}
 800cca4:	4601      	mov	r1, r0
 800cca6:	ab03      	add	r3, sp, #12
 800cca8:	4805      	ldr	r0, [pc, #20]	@ (800ccc0 <fiprintf+0x20>)
 800ccaa:	f853 2b04 	ldr.w	r2, [r3], #4
 800ccae:	6800      	ldr	r0, [r0, #0]
 800ccb0:	9301      	str	r3, [sp, #4]
 800ccb2:	f000 f83f 	bl	800cd34 <_vfiprintf_r>
 800ccb6:	b002      	add	sp, #8
 800ccb8:	f85d eb04 	ldr.w	lr, [sp], #4
 800ccbc:	b003      	add	sp, #12
 800ccbe:	4770      	bx	lr
 800ccc0:	2400001c 	.word	0x2400001c

0800ccc4 <abort>:
 800ccc4:	b508      	push	{r3, lr}
 800ccc6:	2006      	movs	r0, #6
 800ccc8:	f000 fa08 	bl	800d0dc <raise>
 800cccc:	2001      	movs	r0, #1
 800ccce:	f7f4 ff84 	bl	8001bda <_exit>

0800ccd2 <_malloc_usable_size_r>:
 800ccd2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ccd6:	1f18      	subs	r0, r3, #4
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	bfbc      	itt	lt
 800ccdc:	580b      	ldrlt	r3, [r1, r0]
 800ccde:	18c0      	addlt	r0, r0, r3
 800cce0:	4770      	bx	lr

0800cce2 <__sfputc_r>:
 800cce2:	6893      	ldr	r3, [r2, #8]
 800cce4:	3b01      	subs	r3, #1
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	b410      	push	{r4}
 800ccea:	6093      	str	r3, [r2, #8]
 800ccec:	da08      	bge.n	800cd00 <__sfputc_r+0x1e>
 800ccee:	6994      	ldr	r4, [r2, #24]
 800ccf0:	42a3      	cmp	r3, r4
 800ccf2:	db01      	blt.n	800ccf8 <__sfputc_r+0x16>
 800ccf4:	290a      	cmp	r1, #10
 800ccf6:	d103      	bne.n	800cd00 <__sfputc_r+0x1e>
 800ccf8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ccfc:	f000 b932 	b.w	800cf64 <__swbuf_r>
 800cd00:	6813      	ldr	r3, [r2, #0]
 800cd02:	1c58      	adds	r0, r3, #1
 800cd04:	6010      	str	r0, [r2, #0]
 800cd06:	7019      	strb	r1, [r3, #0]
 800cd08:	4608      	mov	r0, r1
 800cd0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cd0e:	4770      	bx	lr

0800cd10 <__sfputs_r>:
 800cd10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd12:	4606      	mov	r6, r0
 800cd14:	460f      	mov	r7, r1
 800cd16:	4614      	mov	r4, r2
 800cd18:	18d5      	adds	r5, r2, r3
 800cd1a:	42ac      	cmp	r4, r5
 800cd1c:	d101      	bne.n	800cd22 <__sfputs_r+0x12>
 800cd1e:	2000      	movs	r0, #0
 800cd20:	e007      	b.n	800cd32 <__sfputs_r+0x22>
 800cd22:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd26:	463a      	mov	r2, r7
 800cd28:	4630      	mov	r0, r6
 800cd2a:	f7ff ffda 	bl	800cce2 <__sfputc_r>
 800cd2e:	1c43      	adds	r3, r0, #1
 800cd30:	d1f3      	bne.n	800cd1a <__sfputs_r+0xa>
 800cd32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cd34 <_vfiprintf_r>:
 800cd34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd38:	460d      	mov	r5, r1
 800cd3a:	b09d      	sub	sp, #116	@ 0x74
 800cd3c:	4614      	mov	r4, r2
 800cd3e:	4698      	mov	r8, r3
 800cd40:	4606      	mov	r6, r0
 800cd42:	b118      	cbz	r0, 800cd4c <_vfiprintf_r+0x18>
 800cd44:	6a03      	ldr	r3, [r0, #32]
 800cd46:	b90b      	cbnz	r3, 800cd4c <_vfiprintf_r+0x18>
 800cd48:	f7fc fe86 	bl	8009a58 <__sinit>
 800cd4c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cd4e:	07d9      	lsls	r1, r3, #31
 800cd50:	d405      	bmi.n	800cd5e <_vfiprintf_r+0x2a>
 800cd52:	89ab      	ldrh	r3, [r5, #12]
 800cd54:	059a      	lsls	r2, r3, #22
 800cd56:	d402      	bmi.n	800cd5e <_vfiprintf_r+0x2a>
 800cd58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cd5a:	f7fc ffc8 	bl	8009cee <__retarget_lock_acquire_recursive>
 800cd5e:	89ab      	ldrh	r3, [r5, #12]
 800cd60:	071b      	lsls	r3, r3, #28
 800cd62:	d501      	bpl.n	800cd68 <_vfiprintf_r+0x34>
 800cd64:	692b      	ldr	r3, [r5, #16]
 800cd66:	b99b      	cbnz	r3, 800cd90 <_vfiprintf_r+0x5c>
 800cd68:	4629      	mov	r1, r5
 800cd6a:	4630      	mov	r0, r6
 800cd6c:	f000 f938 	bl	800cfe0 <__swsetup_r>
 800cd70:	b170      	cbz	r0, 800cd90 <_vfiprintf_r+0x5c>
 800cd72:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cd74:	07dc      	lsls	r4, r3, #31
 800cd76:	d504      	bpl.n	800cd82 <_vfiprintf_r+0x4e>
 800cd78:	f04f 30ff 	mov.w	r0, #4294967295
 800cd7c:	b01d      	add	sp, #116	@ 0x74
 800cd7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd82:	89ab      	ldrh	r3, [r5, #12]
 800cd84:	0598      	lsls	r0, r3, #22
 800cd86:	d4f7      	bmi.n	800cd78 <_vfiprintf_r+0x44>
 800cd88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cd8a:	f7fc ffb1 	bl	8009cf0 <__retarget_lock_release_recursive>
 800cd8e:	e7f3      	b.n	800cd78 <_vfiprintf_r+0x44>
 800cd90:	2300      	movs	r3, #0
 800cd92:	9309      	str	r3, [sp, #36]	@ 0x24
 800cd94:	2320      	movs	r3, #32
 800cd96:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cd9a:	f8cd 800c 	str.w	r8, [sp, #12]
 800cd9e:	2330      	movs	r3, #48	@ 0x30
 800cda0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800cf50 <_vfiprintf_r+0x21c>
 800cda4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cda8:	f04f 0901 	mov.w	r9, #1
 800cdac:	4623      	mov	r3, r4
 800cdae:	469a      	mov	sl, r3
 800cdb0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cdb4:	b10a      	cbz	r2, 800cdba <_vfiprintf_r+0x86>
 800cdb6:	2a25      	cmp	r2, #37	@ 0x25
 800cdb8:	d1f9      	bne.n	800cdae <_vfiprintf_r+0x7a>
 800cdba:	ebba 0b04 	subs.w	fp, sl, r4
 800cdbe:	d00b      	beq.n	800cdd8 <_vfiprintf_r+0xa4>
 800cdc0:	465b      	mov	r3, fp
 800cdc2:	4622      	mov	r2, r4
 800cdc4:	4629      	mov	r1, r5
 800cdc6:	4630      	mov	r0, r6
 800cdc8:	f7ff ffa2 	bl	800cd10 <__sfputs_r>
 800cdcc:	3001      	adds	r0, #1
 800cdce:	f000 80a7 	beq.w	800cf20 <_vfiprintf_r+0x1ec>
 800cdd2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cdd4:	445a      	add	r2, fp
 800cdd6:	9209      	str	r2, [sp, #36]	@ 0x24
 800cdd8:	f89a 3000 	ldrb.w	r3, [sl]
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	f000 809f 	beq.w	800cf20 <_vfiprintf_r+0x1ec>
 800cde2:	2300      	movs	r3, #0
 800cde4:	f04f 32ff 	mov.w	r2, #4294967295
 800cde8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cdec:	f10a 0a01 	add.w	sl, sl, #1
 800cdf0:	9304      	str	r3, [sp, #16]
 800cdf2:	9307      	str	r3, [sp, #28]
 800cdf4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cdf8:	931a      	str	r3, [sp, #104]	@ 0x68
 800cdfa:	4654      	mov	r4, sl
 800cdfc:	2205      	movs	r2, #5
 800cdfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce02:	4853      	ldr	r0, [pc, #332]	@ (800cf50 <_vfiprintf_r+0x21c>)
 800ce04:	f7f3 fa74 	bl	80002f0 <memchr>
 800ce08:	9a04      	ldr	r2, [sp, #16]
 800ce0a:	b9d8      	cbnz	r0, 800ce44 <_vfiprintf_r+0x110>
 800ce0c:	06d1      	lsls	r1, r2, #27
 800ce0e:	bf44      	itt	mi
 800ce10:	2320      	movmi	r3, #32
 800ce12:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ce16:	0713      	lsls	r3, r2, #28
 800ce18:	bf44      	itt	mi
 800ce1a:	232b      	movmi	r3, #43	@ 0x2b
 800ce1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ce20:	f89a 3000 	ldrb.w	r3, [sl]
 800ce24:	2b2a      	cmp	r3, #42	@ 0x2a
 800ce26:	d015      	beq.n	800ce54 <_vfiprintf_r+0x120>
 800ce28:	9a07      	ldr	r2, [sp, #28]
 800ce2a:	4654      	mov	r4, sl
 800ce2c:	2000      	movs	r0, #0
 800ce2e:	f04f 0c0a 	mov.w	ip, #10
 800ce32:	4621      	mov	r1, r4
 800ce34:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ce38:	3b30      	subs	r3, #48	@ 0x30
 800ce3a:	2b09      	cmp	r3, #9
 800ce3c:	d94b      	bls.n	800ced6 <_vfiprintf_r+0x1a2>
 800ce3e:	b1b0      	cbz	r0, 800ce6e <_vfiprintf_r+0x13a>
 800ce40:	9207      	str	r2, [sp, #28]
 800ce42:	e014      	b.n	800ce6e <_vfiprintf_r+0x13a>
 800ce44:	eba0 0308 	sub.w	r3, r0, r8
 800ce48:	fa09 f303 	lsl.w	r3, r9, r3
 800ce4c:	4313      	orrs	r3, r2
 800ce4e:	9304      	str	r3, [sp, #16]
 800ce50:	46a2      	mov	sl, r4
 800ce52:	e7d2      	b.n	800cdfa <_vfiprintf_r+0xc6>
 800ce54:	9b03      	ldr	r3, [sp, #12]
 800ce56:	1d19      	adds	r1, r3, #4
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	9103      	str	r1, [sp, #12]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	bfbb      	ittet	lt
 800ce60:	425b      	neglt	r3, r3
 800ce62:	f042 0202 	orrlt.w	r2, r2, #2
 800ce66:	9307      	strge	r3, [sp, #28]
 800ce68:	9307      	strlt	r3, [sp, #28]
 800ce6a:	bfb8      	it	lt
 800ce6c:	9204      	strlt	r2, [sp, #16]
 800ce6e:	7823      	ldrb	r3, [r4, #0]
 800ce70:	2b2e      	cmp	r3, #46	@ 0x2e
 800ce72:	d10a      	bne.n	800ce8a <_vfiprintf_r+0x156>
 800ce74:	7863      	ldrb	r3, [r4, #1]
 800ce76:	2b2a      	cmp	r3, #42	@ 0x2a
 800ce78:	d132      	bne.n	800cee0 <_vfiprintf_r+0x1ac>
 800ce7a:	9b03      	ldr	r3, [sp, #12]
 800ce7c:	1d1a      	adds	r2, r3, #4
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	9203      	str	r2, [sp, #12]
 800ce82:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ce86:	3402      	adds	r4, #2
 800ce88:	9305      	str	r3, [sp, #20]
 800ce8a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800cf60 <_vfiprintf_r+0x22c>
 800ce8e:	7821      	ldrb	r1, [r4, #0]
 800ce90:	2203      	movs	r2, #3
 800ce92:	4650      	mov	r0, sl
 800ce94:	f7f3 fa2c 	bl	80002f0 <memchr>
 800ce98:	b138      	cbz	r0, 800ceaa <_vfiprintf_r+0x176>
 800ce9a:	9b04      	ldr	r3, [sp, #16]
 800ce9c:	eba0 000a 	sub.w	r0, r0, sl
 800cea0:	2240      	movs	r2, #64	@ 0x40
 800cea2:	4082      	lsls	r2, r0
 800cea4:	4313      	orrs	r3, r2
 800cea6:	3401      	adds	r4, #1
 800cea8:	9304      	str	r3, [sp, #16]
 800ceaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ceae:	4829      	ldr	r0, [pc, #164]	@ (800cf54 <_vfiprintf_r+0x220>)
 800ceb0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ceb4:	2206      	movs	r2, #6
 800ceb6:	f7f3 fa1b 	bl	80002f0 <memchr>
 800ceba:	2800      	cmp	r0, #0
 800cebc:	d03f      	beq.n	800cf3e <_vfiprintf_r+0x20a>
 800cebe:	4b26      	ldr	r3, [pc, #152]	@ (800cf58 <_vfiprintf_r+0x224>)
 800cec0:	bb1b      	cbnz	r3, 800cf0a <_vfiprintf_r+0x1d6>
 800cec2:	9b03      	ldr	r3, [sp, #12]
 800cec4:	3307      	adds	r3, #7
 800cec6:	f023 0307 	bic.w	r3, r3, #7
 800ceca:	3308      	adds	r3, #8
 800cecc:	9303      	str	r3, [sp, #12]
 800cece:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ced0:	443b      	add	r3, r7
 800ced2:	9309      	str	r3, [sp, #36]	@ 0x24
 800ced4:	e76a      	b.n	800cdac <_vfiprintf_r+0x78>
 800ced6:	fb0c 3202 	mla	r2, ip, r2, r3
 800ceda:	460c      	mov	r4, r1
 800cedc:	2001      	movs	r0, #1
 800cede:	e7a8      	b.n	800ce32 <_vfiprintf_r+0xfe>
 800cee0:	2300      	movs	r3, #0
 800cee2:	3401      	adds	r4, #1
 800cee4:	9305      	str	r3, [sp, #20]
 800cee6:	4619      	mov	r1, r3
 800cee8:	f04f 0c0a 	mov.w	ip, #10
 800ceec:	4620      	mov	r0, r4
 800ceee:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cef2:	3a30      	subs	r2, #48	@ 0x30
 800cef4:	2a09      	cmp	r2, #9
 800cef6:	d903      	bls.n	800cf00 <_vfiprintf_r+0x1cc>
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d0c6      	beq.n	800ce8a <_vfiprintf_r+0x156>
 800cefc:	9105      	str	r1, [sp, #20]
 800cefe:	e7c4      	b.n	800ce8a <_vfiprintf_r+0x156>
 800cf00:	fb0c 2101 	mla	r1, ip, r1, r2
 800cf04:	4604      	mov	r4, r0
 800cf06:	2301      	movs	r3, #1
 800cf08:	e7f0      	b.n	800ceec <_vfiprintf_r+0x1b8>
 800cf0a:	ab03      	add	r3, sp, #12
 800cf0c:	9300      	str	r3, [sp, #0]
 800cf0e:	462a      	mov	r2, r5
 800cf10:	4b12      	ldr	r3, [pc, #72]	@ (800cf5c <_vfiprintf_r+0x228>)
 800cf12:	a904      	add	r1, sp, #16
 800cf14:	4630      	mov	r0, r6
 800cf16:	f7fb ff5f 	bl	8008dd8 <_printf_float>
 800cf1a:	4607      	mov	r7, r0
 800cf1c:	1c78      	adds	r0, r7, #1
 800cf1e:	d1d6      	bne.n	800cece <_vfiprintf_r+0x19a>
 800cf20:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cf22:	07d9      	lsls	r1, r3, #31
 800cf24:	d405      	bmi.n	800cf32 <_vfiprintf_r+0x1fe>
 800cf26:	89ab      	ldrh	r3, [r5, #12]
 800cf28:	059a      	lsls	r2, r3, #22
 800cf2a:	d402      	bmi.n	800cf32 <_vfiprintf_r+0x1fe>
 800cf2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cf2e:	f7fc fedf 	bl	8009cf0 <__retarget_lock_release_recursive>
 800cf32:	89ab      	ldrh	r3, [r5, #12]
 800cf34:	065b      	lsls	r3, r3, #25
 800cf36:	f53f af1f 	bmi.w	800cd78 <_vfiprintf_r+0x44>
 800cf3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cf3c:	e71e      	b.n	800cd7c <_vfiprintf_r+0x48>
 800cf3e:	ab03      	add	r3, sp, #12
 800cf40:	9300      	str	r3, [sp, #0]
 800cf42:	462a      	mov	r2, r5
 800cf44:	4b05      	ldr	r3, [pc, #20]	@ (800cf5c <_vfiprintf_r+0x228>)
 800cf46:	a904      	add	r1, sp, #16
 800cf48:	4630      	mov	r0, r6
 800cf4a:	f7fc f9cd 	bl	80092e8 <_printf_i>
 800cf4e:	e7e4      	b.n	800cf1a <_vfiprintf_r+0x1e6>
 800cf50:	0800d7e1 	.word	0x0800d7e1
 800cf54:	0800d7eb 	.word	0x0800d7eb
 800cf58:	08008dd9 	.word	0x08008dd9
 800cf5c:	0800cd11 	.word	0x0800cd11
 800cf60:	0800d7e7 	.word	0x0800d7e7

0800cf64 <__swbuf_r>:
 800cf64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf66:	460e      	mov	r6, r1
 800cf68:	4614      	mov	r4, r2
 800cf6a:	4605      	mov	r5, r0
 800cf6c:	b118      	cbz	r0, 800cf76 <__swbuf_r+0x12>
 800cf6e:	6a03      	ldr	r3, [r0, #32]
 800cf70:	b90b      	cbnz	r3, 800cf76 <__swbuf_r+0x12>
 800cf72:	f7fc fd71 	bl	8009a58 <__sinit>
 800cf76:	69a3      	ldr	r3, [r4, #24]
 800cf78:	60a3      	str	r3, [r4, #8]
 800cf7a:	89a3      	ldrh	r3, [r4, #12]
 800cf7c:	071a      	lsls	r2, r3, #28
 800cf7e:	d501      	bpl.n	800cf84 <__swbuf_r+0x20>
 800cf80:	6923      	ldr	r3, [r4, #16]
 800cf82:	b943      	cbnz	r3, 800cf96 <__swbuf_r+0x32>
 800cf84:	4621      	mov	r1, r4
 800cf86:	4628      	mov	r0, r5
 800cf88:	f000 f82a 	bl	800cfe0 <__swsetup_r>
 800cf8c:	b118      	cbz	r0, 800cf96 <__swbuf_r+0x32>
 800cf8e:	f04f 37ff 	mov.w	r7, #4294967295
 800cf92:	4638      	mov	r0, r7
 800cf94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf96:	6823      	ldr	r3, [r4, #0]
 800cf98:	6922      	ldr	r2, [r4, #16]
 800cf9a:	1a98      	subs	r0, r3, r2
 800cf9c:	6963      	ldr	r3, [r4, #20]
 800cf9e:	b2f6      	uxtb	r6, r6
 800cfa0:	4283      	cmp	r3, r0
 800cfa2:	4637      	mov	r7, r6
 800cfa4:	dc05      	bgt.n	800cfb2 <__swbuf_r+0x4e>
 800cfa6:	4621      	mov	r1, r4
 800cfa8:	4628      	mov	r0, r5
 800cfaa:	f7ff fa45 	bl	800c438 <_fflush_r>
 800cfae:	2800      	cmp	r0, #0
 800cfb0:	d1ed      	bne.n	800cf8e <__swbuf_r+0x2a>
 800cfb2:	68a3      	ldr	r3, [r4, #8]
 800cfb4:	3b01      	subs	r3, #1
 800cfb6:	60a3      	str	r3, [r4, #8]
 800cfb8:	6823      	ldr	r3, [r4, #0]
 800cfba:	1c5a      	adds	r2, r3, #1
 800cfbc:	6022      	str	r2, [r4, #0]
 800cfbe:	701e      	strb	r6, [r3, #0]
 800cfc0:	6962      	ldr	r2, [r4, #20]
 800cfc2:	1c43      	adds	r3, r0, #1
 800cfc4:	429a      	cmp	r2, r3
 800cfc6:	d004      	beq.n	800cfd2 <__swbuf_r+0x6e>
 800cfc8:	89a3      	ldrh	r3, [r4, #12]
 800cfca:	07db      	lsls	r3, r3, #31
 800cfcc:	d5e1      	bpl.n	800cf92 <__swbuf_r+0x2e>
 800cfce:	2e0a      	cmp	r6, #10
 800cfd0:	d1df      	bne.n	800cf92 <__swbuf_r+0x2e>
 800cfd2:	4621      	mov	r1, r4
 800cfd4:	4628      	mov	r0, r5
 800cfd6:	f7ff fa2f 	bl	800c438 <_fflush_r>
 800cfda:	2800      	cmp	r0, #0
 800cfdc:	d0d9      	beq.n	800cf92 <__swbuf_r+0x2e>
 800cfde:	e7d6      	b.n	800cf8e <__swbuf_r+0x2a>

0800cfe0 <__swsetup_r>:
 800cfe0:	b538      	push	{r3, r4, r5, lr}
 800cfe2:	4b29      	ldr	r3, [pc, #164]	@ (800d088 <__swsetup_r+0xa8>)
 800cfe4:	4605      	mov	r5, r0
 800cfe6:	6818      	ldr	r0, [r3, #0]
 800cfe8:	460c      	mov	r4, r1
 800cfea:	b118      	cbz	r0, 800cff4 <__swsetup_r+0x14>
 800cfec:	6a03      	ldr	r3, [r0, #32]
 800cfee:	b90b      	cbnz	r3, 800cff4 <__swsetup_r+0x14>
 800cff0:	f7fc fd32 	bl	8009a58 <__sinit>
 800cff4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cff8:	0719      	lsls	r1, r3, #28
 800cffa:	d422      	bmi.n	800d042 <__swsetup_r+0x62>
 800cffc:	06da      	lsls	r2, r3, #27
 800cffe:	d407      	bmi.n	800d010 <__swsetup_r+0x30>
 800d000:	2209      	movs	r2, #9
 800d002:	602a      	str	r2, [r5, #0]
 800d004:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d008:	81a3      	strh	r3, [r4, #12]
 800d00a:	f04f 30ff 	mov.w	r0, #4294967295
 800d00e:	e033      	b.n	800d078 <__swsetup_r+0x98>
 800d010:	0758      	lsls	r0, r3, #29
 800d012:	d512      	bpl.n	800d03a <__swsetup_r+0x5a>
 800d014:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d016:	b141      	cbz	r1, 800d02a <__swsetup_r+0x4a>
 800d018:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d01c:	4299      	cmp	r1, r3
 800d01e:	d002      	beq.n	800d026 <__swsetup_r+0x46>
 800d020:	4628      	mov	r0, r5
 800d022:	f7fd fc4b 	bl	800a8bc <_free_r>
 800d026:	2300      	movs	r3, #0
 800d028:	6363      	str	r3, [r4, #52]	@ 0x34
 800d02a:	89a3      	ldrh	r3, [r4, #12]
 800d02c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d030:	81a3      	strh	r3, [r4, #12]
 800d032:	2300      	movs	r3, #0
 800d034:	6063      	str	r3, [r4, #4]
 800d036:	6923      	ldr	r3, [r4, #16]
 800d038:	6023      	str	r3, [r4, #0]
 800d03a:	89a3      	ldrh	r3, [r4, #12]
 800d03c:	f043 0308 	orr.w	r3, r3, #8
 800d040:	81a3      	strh	r3, [r4, #12]
 800d042:	6923      	ldr	r3, [r4, #16]
 800d044:	b94b      	cbnz	r3, 800d05a <__swsetup_r+0x7a>
 800d046:	89a3      	ldrh	r3, [r4, #12]
 800d048:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d04c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d050:	d003      	beq.n	800d05a <__swsetup_r+0x7a>
 800d052:	4621      	mov	r1, r4
 800d054:	4628      	mov	r0, r5
 800d056:	f000 f883 	bl	800d160 <__smakebuf_r>
 800d05a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d05e:	f013 0201 	ands.w	r2, r3, #1
 800d062:	d00a      	beq.n	800d07a <__swsetup_r+0x9a>
 800d064:	2200      	movs	r2, #0
 800d066:	60a2      	str	r2, [r4, #8]
 800d068:	6962      	ldr	r2, [r4, #20]
 800d06a:	4252      	negs	r2, r2
 800d06c:	61a2      	str	r2, [r4, #24]
 800d06e:	6922      	ldr	r2, [r4, #16]
 800d070:	b942      	cbnz	r2, 800d084 <__swsetup_r+0xa4>
 800d072:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d076:	d1c5      	bne.n	800d004 <__swsetup_r+0x24>
 800d078:	bd38      	pop	{r3, r4, r5, pc}
 800d07a:	0799      	lsls	r1, r3, #30
 800d07c:	bf58      	it	pl
 800d07e:	6962      	ldrpl	r2, [r4, #20]
 800d080:	60a2      	str	r2, [r4, #8]
 800d082:	e7f4      	b.n	800d06e <__swsetup_r+0x8e>
 800d084:	2000      	movs	r0, #0
 800d086:	e7f7      	b.n	800d078 <__swsetup_r+0x98>
 800d088:	2400001c 	.word	0x2400001c

0800d08c <_raise_r>:
 800d08c:	291f      	cmp	r1, #31
 800d08e:	b538      	push	{r3, r4, r5, lr}
 800d090:	4605      	mov	r5, r0
 800d092:	460c      	mov	r4, r1
 800d094:	d904      	bls.n	800d0a0 <_raise_r+0x14>
 800d096:	2316      	movs	r3, #22
 800d098:	6003      	str	r3, [r0, #0]
 800d09a:	f04f 30ff 	mov.w	r0, #4294967295
 800d09e:	bd38      	pop	{r3, r4, r5, pc}
 800d0a0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d0a2:	b112      	cbz	r2, 800d0aa <_raise_r+0x1e>
 800d0a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d0a8:	b94b      	cbnz	r3, 800d0be <_raise_r+0x32>
 800d0aa:	4628      	mov	r0, r5
 800d0ac:	f000 f830 	bl	800d110 <_getpid_r>
 800d0b0:	4622      	mov	r2, r4
 800d0b2:	4601      	mov	r1, r0
 800d0b4:	4628      	mov	r0, r5
 800d0b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d0ba:	f000 b817 	b.w	800d0ec <_kill_r>
 800d0be:	2b01      	cmp	r3, #1
 800d0c0:	d00a      	beq.n	800d0d8 <_raise_r+0x4c>
 800d0c2:	1c59      	adds	r1, r3, #1
 800d0c4:	d103      	bne.n	800d0ce <_raise_r+0x42>
 800d0c6:	2316      	movs	r3, #22
 800d0c8:	6003      	str	r3, [r0, #0]
 800d0ca:	2001      	movs	r0, #1
 800d0cc:	e7e7      	b.n	800d09e <_raise_r+0x12>
 800d0ce:	2100      	movs	r1, #0
 800d0d0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d0d4:	4620      	mov	r0, r4
 800d0d6:	4798      	blx	r3
 800d0d8:	2000      	movs	r0, #0
 800d0da:	e7e0      	b.n	800d09e <_raise_r+0x12>

0800d0dc <raise>:
 800d0dc:	4b02      	ldr	r3, [pc, #8]	@ (800d0e8 <raise+0xc>)
 800d0de:	4601      	mov	r1, r0
 800d0e0:	6818      	ldr	r0, [r3, #0]
 800d0e2:	f7ff bfd3 	b.w	800d08c <_raise_r>
 800d0e6:	bf00      	nop
 800d0e8:	2400001c 	.word	0x2400001c

0800d0ec <_kill_r>:
 800d0ec:	b538      	push	{r3, r4, r5, lr}
 800d0ee:	4d07      	ldr	r5, [pc, #28]	@ (800d10c <_kill_r+0x20>)
 800d0f0:	2300      	movs	r3, #0
 800d0f2:	4604      	mov	r4, r0
 800d0f4:	4608      	mov	r0, r1
 800d0f6:	4611      	mov	r1, r2
 800d0f8:	602b      	str	r3, [r5, #0]
 800d0fa:	f7f4 fd5e 	bl	8001bba <_kill>
 800d0fe:	1c43      	adds	r3, r0, #1
 800d100:	d102      	bne.n	800d108 <_kill_r+0x1c>
 800d102:	682b      	ldr	r3, [r5, #0]
 800d104:	b103      	cbz	r3, 800d108 <_kill_r+0x1c>
 800d106:	6023      	str	r3, [r4, #0]
 800d108:	bd38      	pop	{r3, r4, r5, pc}
 800d10a:	bf00      	nop
 800d10c:	2400061c 	.word	0x2400061c

0800d110 <_getpid_r>:
 800d110:	f7f4 bd4b 	b.w	8001baa <_getpid>

0800d114 <__swhatbuf_r>:
 800d114:	b570      	push	{r4, r5, r6, lr}
 800d116:	460c      	mov	r4, r1
 800d118:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d11c:	2900      	cmp	r1, #0
 800d11e:	b096      	sub	sp, #88	@ 0x58
 800d120:	4615      	mov	r5, r2
 800d122:	461e      	mov	r6, r3
 800d124:	da0d      	bge.n	800d142 <__swhatbuf_r+0x2e>
 800d126:	89a3      	ldrh	r3, [r4, #12]
 800d128:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d12c:	f04f 0100 	mov.w	r1, #0
 800d130:	bf14      	ite	ne
 800d132:	2340      	movne	r3, #64	@ 0x40
 800d134:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d138:	2000      	movs	r0, #0
 800d13a:	6031      	str	r1, [r6, #0]
 800d13c:	602b      	str	r3, [r5, #0]
 800d13e:	b016      	add	sp, #88	@ 0x58
 800d140:	bd70      	pop	{r4, r5, r6, pc}
 800d142:	466a      	mov	r2, sp
 800d144:	f000 f848 	bl	800d1d8 <_fstat_r>
 800d148:	2800      	cmp	r0, #0
 800d14a:	dbec      	blt.n	800d126 <__swhatbuf_r+0x12>
 800d14c:	9901      	ldr	r1, [sp, #4]
 800d14e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d152:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d156:	4259      	negs	r1, r3
 800d158:	4159      	adcs	r1, r3
 800d15a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d15e:	e7eb      	b.n	800d138 <__swhatbuf_r+0x24>

0800d160 <__smakebuf_r>:
 800d160:	898b      	ldrh	r3, [r1, #12]
 800d162:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d164:	079d      	lsls	r5, r3, #30
 800d166:	4606      	mov	r6, r0
 800d168:	460c      	mov	r4, r1
 800d16a:	d507      	bpl.n	800d17c <__smakebuf_r+0x1c>
 800d16c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d170:	6023      	str	r3, [r4, #0]
 800d172:	6123      	str	r3, [r4, #16]
 800d174:	2301      	movs	r3, #1
 800d176:	6163      	str	r3, [r4, #20]
 800d178:	b003      	add	sp, #12
 800d17a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d17c:	ab01      	add	r3, sp, #4
 800d17e:	466a      	mov	r2, sp
 800d180:	f7ff ffc8 	bl	800d114 <__swhatbuf_r>
 800d184:	9f00      	ldr	r7, [sp, #0]
 800d186:	4605      	mov	r5, r0
 800d188:	4639      	mov	r1, r7
 800d18a:	4630      	mov	r0, r6
 800d18c:	f7fd fc0a 	bl	800a9a4 <_malloc_r>
 800d190:	b948      	cbnz	r0, 800d1a6 <__smakebuf_r+0x46>
 800d192:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d196:	059a      	lsls	r2, r3, #22
 800d198:	d4ee      	bmi.n	800d178 <__smakebuf_r+0x18>
 800d19a:	f023 0303 	bic.w	r3, r3, #3
 800d19e:	f043 0302 	orr.w	r3, r3, #2
 800d1a2:	81a3      	strh	r3, [r4, #12]
 800d1a4:	e7e2      	b.n	800d16c <__smakebuf_r+0xc>
 800d1a6:	89a3      	ldrh	r3, [r4, #12]
 800d1a8:	6020      	str	r0, [r4, #0]
 800d1aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d1ae:	81a3      	strh	r3, [r4, #12]
 800d1b0:	9b01      	ldr	r3, [sp, #4]
 800d1b2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d1b6:	b15b      	cbz	r3, 800d1d0 <__smakebuf_r+0x70>
 800d1b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d1bc:	4630      	mov	r0, r6
 800d1be:	f000 f81d 	bl	800d1fc <_isatty_r>
 800d1c2:	b128      	cbz	r0, 800d1d0 <__smakebuf_r+0x70>
 800d1c4:	89a3      	ldrh	r3, [r4, #12]
 800d1c6:	f023 0303 	bic.w	r3, r3, #3
 800d1ca:	f043 0301 	orr.w	r3, r3, #1
 800d1ce:	81a3      	strh	r3, [r4, #12]
 800d1d0:	89a3      	ldrh	r3, [r4, #12]
 800d1d2:	431d      	orrs	r5, r3
 800d1d4:	81a5      	strh	r5, [r4, #12]
 800d1d6:	e7cf      	b.n	800d178 <__smakebuf_r+0x18>

0800d1d8 <_fstat_r>:
 800d1d8:	b538      	push	{r3, r4, r5, lr}
 800d1da:	4d07      	ldr	r5, [pc, #28]	@ (800d1f8 <_fstat_r+0x20>)
 800d1dc:	2300      	movs	r3, #0
 800d1de:	4604      	mov	r4, r0
 800d1e0:	4608      	mov	r0, r1
 800d1e2:	4611      	mov	r1, r2
 800d1e4:	602b      	str	r3, [r5, #0]
 800d1e6:	f7f4 fd48 	bl	8001c7a <_fstat>
 800d1ea:	1c43      	adds	r3, r0, #1
 800d1ec:	d102      	bne.n	800d1f4 <_fstat_r+0x1c>
 800d1ee:	682b      	ldr	r3, [r5, #0]
 800d1f0:	b103      	cbz	r3, 800d1f4 <_fstat_r+0x1c>
 800d1f2:	6023      	str	r3, [r4, #0]
 800d1f4:	bd38      	pop	{r3, r4, r5, pc}
 800d1f6:	bf00      	nop
 800d1f8:	2400061c 	.word	0x2400061c

0800d1fc <_isatty_r>:
 800d1fc:	b538      	push	{r3, r4, r5, lr}
 800d1fe:	4d06      	ldr	r5, [pc, #24]	@ (800d218 <_isatty_r+0x1c>)
 800d200:	2300      	movs	r3, #0
 800d202:	4604      	mov	r4, r0
 800d204:	4608      	mov	r0, r1
 800d206:	602b      	str	r3, [r5, #0]
 800d208:	f7f4 fd47 	bl	8001c9a <_isatty>
 800d20c:	1c43      	adds	r3, r0, #1
 800d20e:	d102      	bne.n	800d216 <_isatty_r+0x1a>
 800d210:	682b      	ldr	r3, [r5, #0]
 800d212:	b103      	cbz	r3, 800d216 <_isatty_r+0x1a>
 800d214:	6023      	str	r3, [r4, #0]
 800d216:	bd38      	pop	{r3, r4, r5, pc}
 800d218:	2400061c 	.word	0x2400061c

0800d21c <_init>:
 800d21c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d21e:	bf00      	nop
 800d220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d222:	bc08      	pop	{r3}
 800d224:	469e      	mov	lr, r3
 800d226:	4770      	bx	lr

0800d228 <_fini>:
 800d228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d22a:	bf00      	nop
 800d22c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d22e:	bc08      	pop	{r3}
 800d230:	469e      	mov	lr, r3
 800d232:	4770      	bx	lr
